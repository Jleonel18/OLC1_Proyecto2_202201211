/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var gramatica = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,19],$V1=[1,21],$V2=[1,31],$V3=[1,32],$V4=[1,33],$V5=[1,34],$V6=[1,35],$V7=[1,36],$V8=[1,23],$V9=[1,29],$Va=[1,24],$Vb=[1,26],$Vc=[1,27],$Vd=[1,25],$Ve=[1,28],$Vf=[1,30],$Vg=[5,23,33,35,36,37,40,41,42,76,78,81,85,86,87,88,89,91,92,103],$Vh=[1,44],$Vi=[1,48],$Vj=[1,49],$Vk=[9,49],$Vl=[33,49,96],$Vm=[1,67],$Vn=[1,78],$Vo=[1,63],$Vp=[1,60],$Vq=[1,61],$Vr=[1,62],$Vs=[1,64],$Vt=[1,65],$Vu=[1,66],$Vv=[1,68],$Vw=[1,69],$Vx=[1,70],$Vy=[1,74],$Vz=[1,75],$VA=[1,76],$VB=[1,77],$VC=[9,31,32],$VD=[2,26],$VE=[1,96],$VF=[1,101],$VG=[1,102],$VH=[1,103],$VI=[1,104],$VJ=[1,105],$VK=[1,106],$VL=[1,107],$VM=[1,108],$VN=[1,109],$VO=[1,110],$VP=[1,111],$VQ=[1,112],$VR=[1,113],$VS=[1,114],$VT=[1,115],$VU=[9,24,32,38,43,44,45,46,47,49,51,52,53,54,55,56,58,59,67,69,97,101],$VV=[1,138],$VW=[32,49],$VX=[1,148],$VY=[9,24,32,38,49,58,59,69,97,101],$VZ=[9,24,32,38,43,44,45,46,47,49,51,52,53,54,55,56,58,59,69,97,101],$V_=[9,24,32,38,43,44,49,51,52,53,54,55,56,58,59,69,97,101],$V$=[9,24,32,38,49,51,52,53,54,55,56,58,59,69,97,101],$V01=[1,199],$V11=[1,215],$V21=[1,216],$V31=[78,85,86],$V41=[32,97];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"inicio":3,"instrucciones":4,"EOF":5,"instruccion":6,"impresion":7,"declaracion":8,"R_PUNTOYCOMA":9,"asignacion":10,"if":11,"while":12,"break":13,"do_while":14,"for":15,"continue":16,"switch":17,"arreglo":18,"editar_arreglo":19,"metodo":20,"execute":21,"llamada":22,"R_COUT":23,"R_DOBLEMENOR":24,"expresion":25,"final_cout":26,"R_ENDL":27,"tipos":28,"declaraciones_varias":29,"asignar_declaracion":30,"R_IGUAL":31,"R_COMA":32,"ID":33,"incre_decre":34,"R_INT":35,"R_DOUBLE":36,"R_STD":37,"R_DOSPUNTOS":38,"R_STRING":39,"R_BOOL":40,"R_CHAR":41,"R_VOID":42,"R_MAS":43,"R_MENOS":44,"R_POR":45,"R_DIV":46,"R_MOD":47,"R_PARIZQ":48,"R_PARDER":49,"R_POW":50,"R_IGUALIGUAL":51,"R_DISTINTO":52,"R_MAYOR":53,"R_MENOR":54,"R_MAYORIGUAL":55,"R_MENORIGUAL":56,"R_NOT":57,"R_AND":58,"R_OR":59,"ENTERO":60,"DECIMAL":61,"CADENA":62,"CARACTER":63,"R_TRUE":64,"R_FALSE":65,"f_nativas":66,"R_LENGTH":67,"casteo":68,"R_TERNARIO":69,"buscar_arreglo":70,"R_TOLOWER":71,"R_TOUPPER":72,"R_ROUND":73,"R_TYPEOF":74,"R_TOSTRING":75,"R_IF":76,"R_LLAVEIZQ":77,"R_LLAVEDER":78,"else_opcional":79,"R_ELSE":80,"R_SWITCH":81,"lista_casos":82,"default":83,"caso":84,"R_DEFAULT":85,"R_CASE":86,"R_WHILE":87,"R_DO":88,"R_FOR":89,"eleccion_for":90,"R_BREAK":91,"R_CONTINUE":92,"signo_incre_decre":93,"R_INC":94,"R_DEC":95,"R_CORCHETEIZQ":96,"R_CORCHETEDER":97,"R_NEW":98,"asignacion_valores_arreglo":99,"p_cstr":100,"R_C_STR":101,"parametros":102,"R_EXECUTE":103,"parametros_llamada":104,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",9:"R_PUNTOYCOMA",23:"R_COUT",24:"R_DOBLEMENOR",27:"R_ENDL",31:"R_IGUAL",32:"R_COMA",33:"ID",35:"R_INT",36:"R_DOUBLE",37:"R_STD",38:"R_DOSPUNTOS",39:"R_STRING",40:"R_BOOL",41:"R_CHAR",42:"R_VOID",43:"R_MAS",44:"R_MENOS",45:"R_POR",46:"R_DIV",47:"R_MOD",48:"R_PARIZQ",49:"R_PARDER",50:"R_POW",51:"R_IGUALIGUAL",52:"R_DISTINTO",53:"R_MAYOR",54:"R_MENOR",55:"R_MAYORIGUAL",56:"R_MENORIGUAL",57:"R_NOT",58:"R_AND",59:"R_OR",60:"ENTERO",61:"DECIMAL",62:"CADENA",63:"CARACTER",64:"R_TRUE",65:"R_FALSE",67:"R_LENGTH",69:"R_TERNARIO",71:"R_TOLOWER",72:"R_TOUPPER",73:"R_ROUND",74:"R_TYPEOF",75:"R_TOSTRING",76:"R_IF",77:"R_LLAVEIZQ",78:"R_LLAVEDER",80:"R_ELSE",81:"R_SWITCH",85:"R_DEFAULT",86:"R_CASE",87:"R_WHILE",88:"R_DO",89:"R_FOR",91:"R_BREAK",92:"R_CONTINUE",94:"R_INC",95:"R_DEC",96:"R_CORCHETEIZQ",97:"R_CORCHETEDER",98:"R_NEW",101:"R_C_STR",103:"R_EXECUTE"},
productions_: [0,[3,2],[4,2],[4,1],[6,1],[6,2],[6,2],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[7,4],[26,3],[26,1],[8,3],[30,2],[30,0],[29,3],[29,1],[10,3],[10,1],[28,1],[28,1],[28,4],[28,1],[28,1],[28,1],[25,3],[25,3],[25,3],[25,3],[25,3],[25,3],[25,6],[25,3],[25,3],[25,3],[25,3],[25,3],[25,3],[25,2],[25,3],[25,3],[25,2],[25,1],[25,1],[25,1],[25,1],[25,1],[25,1],[25,1],[25,1],[25,2],[25,1],[25,5],[25,1],[66,4],[66,4],[66,4],[66,4],[66,7],[11,8],[79,4],[79,2],[79,0],[17,7],[17,8],[17,7],[82,2],[82,1],[83,3],[84,4],[12,7],[14,9],[15,11],[90,1],[90,1],[13,2],[16,2],[34,2],[93,1],[93,1],[68,4],[18,11],[18,9],[18,6],[100,5],[99,3],[99,1],[70,4],[19,7],[20,8],[20,7],[102,4],[102,2],[21,6],[21,5],[104,3],[104,1],[22,5],[22,4]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
return $$[$0-1];
break;
case 2:
$$[$0-1].push($$[$0]); this.$=$$[$0-1];
break;
case 3: case 77:
this.$=[$$[$0]];
break;
case 4: case 7: case 8: case 9: case 10: case 11:
this.$=$$[$0];
break;
case 5: case 6:
this.$=$$[$0-1];
break;
case 12: case 13: case 14: case 15: case 16: case 17: case 18: case 23: case 28: case 59: case 61: case 63: case 71: case 83: case 84:
this.$ = $$[$0];
break;
case 19:

      if($$[$0] == true){
            this.$= new Print.default($$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column);
            }else{
                  this.$= new PrintSeguido.default($$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column);
                  } 
      
break;
case 20:
this.$= true;
break;
case 21:
this.$= false;
break;
case 22:

      if($$[$0] == true){
            this.$ = new DeclaracionVacia.default($$[$0-2], _$[$0-2].first_line, _$[$0-2].first_column, $$[$0-1]);
      }else{
            this.$ = new Declaracion.default($$[$0-2], _$[$0-2].first_line, _$[$0-2].first_column, $$[$0-1], $$[$0]);}

      
break;
case 24: case 88:
this.$ = true;
break;
case 25:
 this.$.push($$[$0]); this.$=$$[$0-2];
break;
case 26: case 96: case 106:
this.$ = [$$[$0]];
break;
case 27:
this.$ = new AsignacionVar.default($$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 29:
this.$ = new Tipo.default(Tipo.tipoDato.ENTERO);
break;
case 30:
this.$ = new Tipo.default(Tipo.tipoDato.DECIMAL);
break;
case 31:
this.$ = new Tipo.default(Tipo.tipoDato.CADENA);
break;
case 32:
this.$ = new Tipo.default(Tipo.tipoDato.BOOL);
break;
case 33:
this.$ = new Tipo.default(Tipo.tipoDato.CARACTER);
break;
case 34:
this.$ = new Tipo.default(Tipo.tipoDato.VOID);
break;
case 35:
this.$ = new Aritmeticas.default(Aritmeticas.Operadores.SUMA, _$[$0-2].first_line, _$[$0-2].first_column, $$[$0-2], $$[$0]);
break;
case 36:
this.$ = new Aritmeticas.default(Aritmeticas.Operadores.RESTA, _$[$0-2].first_line, _$[$0-2].first_column, $$[$0-2], $$[$0]);
break;
case 37:
this.$ = new Aritmeticas.default(Aritmeticas.Operadores.MULTIPLICACION, _$[$0-2].first_line, _$[$0-2].first_column, $$[$0-2], $$[$0]);
break;
case 38:
this.$ = new Aritmeticas.default(Aritmeticas.Operadores.DIVISION, _$[$0-2].first_line, _$[$0-2].first_column, $$[$0-2], $$[$0]);
break;
case 39:
this.$ = new Aritmeticas.default(Aritmeticas.Operadores.MODULO, _$[$0-2].first_line, _$[$0-2].first_column, $$[$0-2], $$[$0]);
break;
case 40: case 70:
this.$ = $$[$0-1];
break;
case 41:
this.$ = new Aritmeticas.default(Aritmeticas.Operadores.POTENCIA, _$[$0-5].first_line, _$[$0-5].first_column, $$[$0-3], $$[$0-1]);
break;
case 42:
this.$ = new Relacionales.default(Relacionales.Operadores.IGUAL, _$[$0-2].first_line, _$[$0-2].first_column, $$[$0-2], $$[$0]);
break;
case 43:
this.$ =  new Relacionales.default(Relacionales.Operadores.DIFERENTE, _$[$0-2].first_line, _$[$0-2].first_column, $$[$0-2], $$[$0]);
break;
case 44:
this.$ = new Relacionales.default(Relacionales.Operadores.MAYOR, _$[$0-2].first_line, _$[$0-2].first_column, $$[$0-2], $$[$0]);
break;
case 45:
this.$ = new Relacionales.default(Relacionales.Operadores.MENOR, _$[$0-2].first_line, _$[$0-2].first_column, $$[$0-2], $$[$0]);
break;
case 46:
this.$ = new Relacionales.default(Relacionales.Operadores.MAYORIGUAL, _$[$0-2].first_line, _$[$0-2].first_column, $$[$0-2], $$[$0]);
break;
case 47:
this.$ = new Relacionales.default(Relacionales.Operadores.MENORIGUAL, _$[$0-2].first_line, _$[$0-2].first_column, $$[$0-2], $$[$0]);
break;
case 48:
this.$ = new Logicos.default(Logicos.Operadores.NOT, _$[$0-1].first_line, _$[$0-1].first_column, $$[$0]);
break;
case 49:
this.$ = new Logicos.default(Logicos.Operadores.AND, _$[$0-2].first_line, _$[$0-2].first_column, $$[$0-2], $$[$0]);
break;
case 50:
this.$ = new Logicos.default(Logicos.Operadores.OR, _$[$0-2].first_line, _$[$0-2].first_column, $$[$0-2], $$[$0]);
break;
case 51:
this.$ = new Aritmeticas.default(Aritmeticas.Operadores.NEG, _$[$0-1].first_line, _$[$0-1].first_column, $$[$0]);
break;
case 52:
this.$ = new Nativo.default(new Tipo.default(Tipo.tipoDato.ENTERO), $$[$0], _$[$0].first_line, _$[$0].first_column );
break;
case 53:
this.$ = new Nativo.default(new Tipo.default(Tipo.tipoDato.DECIMAL), $$[$0], _$[$0].first_line, _$[$0].first_column );
break;
case 54:
this.$ = new Nativo.default(new Tipo.default(Tipo.tipoDato.CADENA), $$[$0], _$[$0].first_line, _$[$0].first_column );
break;
case 55:
this.$ = new AccesoVar.default($$[$0], _$[$0].first_line, _$[$0].first_column);
break;
case 56:
this.$ = new Nativo.default(new Tipo.default(Tipo.tipoDato.CARACTER), $$[$0], _$[$0].first_line, _$[$0].first_column );
break;
case 57:
this.$ = new Nativo.default(new Tipo.default(Tipo.tipoDato.BOOL), true, _$[$0].first_line, _$[$0].first_column );
break;
case 58:
this.$ = new Nativo.default(new Tipo.default(Tipo.tipoDato.BOOL), false, _$[$0].first_line, _$[$0].first_column );
break;
case 60:
this.$ = new FNativas.default(FNativas.Operadores.LENGTH, _$[$0-1].first_line, _$[$0-1].first_column, $$[$0-1]);
break;
case 62:
this.$ = new OpTernario.default($$[$0-4], $$[$0-2], $$[$0], _$[$0-4].first_line, _$[$0-4].first_column);
break;
case 64:
this.$ = new FNativas.default(FNativas.Operadores.TOLOWER, _$[$0-3].first_line, _$[$0-3].first_column, $$[$0-1]);
break;
case 65:
this.$ = new FNativas.default(FNativas.Operadores.TOUPPER, _$[$0-3].first_line, _$[$0-3].first_column, $$[$0-1]);
break;
case 66:
this.$ = new FNativas.default(FNativas.Operadores.ROUND, _$[$0-3].first_line, _$[$0-3].first_column, $$[$0-1]);
break;
case 67:
this.$ = new FNativas.default(FNativas.Operadores.TYPEOF, _$[$0-3].first_line, _$[$0-3].first_column, $$[$0-1]);
break;
case 68:
this.$ = new FNativas.default(FNativas.Operadores.TOSTRING, _$[$0-6].first_line, _$[$0-6].first_column, $$[$0-1]);
break;
case 69:
this.$ = new If.default($$[$0-5], $$[$0-2], $$[$0], _$[$0-7].first_line, _$[$0-7].first_column);
break;
case 72:
this.$ = [];
break;
case 73:
this.$ = new Switch.default($$[$0-4], $$[$0-1], undefined,_$[$0-6].first_line, _$[$0-6].first_column);
break;
case 74:
this.$ = new Switch.default($$[$0-5], $$[$0-2], $$[$0-1], _$[$0-7].first_line, _$[$0-7].first_column);
break;
case 75:
this.$ = new Switch.default($$[$0-4], undefined,$$[$0-1], _$[$0-6].first_line, _$[$0-6].first_column);
break;
case 76:
this.$.push($$[$0]); this.$=$$[$0-1];
break;
case 78:
this.$ = new Default.default($$[$0], _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 79:
 this.$ = new Case.default($$[$0-2], $$[$0], _$[$0-3].first_line, _$[$0-3].first_column);
break;
case 80:
this.$ = new While.default($$[$0-4], $$[$0-1], _$[$0-6].first_line, _$[$0-6].first_column);
break;
case 81:
this.$ = new DoWhile.default($$[$0-2], $$[$0-6], _$[$0-8].first_line, _$[$0-8].first_column);
break;
case 82:
 this.$ = new For.default($$[$0-8],$$[$0-6],$$[$0-4],$$[$0-1],_$[$0-10].first_line,_$[$0-10].first_column);
break;
case 85:
this.$ = new Break.default(_$[$0-1].first_line, _$[$0-1].first_column);
break;
case 86:
this.$ = new Continue.default(_$[$0-1].first_line, _$[$0-1].first_column);
break;
case 87:
this.$ = new IncreDecre.default($$[$0-1], _$[$0-1].first_line, _$[$0-1].first_column,$$[$0]);
break;
case 89:
this.$ = false;
break;
case 90:
this.$ = new Casteo.default($$[$0-2], _$[$0-3].first_line, _$[$0-3].first_column, $$[$0]);
break;
case 91:
this.$ = new DeclArreglo.default(false,$$[$0-10], $$[$0-9], $$[$0-2], _$[$0-10].first_line, _$[$0-10].first_column,$$[$0-4]);
break;
case 92:
this.$ = new DeclArreglo.default(false,$$[$0-8], $$[$0-7], $$[$0-2], _$[$0-8].first_line, _$[$0-8].first_column);
break;
case 93:
this.$ = new DeclArreglo.default(true,$$[$0-5], $$[$0-4], $$[$0], _$[$0-5].first_line, _$[$0-5].first_column,true);
break;
case 94:
this.$ = new FNativas.default(FNativas.Operadores.C_STR, _$[$0-4].first_line, _$[$0-4].first_column, $$[$0-4]);
break;
case 95: case 105:
this.$.push($$[$0]); this.$=$$[$0-2];
break;
case 97:
this.$ = new AccesoArr.default($$[$0-3], $$[$0-1],_$[$0-3].first_line, _$[$0-3].first_column);
break;
case 98:
this.$ = new EditarArr.default($$[$0-4], $$[$0-6], $$[$0-1], _$[$0-6].first_line, _$[$0-6].first_column);
break;
case 99:
this.$ = new Metodo.default($$[$0-6], $$[$0-7], $$[$0-4], $$[$0-1], _$[$0-7].first_line, _$[$0-7].first_column);
break;
case 100:
this.$ = new Metodo.default($$[$0-5], $$[$0-6], [], $$[$0-1], _$[$0-6].first_line, _$[$0-6].first_column);
break;
case 101:
this.$.push({tipo:$$[$0-1], id:$$[$0]}); this.$=$$[$0-3];
break;
case 102:
this.$ = [{tipo:$$[$0-1], id:$$[$0]}];
break;
case 103:
this.$ = new Execute.default($$[$0-4], $$[$0-2], _$[$0-5].first_line, _$[$0-5].first_column);
break;
case 104:
this.$ = new Execute.default($$[$0-3], [], _$[$0-4].first_line, _$[$0-4].first_column);
break;
case 107:
this.$ = new Llamada.default($$[$0-4], $$[$0-2], _$[$0-4].first_line, _$[$0-4].first_column);
break;
case 108:
this.$ = new Llamada.default($$[$0-3], [], _$[$0-3].first_line, _$[$0-3].first_column);
break;
}
},
table: [{3:1,4:2,6:3,7:4,8:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:$V0,28:20,33:$V1,34:22,35:$V2,36:$V3,37:$V4,40:$V5,41:$V6,42:$V7,76:$V8,81:$V9,87:$Va,88:$Vb,89:$Vc,91:$Vd,92:$Ve,103:$Vf},{1:[3]},{5:[1,37],6:38,7:4,8:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:$V0,28:20,33:$V1,34:22,35:$V2,36:$V3,37:$V4,40:$V5,41:$V6,42:$V7,76:$V8,81:$V9,87:$Va,88:$Vb,89:$Vc,91:$Vd,92:$Ve,103:$Vf},o($Vg,[2,3]),o($Vg,[2,4]),{9:[1,39]},{9:[1,40]},o($Vg,[2,7]),o($Vg,[2,8]),o($Vg,[2,9]),o($Vg,[2,10]),o($Vg,[2,11]),o($Vg,[2,12]),o($Vg,[2,13]),o($Vg,[2,14]),o($Vg,[2,15]),o($Vg,[2,16]),o($Vg,[2,17]),o($Vg,[2,18]),{24:[1,41]},{29:42,33:[1,43]},{31:$Vh,48:[1,46],93:47,94:$Vi,95:$Vj,96:[1,45]},o($Vk,[2,28]),{48:[1,50]},{48:[1,51]},{9:[1,52]},{77:[1,53]},{48:[1,54]},{9:[1,55]},{48:[1,56]},{33:[1,57]},o($Vl,[2,29]),o($Vl,[2,30]),{38:[1,58]},o($Vl,[2,32]),o($Vl,[2,33]),o($Vl,[2,34]),{1:[2,1]},o($Vg,[2,2]),o($Vg,[2,5]),o($Vg,[2,6]),{25:59,33:$Vm,37:$Vn,44:$Vo,48:$Vp,50:$Vq,57:$Vr,60:$Vs,61:$Vt,62:$Vu,63:$Vv,64:$Vw,65:$Vx,66:71,68:72,70:73,71:$Vy,72:$Vz,73:$VA,74:$VB},{9:[2,24],30:79,31:[1,81],32:[1,80]},o($VC,$VD,{48:[1,83],96:[1,82]}),{25:84,33:$Vm,37:$Vn,44:$Vo,48:$Vp,50:$Vq,57:$Vr,60:$Vs,61:$Vt,62:$Vu,63:$Vv,64:$Vw,65:$Vx,66:71,68:72,70:73,71:$Vy,72:$Vz,73:$VA,74:$VB},{25:85,33:$Vm,37:$Vn,44:$Vo,48:$Vp,50:$Vq,57:$Vr,60:$Vs,61:$Vt,62:$Vu,63:$Vv,64:$Vw,65:$Vx,66:71,68:72,70:73,71:$Vy,72:$Vz,73:$VA,74:$VB},{25:88,33:$Vm,37:$Vn,44:$Vo,48:$Vp,49:[1,87],50:$Vq,57:$Vr,60:$Vs,61:$Vt,62:$Vu,63:$Vv,64:$Vw,65:$Vx,66:71,68:72,70:73,71:$Vy,72:$Vz,73:$VA,74:$VB,104:86},o($Vk,[2,87]),o($Vk,[2,88]),o($Vk,[2,89]),{25:89,33:$Vm,37:$Vn,44:$Vo,48:$Vp,50:$Vq,57:$Vr,60:$Vs,61:$Vt,62:$Vu,63:$Vv,64:$Vw,65:$Vx,66:71,68:72,70:73,71:$Vy,72:$Vz,73:$VA,74:$VB},{25:90,33:$Vm,37:$Vn,44:$Vo,48:$Vp,50:$Vq,57:$Vr,60:$Vs,61:$Vt,62:$Vu,63:$Vv,64:$Vw,65:$Vx,66:71,68:72,70:73,71:$Vy,72:$Vz,73:$VA,74:$VB},o($Vg,[2,85]),{4:91,6:3,7:4,8:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:$V0,28:20,33:$V1,34:22,35:$V2,36:$V3,37:$V4,40:$V5,41:$V6,42:$V7,76:$V8,81:$V9,87:$Va,88:$Vb,89:$Vc,91:$Vd,92:$Ve,103:$Vf},{8:93,10:94,28:95,33:$VE,34:22,35:$V2,36:$V3,37:$V4,40:$V5,41:$V6,42:$V7,90:92},o($Vg,[2,86]),{25:97,33:$Vm,37:$Vn,44:$Vo,48:$Vp,50:$Vq,57:$Vr,60:$Vs,61:$Vt,62:$Vu,63:$Vv,64:$Vw,65:$Vx,66:71,68:72,70:73,71:$Vy,72:$Vz,73:$VA,74:$VB},{48:[1,98]},{38:[1,99]},{9:[1,117],24:[1,116],26:100,43:$VF,44:$VG,45:$VH,46:$VI,47:$VJ,51:$VK,52:$VL,53:$VM,54:$VN,55:$VO,56:$VP,58:$VQ,59:$VR,67:$VS,69:$VT},{25:118,28:119,33:$Vm,35:$V2,36:$V3,37:[1,120],40:$V5,41:$V6,42:$V7,44:$Vo,48:$Vp,50:$Vq,57:$Vr,60:$Vs,61:$Vt,62:$Vu,63:$Vv,64:$Vw,65:$Vx,66:71,68:72,70:73,71:$Vy,72:$Vz,73:$VA,74:$VB},{48:[1,121]},{25:122,33:$Vm,37:$Vn,44:$Vo,48:$Vp,50:$Vq,57:$Vr,60:$Vs,61:$Vt,62:$Vu,63:$Vv,64:$Vw,65:$Vx,66:71,68:72,70:73,71:$Vy,72:$Vz,73:$VA,74:$VB},{25:123,33:$Vm,37:$Vn,44:$Vo,48:$Vp,50:$Vq,57:$Vr,60:$Vs,61:$Vt,62:$Vu,63:$Vv,64:$Vw,65:$Vx,66:71,68:72,70:73,71:$Vy,72:$Vz,73:$VA,74:$VB},o($VU,[2,52]),o($VU,[2,53]),o($VU,[2,54]),o($VU,[2,55],{96:[1,124]}),o($VU,[2,56]),o($VU,[2,57]),o($VU,[2,58]),o($VU,[2,59]),o($VU,[2,61]),o($VU,[2,63]),{48:[1,125]},{48:[1,126]},{48:[1,127]},{48:[1,128]},{38:[1,129]},{9:[2,22]},{33:[1,130]},{25:131,33:$Vm,37:$Vn,44:$Vo,48:$Vp,50:$Vq,57:$Vr,60:$Vs,61:$Vt,62:$Vu,63:$Vv,64:$Vw,65:$Vx,66:71,68:72,70:73,71:$Vy,72:$Vz,73:$VA,74:$VB},{97:[1,132]},{28:135,35:$V2,36:$V3,37:$V4,40:$V5,41:$V6,42:$V7,49:[1,134],102:133},o($Vk,[2,27],{43:$VF,44:$VG,45:$VH,46:$VI,47:$VJ,51:$VK,52:$VL,53:$VM,54:$VN,55:$VO,56:$VP,58:$VQ,59:$VR,67:$VS,69:$VT}),{43:$VF,44:$VG,45:$VH,46:$VI,47:$VJ,51:$VK,52:$VL,53:$VM,54:$VN,55:$VO,56:$VP,58:$VQ,59:$VR,67:$VS,69:$VT,97:[1,136]},{32:$VV,49:[1,137]},{9:[1,139]},o($VW,[2,106],{43:$VF,44:$VG,45:$VH,46:$VI,47:$VJ,51:$VK,52:$VL,53:$VM,54:$VN,55:$VO,56:$VP,58:$VQ,59:$VR,67:$VS,69:$VT}),{43:$VF,44:$VG,45:$VH,46:$VI,47:$VJ,49:[1,140],51:$VK,52:$VL,53:$VM,54:$VN,55:$VO,56:$VP,58:$VQ,59:$VR,67:$VS,69:$VT},{43:$VF,44:$VG,45:$VH,46:$VI,47:$VJ,49:[1,141],51:$VK,52:$VL,53:$VM,54:$VN,55:$VO,56:$VP,58:$VQ,59:$VR,67:$VS,69:$VT},{6:38,7:4,8:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:$V0,28:20,33:$V1,34:22,35:$V2,36:$V3,37:$V4,40:$V5,41:$V6,42:$V7,76:$V8,78:[1,142],81:$V9,87:$Va,88:$Vb,89:$Vc,91:$Vd,92:$Ve,103:$Vf},{9:[1,143]},{9:[2,83]},{9:[2,84]},{29:42,33:[1,144]},{31:$Vh,93:47,94:$Vi,95:$Vj},{43:$VF,44:$VG,45:$VH,46:$VI,47:$VJ,49:[1,145],51:$VK,52:$VL,53:$VM,54:$VN,55:$VO,56:$VP,58:$VQ,59:$VR,67:$VS,69:$VT},{25:88,33:$Vm,37:$Vn,44:$Vo,48:$Vp,49:[1,147],50:$Vq,57:$Vr,60:$Vs,61:$Vt,62:$Vu,63:$Vv,64:$Vw,65:$Vx,66:71,68:72,70:73,71:$Vy,72:$Vz,73:$VA,74:$VB,104:146},{39:$VX},o($Vg,[2,19]),{25:149,33:$Vm,37:$Vn,44:$Vo,48:$Vp,50:$Vq,57:$Vr,60:$Vs,61:$Vt,62:$Vu,63:$Vv,64:$Vw,65:$Vx,66:71,68:72,70:73,71:$Vy,72:$Vz,73:$VA,74:$VB},{25:150,33:$Vm,37:$Vn,44:$Vo,48:$Vp,50:$Vq,57:$Vr,60:$Vs,61:$Vt,62:$Vu,63:$Vv,64:$Vw,65:$Vx,66:71,68:72,70:73,71:$Vy,72:$Vz,73:$VA,74:$VB},{25:151,33:$Vm,37:$Vn,44:$Vo,48:$Vp,50:$Vq,57:$Vr,60:$Vs,61:$Vt,62:$Vu,63:$Vv,64:$Vw,65:$Vx,66:71,68:72,70:73,71:$Vy,72:$Vz,73:$VA,74:$VB},{25:152,33:$Vm,37:$Vn,44:$Vo,48:$Vp,50:$Vq,57:$Vr,60:$Vs,61:$Vt,62:$Vu,63:$Vv,64:$Vw,65:$Vx,66:71,68:72,70:73,71:$Vy,72:$Vz,73:$VA,74:$VB},{25:153,33:$Vm,37:$Vn,44:$Vo,48:$Vp,50:$Vq,57:$Vr,60:$Vs,61:$Vt,62:$Vu,63:$Vv,64:$Vw,65:$Vx,66:71,68:72,70:73,71:$Vy,72:$Vz,73:$VA,74:$VB},{25:154,33:$Vm,37:$Vn,44:$Vo,48:$Vp,50:$Vq,57:$Vr,60:$Vs,61:$Vt,62:$Vu,63:$Vv,64:$Vw,65:$Vx,66:71,68:72,70:73,71:$Vy,72:$Vz,73:$VA,74:$VB},{25:155,33:$Vm,37:$Vn,44:$Vo,48:$Vp,50:$Vq,57:$Vr,60:$Vs,61:$Vt,62:$Vu,63:$Vv,64:$Vw,65:$Vx,66:71,68:72,70:73,71:$Vy,72:$Vz,73:$VA,74:$VB},{25:156,33:$Vm,37:$Vn,44:$Vo,48:$Vp,50:$Vq,57:$Vr,60:$Vs,61:$Vt,62:$Vu,63:$Vv,64:$Vw,65:$Vx,66:71,68:72,70:73,71:$Vy,72:$Vz,73:$VA,74:$VB},{25:157,33:$Vm,37:$Vn,44:$Vo,48:$Vp,50:$Vq,57:$Vr,60:$Vs,61:$Vt,62:$Vu,63:$Vv,64:$Vw,65:$Vx,66:71,68:72,70:73,71:$Vy,72:$Vz,73:$VA,74:$VB},{25:158,33:$Vm,37:$Vn,44:$Vo,48:$Vp,50:$Vq,57:$Vr,60:$Vs,61:$Vt,62:$Vu,63:$Vv,64:$Vw,65:$Vx,66:71,68:72,70:73,71:$Vy,72:$Vz,73:$VA,74:$VB},{25:159,33:$Vm,37:$Vn,44:$Vo,48:$Vp,50:$Vq,57:$Vr,60:$Vs,61:$Vt,62:$Vu,63:$Vv,64:$Vw,65:$Vx,66:71,68:72,70:73,71:$Vy,72:$Vz,73:$VA,74:$VB},{25:160,33:$Vm,37:$Vn,44:$Vo,48:$Vp,50:$Vq,57:$Vr,60:$Vs,61:$Vt,62:$Vu,63:$Vv,64:$Vw,65:$Vx,66:71,68:72,70:73,71:$Vy,72:$Vz,73:$VA,74:$VB},{25:161,33:$Vm,37:$Vn,44:$Vo,48:$Vp,50:$Vq,57:$Vr,60:$Vs,61:$Vt,62:$Vu,63:$Vv,64:$Vw,65:$Vx,66:71,68:72,70:73,71:$Vy,72:$Vz,73:$VA,74:$VB},o($VU,[2,60]),{25:162,33:$Vm,37:$Vn,44:$Vo,48:$Vp,50:$Vq,57:$Vr,60:$Vs,61:$Vt,62:$Vu,63:$Vv,64:$Vw,65:$Vx,66:71,68:72,70:73,71:$Vy,72:$Vz,73:$VA,74:$VB},{27:[1,163]},o($Vg,[2,21]),{43:$VF,44:$VG,45:$VH,46:$VI,47:$VJ,49:[1,164],51:$VK,52:$VL,53:$VM,54:$VN,55:$VO,56:$VP,58:$VQ,59:$VR,67:$VS,69:$VT},{49:[1,165]},{38:[1,166]},{25:167,33:$Vm,37:$Vn,44:$Vo,48:$Vp,50:$Vq,57:$Vr,60:$Vs,61:$Vt,62:$Vu,63:$Vv,64:$Vw,65:$Vx,66:71,68:72,70:73,71:$Vy,72:$Vz,73:$VA,74:$VB},o($VY,[2,48],{43:$VF,44:$VG,45:$VH,46:$VI,47:$VJ,51:$VK,52:$VL,53:$VM,54:$VN,55:$VO,56:$VP,67:$VS}),o($VZ,[2,51],{67:$VS}),{25:168,33:$Vm,37:$Vn,44:$Vo,48:$Vp,50:$Vq,57:$Vr,60:$Vs,61:$Vt,62:$Vu,63:$Vv,64:$Vw,65:$Vx,66:71,68:72,70:73,71:$Vy,72:$Vz,73:$VA,74:$VB},{25:169,33:$Vm,37:$Vn,44:$Vo,48:$Vp,50:$Vq,57:$Vr,60:$Vs,61:$Vt,62:$Vu,63:$Vv,64:$Vw,65:$Vx,66:71,68:72,70:73,71:$Vy,72:$Vz,73:$VA,74:$VB},{25:170,33:$Vm,37:$Vn,44:$Vo,48:$Vp,50:$Vq,57:$Vr,60:$Vs,61:$Vt,62:$Vu,63:$Vv,64:$Vw,65:$Vx,66:71,68:72,70:73,71:$Vy,72:$Vz,73:$VA,74:$VB},{25:171,33:$Vm,37:$Vn,44:$Vo,48:$Vp,50:$Vq,57:$Vr,60:$Vs,61:$Vt,62:$Vu,63:$Vv,64:$Vw,65:$Vx,66:71,68:72,70:73,71:$Vy,72:$Vz,73:$VA,74:$VB},{25:172,33:$Vm,37:$Vn,44:$Vo,48:$Vp,50:$Vq,57:$Vr,60:$Vs,61:$Vt,62:$Vu,63:$Vv,64:$Vw,65:$Vx,66:71,68:72,70:73,71:$Vy,72:$Vz,73:$VA,74:$VB},{38:[1,173]},o($VC,[2,25]),{9:[2,23],43:$VF,44:$VG,45:$VH,46:$VI,47:$VJ,51:$VK,52:$VL,53:$VM,54:$VN,55:$VO,56:$VP,58:$VQ,59:$VR,67:$VS,69:$VT},{31:[1,174]},{32:[1,176],49:[1,175]},{77:[1,177]},{33:[1,178]},{31:[1,179]},{9:[1,180]},{25:181,33:$Vm,37:$Vn,44:$Vo,48:$Vp,50:$Vq,57:$Vr,60:$Vs,61:$Vt,62:$Vu,63:$Vv,64:$Vw,65:$Vx,66:71,68:72,70:73,71:$Vy,72:$Vz,73:$VA,74:$VB},o($Vg,[2,108]),{77:[1,182]},{77:[1,183]},{87:[1,184]},{25:185,33:$Vm,37:$Vn,44:$Vo,48:$Vp,50:$Vq,57:$Vr,60:$Vs,61:$Vt,62:$Vu,63:$Vv,64:$Vw,65:$Vx,66:71,68:72,70:73,71:$Vy,72:$Vz,73:$VA,74:$VB},o($VC,$VD),{77:[1,186]},{32:$VV,49:[1,187]},{9:[1,188]},o($Vl,[2,31]),o($V_,[2,35],{45:$VH,46:$VI,47:$VJ,67:$VS}),o($V_,[2,36],{45:$VH,46:$VI,47:$VJ,67:$VS}),o($VZ,[2,37],{67:$VS}),o($VZ,[2,38],{67:$VS}),o($VZ,[2,39],{67:$VS}),o($V$,[2,42],{43:$VF,44:$VG,45:$VH,46:$VI,47:$VJ,67:$VS}),o($V$,[2,43],{43:$VF,44:$VG,45:$VH,46:$VI,47:$VJ,67:$VS}),o($V$,[2,44],{43:$VF,44:$VG,45:$VH,46:$VI,47:$VJ,67:$VS}),o($V$,[2,45],{43:$VF,44:$VG,45:$VH,46:$VI,47:$VJ,67:$VS}),o($V$,[2,46],{43:$VF,44:$VG,45:$VH,46:$VI,47:$VJ,67:$VS}),o($V$,[2,47],{43:$VF,44:$VG,45:$VH,46:$VI,47:$VJ,67:$VS}),o($VY,[2,49],{43:$VF,44:$VG,45:$VH,46:$VI,47:$VJ,51:$VK,52:$VL,53:$VM,54:$VN,55:$VO,56:$VP,67:$VS}),o([9,24,32,38,49,59,69,97,101],[2,50],{43:$VF,44:$VG,45:$VH,46:$VI,47:$VJ,51:$VK,52:$VL,53:$VM,54:$VN,55:$VO,56:$VP,58:$VQ,67:$VS}),{38:[1,189],43:$VF,44:$VG,45:$VH,46:$VI,47:$VJ,51:$VK,52:$VL,53:$VM,54:$VN,55:$VO,56:$VP,58:$VQ,59:$VR,67:$VS,69:$VT},{9:[1,190]},o($VU,[2,40]),{25:191,33:$Vm,37:$Vn,44:$Vo,48:$Vp,50:$Vq,57:$Vr,60:$Vs,61:$Vt,62:$Vu,63:$Vv,64:$Vw,65:$Vx,66:71,68:72,70:73,71:$Vy,72:$Vz,73:$VA,74:$VB},{38:[1,192]},{32:[1,193],43:$VF,44:$VG,45:$VH,46:$VI,47:$VJ,51:$VK,52:$VL,53:$VM,54:$VN,55:$VO,56:$VP,58:$VQ,59:$VR,67:$VS,69:$VT},{43:$VF,44:$VG,45:$VH,46:$VI,47:$VJ,51:$VK,52:$VL,53:$VM,54:$VN,55:$VO,56:$VP,58:$VQ,59:$VR,67:$VS,69:$VT,97:[1,194]},{43:$VF,44:$VG,45:$VH,46:$VI,47:$VJ,49:[1,195],51:$VK,52:$VL,53:$VM,54:$VN,55:$VO,56:$VP,58:$VQ,59:$VR,67:$VS,69:$VT},{43:$VF,44:$VG,45:$VH,46:$VI,47:$VJ,49:[1,196],51:$VK,52:$VL,53:$VM,54:$VN,55:$VO,56:$VP,58:$VQ,59:$VR,67:$VS,69:$VT},{43:$VF,44:$VG,45:$VH,46:$VI,47:$VJ,49:[1,197],51:$VK,52:$VL,53:$VM,54:$VN,55:$VO,56:$VP,58:$VQ,59:$VR,67:$VS,69:$VT},{43:$VF,44:$VG,45:$VH,46:$VI,47:$VJ,49:[1,198],51:$VK,52:$VL,53:$VM,54:$VN,55:$VO,56:$VP,58:$VQ,59:$VR,67:$VS,69:$VT},{75:$V01},{25:203,33:$Vm,37:$Vn,44:$Vo,48:$Vp,50:$Vq,57:$Vr,60:$Vs,61:$Vt,62:$Vu,63:$Vv,64:$Vw,65:$Vx,66:71,68:72,70:73,71:$Vy,72:$Vz,73:$VA,74:$VB,96:[1,201],98:[1,200],100:202},{77:[1,204]},{28:205,35:$V2,36:$V3,37:$V4,40:$V5,41:$V6,42:$V7},{4:206,6:3,7:4,8:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:$V0,28:20,33:$V1,34:22,35:$V2,36:$V3,37:$V4,40:$V5,41:$V6,42:$V7,76:$V8,81:$V9,87:$Va,88:$Vb,89:$Vc,91:$Vd,92:$Ve,103:$Vf},o($VW,[2,102]),{25:207,33:$Vm,37:$Vn,44:$Vo,48:$Vp,50:$Vq,57:$Vr,60:$Vs,61:$Vt,62:$Vu,63:$Vv,64:$Vw,65:$Vx,66:71,68:72,70:73,71:$Vy,72:$Vz,73:$VA,74:$VB},o($Vg,[2,107]),o($VW,[2,105],{43:$VF,44:$VG,45:$VH,46:$VI,47:$VJ,51:$VK,52:$VL,53:$VM,54:$VN,55:$VO,56:$VP,58:$VQ,59:$VR,67:$VS,69:$VT}),{4:208,6:3,7:4,8:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:$V0,28:20,33:$V1,34:22,35:$V2,36:$V3,37:$V4,40:$V5,41:$V6,42:$V7,76:$V8,81:$V9,87:$Va,88:$Vb,89:$Vc,91:$Vd,92:$Ve,103:$Vf},{4:209,6:3,7:4,8:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:$V0,28:20,33:$V1,34:22,35:$V2,36:$V3,37:$V4,40:$V5,41:$V6,42:$V7,76:$V8,81:$V9,87:$Va,88:$Vb,89:$Vc,91:$Vd,92:$Ve,103:$Vf},{48:[1,210]},{9:[1,211],43:$VF,44:$VG,45:$VH,46:$VI,47:$VJ,51:$VK,52:$VL,53:$VM,54:$VN,55:$VO,56:$VP,58:$VQ,59:$VR,67:$VS,69:$VT},{82:212,83:213,84:214,85:$V11,86:$V21},{9:[1,217]},o($Vg,[2,104]),{25:218,33:$Vm,37:$Vn,44:$Vo,48:$Vp,50:$Vq,57:$Vr,60:$Vs,61:$Vt,62:$Vu,63:$Vv,64:$Vw,65:$Vx,66:71,68:72,70:73,71:$Vy,72:$Vz,73:$VA,74:$VB},o($Vg,[2,20]),o($VZ,[2,90],{67:$VS}),{39:$VX,75:$V01},{25:219,33:$Vm,37:$Vn,44:$Vo,48:$Vp,50:$Vq,57:$Vr,60:$Vs,61:$Vt,62:$Vu,63:$Vv,64:$Vw,65:$Vx,66:71,68:72,70:73,71:$Vy,72:$Vz,73:$VA,74:$VB},o($VU,[2,97]),o($VU,[2,64]),o($VU,[2,65]),o($VU,[2,66]),o($VU,[2,67]),{48:[1,220]},{28:221,35:$V2,36:$V3,37:$V4,40:$V5,41:$V6,42:$V7},{25:223,33:$Vm,37:$Vn,44:$Vo,48:$Vp,50:$Vq,57:$Vr,60:$Vs,61:$Vt,62:$Vu,63:$Vv,64:$Vw,65:$Vx,66:71,68:72,70:73,71:$Vy,72:$Vz,73:$VA,74:$VB,99:222},o($Vg,[2,93]),{43:$VF,44:$VG,45:$VH,46:$VI,47:$VJ,51:$VK,52:$VL,53:$VM,54:$VN,55:$VO,56:$VP,58:$VQ,59:$VR,67:$VS,69:$VT,101:[1,224]},{4:225,6:3,7:4,8:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:$V0,28:20,33:$V1,34:22,35:$V2,36:$V3,37:$V4,40:$V5,41:$V6,42:$V7,76:$V8,81:$V9,87:$Va,88:$Vb,89:$Vc,91:$Vd,92:$Ve,103:$Vf},{33:[1,226]},{6:38,7:4,8:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:$V0,28:20,33:$V1,34:22,35:$V2,36:$V3,37:$V4,40:$V5,41:$V6,42:$V7,76:$V8,78:[1,227],81:$V9,87:$Va,88:$Vb,89:$Vc,91:$Vd,92:$Ve,103:$Vf},{9:[1,228],43:$VF,44:$VG,45:$VH,46:$VI,47:$VJ,51:$VK,52:$VL,53:$VM,54:$VN,55:$VO,56:$VP,58:$VQ,59:$VR,67:$VS,69:$VT},{6:38,7:4,8:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:$V0,28:20,33:$V1,34:22,35:$V2,36:$V3,37:$V4,40:$V5,41:$V6,42:$V7,76:$V8,78:[1,229],81:$V9,87:$Va,88:$Vb,89:$Vc,91:$Vd,92:$Ve,103:$Vf},{6:38,7:4,8:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:$V0,28:20,33:$V1,34:22,35:$V2,36:$V3,37:$V4,40:$V5,41:$V6,42:$V7,76:$V8,78:[1,230],81:$V9,87:$Va,88:$Vb,89:$Vc,91:$Vd,92:$Ve,103:$Vf},{25:231,33:$Vm,37:$Vn,44:$Vo,48:$Vp,50:$Vq,57:$Vr,60:$Vs,61:$Vt,62:$Vu,63:$Vv,64:$Vw,65:$Vx,66:71,68:72,70:73,71:$Vy,72:$Vz,73:$VA,74:$VB},{10:232,33:$VE,34:22},{78:[1,233],83:234,84:235,85:$V11,86:$V21},{78:[1,236]},o($V31,[2,77]),{38:[1,237]},{25:238,33:$Vm,37:$Vn,44:$Vo,48:$Vp,50:$Vq,57:$Vr,60:$Vs,61:$Vt,62:$Vu,63:$Vv,64:$Vw,65:$Vx,66:71,68:72,70:73,71:$Vy,72:$Vz,73:$VA,74:$VB},o($Vg,[2,103]),o([9,24,32,38,49,69,97,101],[2,62],{43:$VF,44:$VG,45:$VH,46:$VI,47:$VJ,51:$VK,52:$VL,53:$VM,54:$VN,55:$VO,56:$VP,58:$VQ,59:$VR,67:$VS}),{43:$VF,44:$VG,45:$VH,46:$VI,47:$VJ,49:[1,239],51:$VK,52:$VL,53:$VM,54:$VN,55:$VO,56:$VP,58:$VQ,59:$VR,67:$VS,69:$VT},{25:240,33:$Vm,37:$Vn,44:$Vo,48:$Vp,50:$Vq,57:$Vr,60:$Vs,61:$Vt,62:$Vu,63:$Vv,64:$Vw,65:$Vx,66:71,68:72,70:73,71:$Vy,72:$Vz,73:$VA,74:$VB},{96:[1,241]},{32:[1,243],97:[1,242]},o($V41,[2,96],{43:$VF,44:$VG,45:$VH,46:$VI,47:$VJ,51:$VK,52:$VL,53:$VM,54:$VN,55:$VO,56:$VP,58:$VQ,59:$VR,67:$VS,69:$VT}),{48:[1,244]},{6:38,7:4,8:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:$V0,28:20,33:$V1,34:22,35:$V2,36:$V3,37:$V4,40:$V5,41:$V6,42:$V7,76:$V8,78:[1,245],81:$V9,87:$Va,88:$Vb,89:$Vc,91:$Vd,92:$Ve,103:$Vf},o($VW,[2,101]),o($Vg,[2,100]),o($Vg,[2,98]),o($Vg,[2,72],{79:246,80:[1,247]}),o($Vg,[2,80]),{43:$VF,44:$VG,45:$VH,46:$VI,47:$VJ,49:[1,248],51:$VK,52:$VL,53:$VM,54:$VN,55:$VO,56:$VP,58:$VQ,59:$VR,67:$VS,69:$VT},{49:[1,249]},o($Vg,[2,73]),{78:[1,250]},o($V31,[2,76]),o($Vg,[2,75]),{4:251,6:3,7:4,8:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:$V0,28:20,33:$V1,34:22,35:$V2,36:$V3,37:$V4,40:$V5,41:$V6,42:$V7,76:$V8,81:$V9,87:$Va,88:$Vb,89:$Vc,91:$Vd,92:$Ve,103:$Vf},{38:[1,252],43:$VF,44:$VG,45:$VH,46:$VI,47:$VJ,51:$VK,52:$VL,53:$VM,54:$VN,55:$VO,56:$VP,58:$VQ,59:$VR,67:$VS,69:$VT},o($VU,[2,41]),{43:$VF,44:$VG,45:$VH,46:$VI,47:$VJ,49:[1,253],51:$VK,52:$VL,53:$VM,54:$VN,55:$VO,56:$VP,58:$VQ,59:$VR,67:$VS,69:$VT},{25:254,33:$Vm,37:$Vn,44:$Vo,48:$Vp,50:$Vq,57:$Vr,60:$Vs,61:$Vt,62:$Vu,63:$Vv,64:$Vw,65:$Vx,66:71,68:72,70:73,71:$Vy,72:$Vz,73:$VA,74:$VB},{9:[1,255]},{25:256,33:$Vm,37:$Vn,44:$Vo,48:$Vp,50:$Vq,57:$Vr,60:$Vs,61:$Vt,62:$Vu,63:$Vv,64:$Vw,65:$Vx,66:71,68:72,70:73,71:$Vy,72:$Vz,73:$VA,74:$VB},{49:[1,257]},o($Vg,[2,99]),o($Vg,[2,69]),{11:259,76:$V8,77:[1,258]},{9:[1,260]},{77:[1,261]},o($Vg,[2,74]),{6:38,7:4,8:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:$V0,28:20,33:$V1,34:22,35:$V2,36:$V3,37:$V4,40:$V5,41:$V6,42:$V7,76:$V8,78:[2,78],81:$V9,87:$Va,88:$Vb,89:$Vc,91:$Vd,92:$Ve,103:$Vf},{4:262,6:3,7:4,8:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:$V0,28:20,33:$V1,34:22,35:$V2,36:$V3,37:$V4,40:$V5,41:$V6,42:$V7,76:$V8,81:$V9,87:$Va,88:$Vb,89:$Vc,91:$Vd,92:$Ve,103:$Vf},o($VU,[2,68]),{43:$VF,44:$VG,45:$VH,46:$VI,47:$VJ,51:$VK,52:$VL,53:$VM,54:$VN,55:$VO,56:$VP,58:$VQ,59:$VR,67:$VS,69:$VT,97:[1,263]},o($Vg,[2,92]),o($V41,[2,95],{43:$VF,44:$VG,45:$VH,46:$VI,47:$VJ,51:$VK,52:$VL,53:$VM,54:$VN,55:$VO,56:$VP,58:$VQ,59:$VR,67:$VS,69:$VT}),{9:[1,264]},{4:265,6:3,7:4,8:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:$V0,28:20,33:$V1,34:22,35:$V2,36:$V3,37:$V4,40:$V5,41:$V6,42:$V7,76:$V8,81:$V9,87:$Va,88:$Vb,89:$Vc,91:$Vd,92:$Ve,103:$Vf},o($Vg,[2,71]),o($Vg,[2,81]),{4:266,6:3,7:4,8:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:$V0,28:20,33:$V1,34:22,35:$V2,36:$V3,37:$V4,40:$V5,41:$V6,42:$V7,76:$V8,81:$V9,87:$Va,88:$Vb,89:$Vc,91:$Vd,92:$Ve,103:$Vf},o($V31,[2,79],{7:4,8:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,28:20,34:22,6:38,23:$V0,33:$V1,35:$V2,36:$V3,37:$V4,40:$V5,41:$V6,42:$V7,76:$V8,81:$V9,87:$Va,88:$Vb,89:$Vc,91:$Vd,92:$Ve,103:$Vf}),{9:[1,267]},o($Vg,[2,94]),{6:38,7:4,8:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:$V0,28:20,33:$V1,34:22,35:$V2,36:$V3,37:$V4,40:$V5,41:$V6,42:$V7,76:$V8,78:[1,268],81:$V9,87:$Va,88:$Vb,89:$Vc,91:$Vd,92:$Ve,103:$Vf},{6:38,7:4,8:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:$V0,28:20,33:$V1,34:22,35:$V2,36:$V3,37:$V4,40:$V5,41:$V6,42:$V7,76:$V8,78:[1,269],81:$V9,87:$Va,88:$Vb,89:$Vc,91:$Vd,92:$Ve,103:$Vf},o($Vg,[2,91]),o($Vg,[2,70]),o($Vg,[2,82])],
defaultActions: {37:[2,1],79:[2,22],93:[2,83],94:[2,84]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};


const Tipo = require('../build/controllers/simbol/tipo')
const Nativo = require('../build/controllers/expr/Nativo')
const Aritmeticas = require('../build/controllers/expr/Aritmeticas')
const Relacionales = require('../build/controllers/expr/Relacionales')
const Logicos = require('../build/controllers/expr/Logicos')

const DeclaracionVacia = require('../build/controllers/instruc/declaracionVacia')
const Print = require('../build/controllers/instruc/print')
const PrintSeguido = require('../build/controllers/instruc/printSeguido')
const Declaracion = require('../build/controllers/instruc/declaracion')
const AccesoVar = require('../build/controllers/expr/accesoVar')
const AsignacionVar = require('../build/controllers/instruc/asignacionVar')
const If = require('../build/controllers/instruc/if')
const FNativas = require('../build/controllers/expr/fNativas')
const While = require('../build/controllers/instruc/while')
const Break = require('../build/controllers/instruc/Break')
const DoWhile = require('../build/controllers/instruc/doWhile')
const IncreDecre = require('../build/controllers/instruc/increDecre')
const Casteo = require('../build/controllers/expr/casteo')
const For = require('../build/controllers/instruc/for')
const Continue = require('../build/controllers/instruc/Continue')
const OpTernario = require('../build/controllers/instruc/opTernario')
const Switch = require('../build/controllers/instruc/switch')
const Case = require('../build/controllers/instruc/case')
const Default = require('../build/controllers/instruc/default')
const Errores = require('../build/controllers/excep/errores')
const DeclArreglo = require('../build/controllers/instruc/declArreglo')
const AccesoArr = require('../build/controllers/expr/accesoArr')
const EditarArr = require('../build/controllers/instruc/editarArr')
const Metodo = require('../build/controllers/instruc/metodo')
const Execute = require('../build/controllers/instruc/execute')
const Llamada = require('../build/controllers/instruc/llamada')

const arb = require('../build/controllers/simbol/arbol')
const indexRef = require('../build/controllers/indexController')

var cadena  = '';

/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:// Ignorar espacios en blanco
break;
case 1:
break;
case 2:
break;
case 3:return 35;
break;
case 4:return 36;
break;
case 5:return 41;
break;
case 6:return 39;
break;
case 7:return 40;
break;
case 8:return 76;
break;
case 9:return 80;
break;
case 10:return 81;
break;
case 11:return 86;
break;
case 12:return 85;
break;
case 13:return 91;
break;
case 14:return 89;
break;
case 15:return 87;
break;
case 16:return 88;
break;
case 17:return 92;
break;
case 18:return 'R_RETURN';
break;
case 19:return 42;
break;
case 20:return 94;
break;
case 21:return 95;
break;
case 22:return 23;
break;
case 23:return 24
break;
case 24:return 71;
break;
case 25:return 72;
break;
case 26:return 67;
break;
case 27:return 101;
break;
case 28:return 37;
break;
case 29:return 75;
break;
case 30:return 103;
break;
case 31:return 74;
break;
case 32:return 73;
break;
case 33:return 27;
break;
case 34:return 98;
break;
case 35:return 64;
break;
case 36:return 65;
break;
case 37:return 52;
break;
case 38:return 51;
break;
case 39:return 57;
break;
case 40:return 31;
break;
case 41:return 56;
break;
case 42:return 55;
break;
case 43:return 53;
break;
case 44:return 54;
break;
case 45:return 58;
break;
case 46:return 59;
break;
case 47:return 43;
break;
case 48:return 44;
break;
case 49:return 45;
break;
case 50:return 46;
break;
case 51:return 47;
break;
case 52:return 50;
break;
case 53:return 32;
break;
case 54:return 9;
break;
case 55:return 48;
break;
case 56:return 49;
break;
case 57:return 77;
break;
case 58:return 78;
break;
case 59:return 96;
break;
case 60:return 97;
break;
case 61:return 69;
break;
case 62:return 38;
break;
case 63:return 33;
break;
case 64:return 63;
break;
case 65:return 61;
break;
case 66:return 60;
break;
case 67: cadena = ''; this.begin("string"); 
break;
case 68: cadena += yy_.yytext; 
break;
case 69: cadena += "\""; 
break;
case 70: cadena += "\n"; 
break;
case 71: cadena += " ";  
break;
case 72: cadena += "\t"; 
break;
case 73: cadena += "\\"; 
break;
case 74: cadena += "\'"; 
break;
case 75: cadena += "\r"; 
break;
case 76: yy_.yytext = cadena; this.popState(); return 62; 
break;
case 77:return 5;
break;
case 78: let error = new Errores.default("Léxico",("Token no reconocido: "+yy_.yytext), yy_.yylloc.first_line, yy_.yylloc.first_column);    
                              indexRef.lista_errores.push(error);                             
                        
break;
}
},
rules: [/^(?:\s+)/i,/^(?:\/\/.*)/i,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/i,/^(?:int\b)/i,/^(?:double\b)/i,/^(?:char\b)/i,/^(?:string\b)/i,/^(?:bool\b)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:switch\b)/i,/^(?:case\b)/i,/^(?:default\b)/i,/^(?:break\b)/i,/^(?:for\b)/i,/^(?:while\b)/i,/^(?:do\b)/i,/^(?:continue\b)/i,/^(?:return\b)/i,/^(?:void\b)/i,/^(?:\+\+)/i,/^(?:--)/i,/^(?:cout\b)/i,/^(?:<<)/i,/^(?:tolower\b)/i,/^(?:toupper\b)/i,/^(?:\.length\(\))/i,/^(?:\.c_str\b)/i,/^(?:std\b)/i,/^(?:toString\b)/i,/^(?:execute\b)/i,/^(?:typeOf\b)/i,/^(?:round\b)/i,/^(?:endl\b)/i,/^(?:new\b)/i,/^(?:true\b)/i,/^(?:false\b)/i,/^(?:!=)/i,/^(?:==)/i,/^(?:!)/i,/^(?:=)/i,/^(?:<=)/i,/^(?:>=)/i,/^(?:>)/i,/^(?:<)/i,/^(?:&&)/i,/^(?:\|\|)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:%)/i,/^(?:pow\b)/i,/^(?:,)/i,/^(?:;)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\{)/i,/^(?:\})/i,/^(?:\[)/i,/^(?:\])/i,/^(?:\?)/i,/^(?::)/i,/^(?:([a-zA-Z])([a-zA-Z0-9_])*)/i,/^(?:[']\\\\[']|[']\\"[']|[']\\'[']|[']\\n[']|[']\\t[']|[']\\r[']|['].?['])/i,/^(?:[0-9]+\.[0-9]+)/i,/^(?:[0-9]+)/i,/^(?:["])/i,/^(?:[^"\\]+)/i,/^(?:\\")/i,/^(?:\\n)/i,/^(?:\s)/i,/^(?:\\t)/i,/^(?:\\\\)/i,/^(?:\\\\')/i,/^(?:\\r)/i,/^(?:["])/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"string":{"rules":[68,69,70,71,72,73,74,75,76],"inclusive":false},"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,77,78],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = gramatica;
exports.Parser = gramatica.Parser;
exports.parse = function () { return gramatica.parse.apply(gramatica, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}