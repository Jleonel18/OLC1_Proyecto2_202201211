/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var gramatica = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,14],$V1=[1,16],$V2=[1,25],$V3=[1,26],$V4=[1,27],$V5=[1,28],$V6=[1,29],$V7=[1,18],$V8=[1,24],$V9=[1,19],$Va=[1,21],$Vb=[1,22],$Vc=[1,20],$Vd=[1,23],$Ve=[5,18,28,30,31,32,35,36,70,72,75,79,80,81,82,83,85,86],$Vf=[9,43],$Vg=[28,43],$Vh=[1,57],$Vi=[1,67],$Vj=[1,53],$Vk=[1,50],$Vl=[1,51],$Vm=[1,52],$Vn=[1,54],$Vo=[1,55],$Vp=[1,56],$Vq=[1,58],$Vr=[1,59],$Vs=[1,60],$Vt=[1,63],$Vu=[1,64],$Vv=[1,65],$Vw=[1,66],$Vx=[1,68],$Vy=[9,26,27],$Vz=[1,82],$VA=[1,83],$VB=[1,84],$VC=[1,85],$VD=[1,86],$VE=[1,87],$VF=[1,88],$VG=[1,89],$VH=[1,90],$VI=[1,91],$VJ=[1,92],$VK=[1,93],$VL=[1,94],$VM=[1,95],$VN=[1,96],$VO=[9,19,27,33,37,38,39,40,41,43,45,46,47,48,49,50,52,53,61,63],$VP=[1,118],$VQ=[9,19,27,33,43,52,53,63],$VR=[9,19,27,33,37,38,39,40,41,43,45,46,47,48,49,50,52,53,63],$VS=[9,19,27,33,37,38,43,45,46,47,48,49,50,52,53,63],$VT=[9,19,27,33,43,45,46,47,48,49,50,52,53,63],$VU=[1,158],$VV=[1,167],$VW=[1,168],$VX=[72,79,80];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"inicio":3,"instrucciones":4,"EOF":5,"instruccion":6,"impresion":7,"declaracion":8,"R_PUNTOYCOMA":9,"asignacion":10,"if":11,"while":12,"break":13,"do_while":14,"for":15,"continue":16,"switch":17,"R_COUT":18,"R_DOBLEMENOR":19,"expresion":20,"final_cout":21,"R_ENDL":22,"tipos":23,"declaraciones_varias":24,"asignar_declaracion":25,"R_IGUAL":26,"R_COMA":27,"ID":28,"incre_decre":29,"R_INT":30,"R_DOUBLE":31,"R_STD":32,"R_DOSPUNTOS":33,"R_STRING":34,"R_BOOL":35,"R_CHAR":36,"R_MAS":37,"R_MENOS":38,"R_POR":39,"R_DIV":40,"R_MOD":41,"R_PARIZQ":42,"R_PARDER":43,"R_POW":44,"R_IGUALIGUAL":45,"R_DISTINTO":46,"R_MAYOR":47,"R_MENOR":48,"R_MAYORIGUAL":49,"R_MENORIGUAL":50,"R_NOT":51,"R_AND":52,"R_OR":53,"ENTERO":54,"DECIMAL":55,"CADENA":56,"CARACTER":57,"R_TRUE":58,"R_FALSE":59,"f_nativas":60,"R_LENGTH":61,"casteo":62,"R_TERNARIO":63,"R_TOLOWER":64,"R_TOUPPER":65,"R_ROUND":66,"R_TYPEOF":67,"R_TOSTRING":68,"R_C_STR":69,"R_IF":70,"R_LLAVEIZQ":71,"R_LLAVEDER":72,"else_opcional":73,"R_ELSE":74,"R_SWITCH":75,"lista_casos":76,"default":77,"caso":78,"R_DEFAULT":79,"R_CASE":80,"R_WHILE":81,"R_DO":82,"R_FOR":83,"eleccion_for":84,"R_BREAK":85,"R_CONTINUE":86,"signo_incre_decre":87,"R_INC":88,"R_DEC":89,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",9:"R_PUNTOYCOMA",18:"R_COUT",19:"R_DOBLEMENOR",22:"R_ENDL",26:"R_IGUAL",27:"R_COMA",28:"ID",30:"R_INT",31:"R_DOUBLE",32:"R_STD",33:"R_DOSPUNTOS",34:"R_STRING",35:"R_BOOL",36:"R_CHAR",37:"R_MAS",38:"R_MENOS",39:"R_POR",40:"R_DIV",41:"R_MOD",42:"R_PARIZQ",43:"R_PARDER",44:"R_POW",45:"R_IGUALIGUAL",46:"R_DISTINTO",47:"R_MAYOR",48:"R_MENOR",49:"R_MAYORIGUAL",50:"R_MENORIGUAL",51:"R_NOT",52:"R_AND",53:"R_OR",54:"ENTERO",55:"DECIMAL",56:"CADENA",57:"CARACTER",58:"R_TRUE",59:"R_FALSE",61:"R_LENGTH",63:"R_TERNARIO",64:"R_TOLOWER",65:"R_TOUPPER",66:"R_ROUND",67:"R_TYPEOF",68:"R_TOSTRING",69:"R_C_STR",70:"R_IF",71:"R_LLAVEIZQ",72:"R_LLAVEDER",74:"R_ELSE",75:"R_SWITCH",79:"R_DEFAULT",80:"R_CASE",81:"R_WHILE",82:"R_DO",83:"R_FOR",85:"R_BREAK",86:"R_CONTINUE",88:"R_INC",89:"R_DEC"},
productions_: [0,[3,2],[4,2],[4,1],[6,1],[6,2],[6,2],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[7,4],[21,3],[21,1],[8,3],[25,2],[25,0],[24,3],[24,1],[10,3],[10,1],[23,1],[23,1],[23,4],[23,1],[23,1],[20,3],[20,3],[20,3],[20,3],[20,3],[20,3],[20,6],[20,3],[20,3],[20,3],[20,3],[20,3],[20,3],[20,2],[20,3],[20,3],[20,2],[20,1],[20,1],[20,1],[20,1],[20,1],[20,1],[20,1],[20,1],[20,2],[20,1],[20,5],[60,4],[60,4],[60,4],[60,4],[60,7],[60,4],[11,8],[73,4],[73,2],[73,0],[17,7],[17,8],[17,7],[76,2],[76,1],[77,3],[78,4],[12,7],[14,9],[15,11],[84,1],[84,1],[13,2],[16,2],[29,2],[87,1],[87,1],[62,4]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
return $$[$0-1];
break;
case 2:
$$[$0-1].push($$[$0]); this.$=$$[$0-1];
break;
case 3: case 71:
this.$=[$$[$0]];
break;
case 4: case 7: case 8: case 9: case 10: case 11:
this.$=$$[$0];
break;
case 5: case 6:
this.$=$$[$0-1];
break;
case 12: case 13: case 18: case 23: case 53: case 55: case 65: case 77: case 78:
this.$ = $$[$0];
break;
case 14:
if($$[$0] == true){this.$= new Print.default($$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column);}else{this.$= new PrintSeguido.default($$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column);} 
break;
case 15:
this.$= true;
break;
case 16:
this.$= false;
break;
case 17:

      if($$[$0] == true){
            this.$ = new DeclaracionVacia.default($$[$0-2], _$[$0-2].first_line, _$[$0-2].first_column, $$[$0-1]);
      }else{
            this.$ = new Declaracion.default($$[$0-2], _$[$0-2].first_line, _$[$0-2].first_column, $$[$0-1], $$[$0]);}

      
break;
case 19: case 82:
this.$ = true;
break;
case 20:
 this.$.push($$[$0]); this.$=$$[$0-2];
break;
case 21:
this.$ = [$$[$0]];
break;
case 22:
this.$ = new AsignacionVar.default($$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 24:
this.$ = new Tipo.default(Tipo.tipoDato.ENTERO);
break;
case 25:
this.$ = new Tipo.default(Tipo.tipoDato.DECIMAL);
break;
case 26:
this.$ = new Tipo.default(Tipo.tipoDato.CADENA);
break;
case 27:
this.$ = new Tipo.default(Tipo.tipoDato.BOOL);
break;
case 28:
this.$ = new Tipo.default(Tipo.tipoDato.CARACTER);
break;
case 29:
this.$ = new Aritmeticas.default(Aritmeticas.Operadores.SUMA, _$[$0-2].first_line, _$[$0-2].first_column, $$[$0-2], $$[$0]);
break;
case 30:
this.$ = new Aritmeticas.default(Aritmeticas.Operadores.RESTA, _$[$0-2].first_line, _$[$0-2].first_column, $$[$0-2], $$[$0]);
break;
case 31:
this.$ = new Aritmeticas.default(Aritmeticas.Operadores.MULTIPLICACION, _$[$0-2].first_line, _$[$0-2].first_column, $$[$0-2], $$[$0]);
break;
case 32:
this.$ = new Aritmeticas.default(Aritmeticas.Operadores.DIVISION, _$[$0-2].first_line, _$[$0-2].first_column, $$[$0-2], $$[$0]);
break;
case 33:
this.$ = new Aritmeticas.default(Aritmeticas.Operadores.MODULO, _$[$0-2].first_line, _$[$0-2].first_column, $$[$0-2], $$[$0]);
break;
case 34: case 64:
this.$ = $$[$0-1];
break;
case 35:
this.$ = new Aritmeticas.default(Aritmeticas.Operadores.POTENCIA, _$[$0-5].first_line, _$[$0-5].first_column, $$[$0-3], $$[$0-1]);
break;
case 36:
this.$ = new Relacionales.default(Relacionales.Operadores.IGUAL, _$[$0-2].first_line, _$[$0-2].first_column, $$[$0-2], $$[$0]);
break;
case 37:
this.$ =  new Relacionales.default(Relacionales.Operadores.DIFERENTE, _$[$0-2].first_line, _$[$0-2].first_column, $$[$0-2], $$[$0]);
break;
case 38:
this.$ = new Relacionales.default(Relacionales.Operadores.MAYOR, _$[$0-2].first_line, _$[$0-2].first_column, $$[$0-2], $$[$0]);
break;
case 39:
this.$ = new Relacionales.default(Relacionales.Operadores.MENOR, _$[$0-2].first_line, _$[$0-2].first_column, $$[$0-2], $$[$0]);
break;
case 40:
this.$ = new Relacionales.default(Relacionales.Operadores.MAYORIGUAL, _$[$0-2].first_line, _$[$0-2].first_column, $$[$0-2], $$[$0]);
break;
case 41:
this.$ = new Relacionales.default(Relacionales.Operadores.MENORIGUAL, _$[$0-2].first_line, _$[$0-2].first_column, $$[$0-2], $$[$0]);
break;
case 42:
this.$ = new Logicos.default(Logicos.Operadores.NOT, _$[$0-1].first_line, _$[$0-1].first_column, $$[$0]);
break;
case 43:
this.$ = new Logicos.default(Logicos.Operadores.AND, _$[$0-2].first_line, _$[$0-2].first_column, $$[$0-2], $$[$0]);
break;
case 44:
this.$ = new Logicos.default(Logicos.Operadores.OR, _$[$0-2].first_line, _$[$0-2].first_column, $$[$0-2], $$[$0]);
break;
case 45:
this.$ = new Aritmeticas.default(Aritmeticas.Operadores.NEG, _$[$0-1].first_line, _$[$0-1].first_column, $$[$0]);
break;
case 46:
this.$ = new Nativo.default(new Tipo.default(Tipo.tipoDato.ENTERO), $$[$0], _$[$0].first_line, _$[$0].first_column );
break;
case 47:
this.$ = new Nativo.default(new Tipo.default(Tipo.tipoDato.DECIMAL), $$[$0], _$[$0].first_line, _$[$0].first_column );
break;
case 48:
this.$ = new Nativo.default(new Tipo.default(Tipo.tipoDato.CADENA), $$[$0], _$[$0].first_line, _$[$0].first_column );
break;
case 49:
this.$ = new AccesoVar.default($$[$0], _$[$0].first_line, _$[$0].first_column);
break;
case 50:
this.$ = new Nativo.default(new Tipo.default(Tipo.tipoDato.CARACTER), $$[$0], _$[$0].first_line, _$[$0].first_column );
break;
case 51:
this.$ = new Nativo.default(new Tipo.default(Tipo.tipoDato.BOOL), true, _$[$0].first_line, _$[$0].first_column );
break;
case 52:
this.$ = new Nativo.default(new Tipo.default(Tipo.tipoDato.BOOL), false, _$[$0].first_line, _$[$0].first_column );
break;
case 54:
this.$ = new FNativas.default(FNativas.Operadores.LENGTH, _$[$0-1].first_line, _$[$0-1].first_column, $$[$0-1]);
break;
case 56:
this.$ = new OpTernario.default($$[$0-4], $$[$0-2], $$[$0], _$[$0-4].first_line, _$[$0-4].first_column);
break;
case 57:
this.$ = new FNativas.default(FNativas.Operadores.TOLOWER, _$[$0-3].first_line, _$[$0-3].first_column, $$[$0-1]);
break;
case 58:
this.$ = new FNativas.default(FNativas.Operadores.TOUPPER, _$[$0-3].first_line, _$[$0-3].first_column, $$[$0-1]);
break;
case 59:
this.$ = new FNativas.default(FNativas.Operadores.ROUND, _$[$0-3].first_line, _$[$0-3].first_column, $$[$0-1]);
break;
case 60:
this.$ = new FNativas.default(FNativas.Operadores.TYPEOF, _$[$0-3].first_line, _$[$0-3].first_column, $$[$0-1]);
break;
case 61:
this.$ = new FNativas.default(FNativas.Operadores.TOSTRING, _$[$0-6].first_line, _$[$0-6].first_column, $$[$0-1]);
break;
case 63:
this.$ = new If.default($$[$0-5], $$[$0-2], $$[$0], _$[$0-7].first_line, _$[$0-7].first_column);
break;
case 66:
this.$ = [];
break;
case 67:
this.$ = new Switch.default($$[$0-4], $$[$0-1], undefined,_$[$0-6].first_line, _$[$0-6].first_column);
break;
case 68:
this.$ = new Switch.default($$[$0-5], $$[$0-2], $$[$0-1], _$[$0-7].first_line, _$[$0-7].first_column);
break;
case 69:
this.$ = new Switch.default($$[$0-4], undefined,$$[$0-1], _$[$0-6].first_line, _$[$0-6].first_column);
break;
case 70:
this.$.push($$[$0]); this.$=$$[$0-1];
break;
case 72:
this.$ = new Default.default($$[$0], _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 73:
 this.$ = new Case.default($$[$0-2], $$[$0], _$[$0-3].first_line, _$[$0-3].first_column);
break;
case 74:
this.$ = new While.default($$[$0-4], $$[$0-1], _$[$0-6].first_line, _$[$0-6].first_column);
break;
case 75:
this.$ = new DoWhile.default($$[$0-2], $$[$0-6], _$[$0-8].first_line, _$[$0-8].first_column);
break;
case 76:
 this.$ = new For.default($$[$0-8],$$[$0-6],$$[$0-4],$$[$0-1],_$[$0-10].first_line,_$[$0-10].first_column);
break;
case 79:
this.$ = new Break.default(_$[$0-1].first_line, _$[$0-1].first_column);
break;
case 80:
this.$ = new Continue.default(_$[$0-1].first_line, _$[$0-1].first_column);
break;
case 81:
this.$ = new IncreDecre.default($$[$0-1], _$[$0-1].first_line, _$[$0-1].first_column,$$[$0]);
break;
case 83:
this.$ = false;
break;
case 84:
this.$ = new Casteo.default($$[$0-2], _$[$0-3].first_line, _$[$0-3].first_column, $$[$0]);
break;
}
},
table: [{3:1,4:2,6:3,7:4,8:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:$V0,23:15,28:$V1,29:17,30:$V2,31:$V3,32:$V4,35:$V5,36:$V6,70:$V7,75:$V8,81:$V9,82:$Va,83:$Vb,85:$Vc,86:$Vd},{1:[3]},{5:[1,30],6:31,7:4,8:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:$V0,23:15,28:$V1,29:17,30:$V2,31:$V3,32:$V4,35:$V5,36:$V6,70:$V7,75:$V8,81:$V9,82:$Va,83:$Vb,85:$Vc,86:$Vd},o($Ve,[2,3]),o($Ve,[2,4]),{9:[1,32]},{9:[1,33]},o($Ve,[2,7]),o($Ve,[2,8]),o($Ve,[2,9]),o($Ve,[2,10]),o($Ve,[2,11]),o($Ve,[2,12]),o($Ve,[2,13]),{19:[1,34]},{24:35,28:[1,36]},{26:[1,37],87:38,88:[1,39],89:[1,40]},o($Vf,[2,23]),{42:[1,41]},{42:[1,42]},{9:[1,43]},{71:[1,44]},{42:[1,45]},{9:[1,46]},{42:[1,47]},o($Vg,[2,24]),o($Vg,[2,25]),{33:[1,48]},o($Vg,[2,27]),o($Vg,[2,28]),{1:[2,1]},o($Ve,[2,2]),o($Ve,[2,5]),o($Ve,[2,6]),{20:49,28:$Vh,32:$Vi,38:$Vj,42:$Vk,44:$Vl,51:$Vm,54:$Vn,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:$Vs,60:61,62:62,64:$Vt,65:$Vu,66:$Vv,67:$Vw,69:$Vx},{9:[2,19],25:69,26:[1,71],27:[1,70]},o($Vy,[2,21]),{20:72,28:$Vh,32:$Vi,38:$Vj,42:$Vk,44:$Vl,51:$Vm,54:$Vn,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:$Vs,60:61,62:62,64:$Vt,65:$Vu,66:$Vv,67:$Vw,69:$Vx},o($Vf,[2,81]),o($Vf,[2,82]),o($Vf,[2,83]),{20:73,28:$Vh,32:$Vi,38:$Vj,42:$Vk,44:$Vl,51:$Vm,54:$Vn,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:$Vs,60:61,62:62,64:$Vt,65:$Vu,66:$Vv,67:$Vw,69:$Vx},{20:74,28:$Vh,32:$Vi,38:$Vj,42:$Vk,44:$Vl,51:$Vm,54:$Vn,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:$Vs,60:61,62:62,64:$Vt,65:$Vu,66:$Vv,67:$Vw,69:$Vx},o($Ve,[2,79]),{4:75,6:3,7:4,8:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:$V0,23:15,28:$V1,29:17,30:$V2,31:$V3,32:$V4,35:$V5,36:$V6,70:$V7,75:$V8,81:$V9,82:$Va,83:$Vb,85:$Vc,86:$Vd},{8:77,10:78,23:15,28:$V1,29:17,30:$V2,31:$V3,32:$V4,35:$V5,36:$V6,84:76},o($Ve,[2,80]),{20:79,28:$Vh,32:$Vi,38:$Vj,42:$Vk,44:$Vl,51:$Vm,54:$Vn,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:$Vs,60:61,62:62,64:$Vt,65:$Vu,66:$Vv,67:$Vw,69:$Vx},{33:[1,80]},{9:[1,98],19:[1,97],21:81,37:$Vz,38:$VA,39:$VB,40:$VC,41:$VD,45:$VE,46:$VF,47:$VG,48:$VH,49:$VI,50:$VJ,52:$VK,53:$VL,61:$VM,63:$VN},{20:99,23:100,28:$Vh,30:$V2,31:$V3,32:[1,101],35:$V5,36:$V6,38:$Vj,42:$Vk,44:$Vl,51:$Vm,54:$Vn,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:$Vs,60:61,62:62,64:$Vt,65:$Vu,66:$Vv,67:$Vw,69:$Vx},{42:[1,102]},{20:103,28:$Vh,32:$Vi,38:$Vj,42:$Vk,44:$Vl,51:$Vm,54:$Vn,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:$Vs,60:61,62:62,64:$Vt,65:$Vu,66:$Vv,67:$Vw,69:$Vx},{20:104,28:$Vh,32:$Vi,38:$Vj,42:$Vk,44:$Vl,51:$Vm,54:$Vn,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:$Vs,60:61,62:62,64:$Vt,65:$Vu,66:$Vv,67:$Vw,69:$Vx},o($VO,[2,46]),o($VO,[2,47]),o($VO,[2,48]),o($VO,[2,49]),o($VO,[2,50]),o($VO,[2,51]),o($VO,[2,52]),o($VO,[2,53]),o($VO,[2,55]),{42:[1,105]},{42:[1,106]},{42:[1,107]},{42:[1,108]},{33:[1,109]},{42:[1,110]},{9:[2,17]},{28:[1,111]},{20:112,28:$Vh,32:$Vi,38:$Vj,42:$Vk,44:$Vl,51:$Vm,54:$Vn,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:$Vs,60:61,62:62,64:$Vt,65:$Vu,66:$Vv,67:$Vw,69:$Vx},o($Vf,[2,22],{37:$Vz,38:$VA,39:$VB,40:$VC,41:$VD,45:$VE,46:$VF,47:$VG,48:$VH,49:$VI,50:$VJ,52:$VK,53:$VL,61:$VM,63:$VN}),{37:$Vz,38:$VA,39:$VB,40:$VC,41:$VD,43:[1,113],45:$VE,46:$VF,47:$VG,48:$VH,49:$VI,50:$VJ,52:$VK,53:$VL,61:$VM,63:$VN},{37:$Vz,38:$VA,39:$VB,40:$VC,41:$VD,43:[1,114],45:$VE,46:$VF,47:$VG,48:$VH,49:$VI,50:$VJ,52:$VK,53:$VL,61:$VM,63:$VN},{6:31,7:4,8:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:$V0,23:15,28:$V1,29:17,30:$V2,31:$V3,32:$V4,35:$V5,36:$V6,70:$V7,72:[1,115],75:$V8,81:$V9,82:$Va,83:$Vb,85:$Vc,86:$Vd},{9:[1,116]},{9:[2,77]},{9:[2,78]},{37:$Vz,38:$VA,39:$VB,40:$VC,41:$VD,43:[1,117],45:$VE,46:$VF,47:$VG,48:$VH,49:$VI,50:$VJ,52:$VK,53:$VL,61:$VM,63:$VN},{34:$VP},o($Ve,[2,14]),{20:119,28:$Vh,32:$Vi,38:$Vj,42:$Vk,44:$Vl,51:$Vm,54:$Vn,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:$Vs,60:61,62:62,64:$Vt,65:$Vu,66:$Vv,67:$Vw,69:$Vx},{20:120,28:$Vh,32:$Vi,38:$Vj,42:$Vk,44:$Vl,51:$Vm,54:$Vn,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:$Vs,60:61,62:62,64:$Vt,65:$Vu,66:$Vv,67:$Vw,69:$Vx},{20:121,28:$Vh,32:$Vi,38:$Vj,42:$Vk,44:$Vl,51:$Vm,54:$Vn,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:$Vs,60:61,62:62,64:$Vt,65:$Vu,66:$Vv,67:$Vw,69:$Vx},{20:122,28:$Vh,32:$Vi,38:$Vj,42:$Vk,44:$Vl,51:$Vm,54:$Vn,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:$Vs,60:61,62:62,64:$Vt,65:$Vu,66:$Vv,67:$Vw,69:$Vx},{20:123,28:$Vh,32:$Vi,38:$Vj,42:$Vk,44:$Vl,51:$Vm,54:$Vn,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:$Vs,60:61,62:62,64:$Vt,65:$Vu,66:$Vv,67:$Vw,69:$Vx},{20:124,28:$Vh,32:$Vi,38:$Vj,42:$Vk,44:$Vl,51:$Vm,54:$Vn,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:$Vs,60:61,62:62,64:$Vt,65:$Vu,66:$Vv,67:$Vw,69:$Vx},{20:125,28:$Vh,32:$Vi,38:$Vj,42:$Vk,44:$Vl,51:$Vm,54:$Vn,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:$Vs,60:61,62:62,64:$Vt,65:$Vu,66:$Vv,67:$Vw,69:$Vx},{20:126,28:$Vh,32:$Vi,38:$Vj,42:$Vk,44:$Vl,51:$Vm,54:$Vn,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:$Vs,60:61,62:62,64:$Vt,65:$Vu,66:$Vv,67:$Vw,69:$Vx},{20:127,28:$Vh,32:$Vi,38:$Vj,42:$Vk,44:$Vl,51:$Vm,54:$Vn,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:$Vs,60:61,62:62,64:$Vt,65:$Vu,66:$Vv,67:$Vw,69:$Vx},{20:128,28:$Vh,32:$Vi,38:$Vj,42:$Vk,44:$Vl,51:$Vm,54:$Vn,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:$Vs,60:61,62:62,64:$Vt,65:$Vu,66:$Vv,67:$Vw,69:$Vx},{20:129,28:$Vh,32:$Vi,38:$Vj,42:$Vk,44:$Vl,51:$Vm,54:$Vn,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:$Vs,60:61,62:62,64:$Vt,65:$Vu,66:$Vv,67:$Vw,69:$Vx},{20:130,28:$Vh,32:$Vi,38:$Vj,42:$Vk,44:$Vl,51:$Vm,54:$Vn,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:$Vs,60:61,62:62,64:$Vt,65:$Vu,66:$Vv,67:$Vw,69:$Vx},{20:131,28:$Vh,32:$Vi,38:$Vj,42:$Vk,44:$Vl,51:$Vm,54:$Vn,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:$Vs,60:61,62:62,64:$Vt,65:$Vu,66:$Vv,67:$Vw,69:$Vx},o($VO,[2,54]),{20:132,28:$Vh,32:$Vi,38:$Vj,42:$Vk,44:$Vl,51:$Vm,54:$Vn,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:$Vs,60:61,62:62,64:$Vt,65:$Vu,66:$Vv,67:$Vw,69:$Vx},{22:[1,133]},o($Ve,[2,16]),{37:$Vz,38:$VA,39:$VB,40:$VC,41:$VD,43:[1,134],45:$VE,46:$VF,47:$VG,48:$VH,49:$VI,50:$VJ,52:$VK,53:$VL,61:$VM,63:$VN},{43:[1,135]},{33:[1,136]},{20:137,28:$Vh,32:$Vi,38:$Vj,42:$Vk,44:$Vl,51:$Vm,54:$Vn,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:$Vs,60:61,62:62,64:$Vt,65:$Vu,66:$Vv,67:$Vw,69:$Vx},o($VQ,[2,42],{37:$Vz,38:$VA,39:$VB,40:$VC,41:$VD,45:$VE,46:$VF,47:$VG,48:$VH,49:$VI,50:$VJ,61:$VM}),o($VR,[2,45],{61:$VM}),{20:138,28:$Vh,32:$Vi,38:$Vj,42:$Vk,44:$Vl,51:$Vm,54:$Vn,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:$Vs,60:61,62:62,64:$Vt,65:$Vu,66:$Vv,67:$Vw,69:$Vx},{20:139,28:$Vh,32:$Vi,38:$Vj,42:$Vk,44:$Vl,51:$Vm,54:$Vn,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:$Vs,60:61,62:62,64:$Vt,65:$Vu,66:$Vv,67:$Vw,69:$Vx},{20:140,28:$Vh,32:$Vi,38:$Vj,42:$Vk,44:$Vl,51:$Vm,54:$Vn,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:$Vs,60:61,62:62,64:$Vt,65:$Vu,66:$Vv,67:$Vw,69:$Vx},{20:141,28:$Vh,32:$Vi,38:$Vj,42:$Vk,44:$Vl,51:$Vm,54:$Vn,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:$Vs,60:61,62:62,64:$Vt,65:$Vu,66:$Vv,67:$Vw,69:$Vx},{33:[1,142]},{20:143,28:$Vh,32:$Vi,38:$Vj,42:$Vk,44:$Vl,51:$Vm,54:$Vn,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:$Vs,60:61,62:62,64:$Vt,65:$Vu,66:$Vv,67:$Vw,69:$Vx},o($Vy,[2,20]),{9:[2,18],37:$Vz,38:$VA,39:$VB,40:$VC,41:$VD,45:$VE,46:$VF,47:$VG,48:$VH,49:$VI,50:$VJ,52:$VK,53:$VL,61:$VM,63:$VN},{71:[1,144]},{71:[1,145]},{81:[1,146]},{20:147,28:$Vh,32:$Vi,38:$Vj,42:$Vk,44:$Vl,51:$Vm,54:$Vn,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:$Vs,60:61,62:62,64:$Vt,65:$Vu,66:$Vv,67:$Vw,69:$Vx},{71:[1,148]},o($Vg,[2,26]),o($VS,[2,29],{39:$VB,40:$VC,41:$VD,61:$VM}),o($VS,[2,30],{39:$VB,40:$VC,41:$VD,61:$VM}),o($VR,[2,31],{61:$VM}),o($VR,[2,32],{61:$VM}),o($VR,[2,33],{61:$VM}),o($VT,[2,36],{37:$Vz,38:$VA,39:$VB,40:$VC,41:$VD,61:$VM}),o($VT,[2,37],{37:$Vz,38:$VA,39:$VB,40:$VC,41:$VD,61:$VM}),o($VT,[2,38],{37:$Vz,38:$VA,39:$VB,40:$VC,41:$VD,61:$VM}),o($VT,[2,39],{37:$Vz,38:$VA,39:$VB,40:$VC,41:$VD,61:$VM}),o($VT,[2,40],{37:$Vz,38:$VA,39:$VB,40:$VC,41:$VD,61:$VM}),o($VT,[2,41],{37:$Vz,38:$VA,39:$VB,40:$VC,41:$VD,61:$VM}),o($VQ,[2,43],{37:$Vz,38:$VA,39:$VB,40:$VC,41:$VD,45:$VE,46:$VF,47:$VG,48:$VH,49:$VI,50:$VJ,61:$VM}),o([9,19,27,33,43,53,63],[2,44],{37:$Vz,38:$VA,39:$VB,40:$VC,41:$VD,45:$VE,46:$VF,47:$VG,48:$VH,49:$VI,50:$VJ,52:$VK,61:$VM}),{33:[1,149],37:$Vz,38:$VA,39:$VB,40:$VC,41:$VD,45:$VE,46:$VF,47:$VG,48:$VH,49:$VI,50:$VJ,52:$VK,53:$VL,61:$VM,63:$VN},{9:[1,150]},o($VO,[2,34]),{20:151,28:$Vh,32:$Vi,38:$Vj,42:$Vk,44:$Vl,51:$Vm,54:$Vn,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:$Vs,60:61,62:62,64:$Vt,65:$Vu,66:$Vv,67:$Vw,69:$Vx},{33:[1,152]},{27:[1,153],37:$Vz,38:$VA,39:$VB,40:$VC,41:$VD,45:$VE,46:$VF,47:$VG,48:$VH,49:$VI,50:$VJ,52:$VK,53:$VL,61:$VM,63:$VN},{37:$Vz,38:$VA,39:$VB,40:$VC,41:$VD,43:[1,154],45:$VE,46:$VF,47:$VG,48:$VH,49:$VI,50:$VJ,52:$VK,53:$VL,61:$VM,63:$VN},{37:$Vz,38:$VA,39:$VB,40:$VC,41:$VD,43:[1,155],45:$VE,46:$VF,47:$VG,48:$VH,49:$VI,50:$VJ,52:$VK,53:$VL,61:$VM,63:$VN},{37:$Vz,38:$VA,39:$VB,40:$VC,41:$VD,43:[1,156],45:$VE,46:$VF,47:$VG,48:$VH,49:$VI,50:$VJ,52:$VK,53:$VL,61:$VM,63:$VN},{37:$Vz,38:$VA,39:$VB,40:$VC,41:$VD,43:[1,157],45:$VE,46:$VF,47:$VG,48:$VH,49:$VI,50:$VJ,52:$VK,53:$VL,61:$VM,63:$VN},{68:$VU},{37:$Vz,38:$VA,39:$VB,40:$VC,41:$VD,43:[1,159],45:$VE,46:$VF,47:$VG,48:$VH,49:$VI,50:$VJ,52:$VK,53:$VL,61:$VM,63:$VN},{4:160,6:3,7:4,8:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:$V0,23:15,28:$V1,29:17,30:$V2,31:$V3,32:$V4,35:$V5,36:$V6,70:$V7,75:$V8,81:$V9,82:$Va,83:$Vb,85:$Vc,86:$Vd},{4:161,6:3,7:4,8:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:$V0,23:15,28:$V1,29:17,30:$V2,31:$V3,32:$V4,35:$V5,36:$V6,70:$V7,75:$V8,81:$V9,82:$Va,83:$Vb,85:$Vc,86:$Vd},{42:[1,162]},{9:[1,163],37:$Vz,38:$VA,39:$VB,40:$VC,41:$VD,45:$VE,46:$VF,47:$VG,48:$VH,49:$VI,50:$VJ,52:$VK,53:$VL,61:$VM,63:$VN},{76:164,77:165,78:166,79:$VV,80:$VW},{20:169,28:$Vh,32:$Vi,38:$Vj,42:$Vk,44:$Vl,51:$Vm,54:$Vn,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:$Vs,60:61,62:62,64:$Vt,65:$Vu,66:$Vv,67:$Vw,69:$Vx},o($Ve,[2,15]),o($VR,[2,84],{61:$VM}),{34:$VP,68:$VU},{20:170,28:$Vh,32:$Vi,38:$Vj,42:$Vk,44:$Vl,51:$Vm,54:$Vn,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:$Vs,60:61,62:62,64:$Vt,65:$Vu,66:$Vv,67:$Vw,69:$Vx},o($VO,[2,57]),o($VO,[2,58]),o($VO,[2,59]),o($VO,[2,60]),{42:[1,171]},o($VO,[2,62]),{6:31,7:4,8:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:$V0,23:15,28:$V1,29:17,30:$V2,31:$V3,32:$V4,35:$V5,36:$V6,70:$V7,72:[1,172],75:$V8,81:$V9,82:$Va,83:$Vb,85:$Vc,86:$Vd},{6:31,7:4,8:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:$V0,23:15,28:$V1,29:17,30:$V2,31:$V3,32:$V4,35:$V5,36:$V6,70:$V7,72:[1,173],75:$V8,81:$V9,82:$Va,83:$Vb,85:$Vc,86:$Vd},{20:174,28:$Vh,32:$Vi,38:$Vj,42:$Vk,44:$Vl,51:$Vm,54:$Vn,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:$Vs,60:61,62:62,64:$Vt,65:$Vu,66:$Vv,67:$Vw,69:$Vx},{10:175,28:$V1,29:17},{72:[1,176],77:177,78:178,79:$VV,80:$VW},{72:[1,179]},o($VX,[2,71]),{33:[1,180]},{20:181,28:$Vh,32:$Vi,38:$Vj,42:$Vk,44:$Vl,51:$Vm,54:$Vn,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:$Vs,60:61,62:62,64:$Vt,65:$Vu,66:$Vv,67:$Vw,69:$Vx},o([9,19,27,33,43,63],[2,56],{37:$Vz,38:$VA,39:$VB,40:$VC,41:$VD,45:$VE,46:$VF,47:$VG,48:$VH,49:$VI,50:$VJ,52:$VK,53:$VL,61:$VM}),{37:$Vz,38:$VA,39:$VB,40:$VC,41:$VD,43:[1,182],45:$VE,46:$VF,47:$VG,48:$VH,49:$VI,50:$VJ,52:$VK,53:$VL,61:$VM,63:$VN},{20:183,28:$Vh,32:$Vi,38:$Vj,42:$Vk,44:$Vl,51:$Vm,54:$Vn,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:$Vs,60:61,62:62,64:$Vt,65:$Vu,66:$Vv,67:$Vw,69:$Vx},o($Ve,[2,66],{73:184,74:[1,185]}),o($Ve,[2,74]),{37:$Vz,38:$VA,39:$VB,40:$VC,41:$VD,43:[1,186],45:$VE,46:$VF,47:$VG,48:$VH,49:$VI,50:$VJ,52:$VK,53:$VL,61:$VM,63:$VN},{43:[1,187]},o($Ve,[2,67]),{72:[1,188]},o($VX,[2,70]),o($Ve,[2,69]),{4:189,6:3,7:4,8:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:$V0,23:15,28:$V1,29:17,30:$V2,31:$V3,32:$V4,35:$V5,36:$V6,70:$V7,75:$V8,81:$V9,82:$Va,83:$Vb,85:$Vc,86:$Vd},{33:[1,190],37:$Vz,38:$VA,39:$VB,40:$VC,41:$VD,45:$VE,46:$VF,47:$VG,48:$VH,49:$VI,50:$VJ,52:$VK,53:$VL,61:$VM,63:$VN},o($VO,[2,35]),{37:$Vz,38:$VA,39:$VB,40:$VC,41:$VD,43:[1,191],45:$VE,46:$VF,47:$VG,48:$VH,49:$VI,50:$VJ,52:$VK,53:$VL,61:$VM,63:$VN},o($Ve,[2,63]),{11:193,70:$V7,71:[1,192]},{9:[1,194]},{71:[1,195]},o($Ve,[2,68]),{6:31,7:4,8:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:$V0,23:15,28:$V1,29:17,30:$V2,31:$V3,32:$V4,35:$V5,36:$V6,70:$V7,72:[2,72],75:$V8,81:$V9,82:$Va,83:$Vb,85:$Vc,86:$Vd},{4:196,6:3,7:4,8:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:$V0,23:15,28:$V1,29:17,30:$V2,31:$V3,32:$V4,35:$V5,36:$V6,70:$V7,75:$V8,81:$V9,82:$Va,83:$Vb,85:$Vc,86:$Vd},o($VO,[2,61]),{4:197,6:3,7:4,8:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:$V0,23:15,28:$V1,29:17,30:$V2,31:$V3,32:$V4,35:$V5,36:$V6,70:$V7,75:$V8,81:$V9,82:$Va,83:$Vb,85:$Vc,86:$Vd},o($Ve,[2,65]),o($Ve,[2,75]),{4:198,6:3,7:4,8:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:$V0,23:15,28:$V1,29:17,30:$V2,31:$V3,32:$V4,35:$V5,36:$V6,70:$V7,75:$V8,81:$V9,82:$Va,83:$Vb,85:$Vc,86:$Vd},o($VX,[2,73],{7:4,8:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,23:15,29:17,6:31,18:$V0,28:$V1,30:$V2,31:$V3,32:$V4,35:$V5,36:$V6,70:$V7,75:$V8,81:$V9,82:$Va,83:$Vb,85:$Vc,86:$Vd}),{6:31,7:4,8:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:$V0,23:15,28:$V1,29:17,30:$V2,31:$V3,32:$V4,35:$V5,36:$V6,70:$V7,72:[1,199],75:$V8,81:$V9,82:$Va,83:$Vb,85:$Vc,86:$Vd},{6:31,7:4,8:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:$V0,23:15,28:$V1,29:17,30:$V2,31:$V3,32:$V4,35:$V5,36:$V6,70:$V7,72:[1,200],75:$V8,81:$V9,82:$Va,83:$Vb,85:$Vc,86:$Vd},o($Ve,[2,64]),o($Ve,[2,76])],
defaultActions: {30:[2,1],69:[2,17],77:[2,77],78:[2,78]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};


const Tipo = require('../build/controllers/simbol/tipo')
const Nativo = require('../build/controllers/expr/Nativo')
const Aritmeticas = require('../build/controllers/expr/Aritmeticas')
const Relacionales = require('../build/controllers/expr/Relacionales')
const Logicos = require('../build/controllers/expr/Logicos')

const DeclaracionVacia = require('../build/controllers/instruc/declaracionVacia')
const Print = require('../build/controllers/instruc/print')
const PrintSeguido = require('../build/controllers/instruc/printSeguido')
const Declaracion = require('../build/controllers/instruc/declaracion')
const AccesoVar = require('../build/controllers/expr/accesoVar')
const AsignacionVar = require('../build/controllers/instruc/asignacionVar')
const If = require('../build/controllers/instruc/if')
const FNativas = require('../build/controllers/expr/fNativas')
const While = require('../build/controllers/instruc/while')
const Break = require('../build/controllers/instruc/Break')
const DoWhile = require('../build/controllers/instruc/doWhile')
const IncreDecre = require('../build/controllers/instruc/increDecre')
const Casteo = require('../build/controllers/expr/casteo')
const For = require('../build/controllers/instruc/for')
const Continue = require('../build/controllers/instruc/Continue')
const OpTernario = require('../build/controllers/instruc/opTernario')
const Switch = require('../build/controllers/instruc/switch')
const Case = require('../build/controllers/instruc/case')
const Default = require('../build/controllers/instruc/default')
const Errores = require('../build/controllers/excep/errores')

const indexRef = require('../build/controllers/indexController')

var cadena  = '';

/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:// Ignorar espacios en blanco
break;
case 1:
break;
case 2:
break;
case 3:return 30;
break;
case 4:return 31;
break;
case 5:return 36;
break;
case 6:return 34;
break;
case 7:return 35;
break;
case 8:return 70;
break;
case 9:return 74;
break;
case 10:return 75;
break;
case 11:return 80;
break;
case 12:return 79;
break;
case 13:return 85;
break;
case 14:return 83;
break;
case 15:return 81;
break;
case 16:return 82;
break;
case 17:return 86;
break;
case 18:return 'R_RETURN';
break;
case 19:return 'R_VOID';
break;
case 20:return 88;
break;
case 21:return 89;
break;
case 22:return 18;
break;
case 23:return 19
break;
case 24:return 64;
break;
case 25:return 65;
break;
case 26:return 61;
break;
case 27:return 69;
break;
case 28:return 32;
break;
case 29:return 68;
break;
case 30:return 'R_EXECUTE';
break;
case 31:return 67;
break;
case 32:return 66;
break;
case 33:return 22;
break;
case 34:return 58;
break;
case 35:return 59;
break;
case 36:return 46;
break;
case 37:return 45;
break;
case 38:return 51;
break;
case 39:return 26;
break;
case 40:return 50;
break;
case 41:return 49;
break;
case 42:return 47;
break;
case 43:return 48;
break;
case 44:return 52;
break;
case 45:return 53;
break;
case 46:return 37;
break;
case 47:return 38;
break;
case 48:return 39;
break;
case 49:return 40;
break;
case 50:return 41;
break;
case 51:return 44;
break;
case 52:return 27;
break;
case 53:return 9;
break;
case 54:return 42;
break;
case 55:return 43;
break;
case 56:return 71;
break;
case 57:return 72;
break;
case 58:return 'R_CORCHETEIZQ';
break;
case 59:return 'R_CORCHETEDER';
break;
case 60:return 63;
break;
case 61:return 33;
break;
case 62:return 28;
break;
case 63:return 57;
break;
case 64:return 55;
break;
case 65:return 54;
break;
case 66: cadena = ''; this.begin("string"); 
break;
case 67: cadena += yy_.yytext; 
break;
case 68: cadena += "\""; 
break;
case 69: cadena += "\n"; 
break;
case 70: cadena += " ";  
break;
case 71: cadena += "\t"; 
break;
case 72: cadena += "\\"; 
break;
case 73: cadena += "\'"; 
break;
case 74: cadena += "\r"; 
break;
case 75: yy_.yytext = cadena; this.popState(); return 56; 
break;
case 76:return 5;
break;
case 77: let error = new Errores.default("Léxico",("Token no reconocido: "+yy_.yytext), yy_.yylloc.first_line, yy_.yylloc.first_column); 
                              indexRef.lista_errores.push(error);
                        
break;
}
},
rules: [/^(?:\s+)/i,/^(?:\/\/.*)/i,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/i,/^(?:int\b)/i,/^(?:double\b)/i,/^(?:char\b)/i,/^(?:string\b)/i,/^(?:bool\b)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:switch\b)/i,/^(?:case\b)/i,/^(?:default\b)/i,/^(?:break\b)/i,/^(?:for\b)/i,/^(?:while\b)/i,/^(?:do\b)/i,/^(?:continue\b)/i,/^(?:return\b)/i,/^(?:void\b)/i,/^(?:\+\+)/i,/^(?:--)/i,/^(?:cout\b)/i,/^(?:<<)/i,/^(?:tolower\b)/i,/^(?:toupper\b)/i,/^(?:\.length\(\))/i,/^(?:c_str\b)/i,/^(?:std\b)/i,/^(?:toString\b)/i,/^(?:execute\b)/i,/^(?:typeOf\b)/i,/^(?:round\b)/i,/^(?:endl\b)/i,/^(?:true\b)/i,/^(?:false\b)/i,/^(?:!=)/i,/^(?:==)/i,/^(?:!)/i,/^(?:=)/i,/^(?:<=)/i,/^(?:>=)/i,/^(?:>)/i,/^(?:<)/i,/^(?:&&)/i,/^(?:\|\|)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:%)/i,/^(?:pow\b)/i,/^(?:,)/i,/^(?:;)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\{)/i,/^(?:\})/i,/^(?:\[)/i,/^(?:\])/i,/^(?:\?)/i,/^(?::)/i,/^(?:([a-zA-Z])([a-zA-Z0-9_])*)/i,/^(?:[']\\\\[']|[']\\"[']|[']\\'[']|[']\\n[']|[']\\t[']|[']\\r[']|['].?['])/i,/^(?:[0-9]+\.[0-9]+)/i,/^(?:[0-9]+)/i,/^(?:["])/i,/^(?:[^"\\]+)/i,/^(?:\\")/i,/^(?:\\n)/i,/^(?:\s)/i,/^(?:\\t)/i,/^(?:\\\\)/i,/^(?:\\\\')/i,/^(?:\\r)/i,/^(?:["])/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"string":{"rules":[67,68,69,70,71,72,73,74,75],"inclusive":false},"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,76,77],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = gramatica;
exports.Parser = gramatica.Parser;
exports.parse = function () { return gramatica.parse.apply(gramatica, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}