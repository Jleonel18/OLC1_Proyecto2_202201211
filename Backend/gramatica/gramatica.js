/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var gramatica = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,10],$V1=[1,12],$V2=[1,16],$V3=[1,17],$V4=[1,18],$V5=[1,19],$V6=[1,20],$V7=[1,13],$V8=[1,14],$V9=[1,15],$Va=[5,14,24,25,26,27,30,31,63,65,66,67],$Vb=[1,40],$Vc=[1,49],$Vd=[1,36],$Ve=[1,33],$Vf=[1,34],$Vg=[1,35],$Vh=[1,37],$Vi=[1,38],$Vj=[1,39],$Vk=[1,41],$Vl=[1,42],$Vm=[1,43],$Vn=[1,45],$Vo=[1,46],$Vp=[1,47],$Vq=[1,48],$Vr=[1,50],$Vs=[10,22,23],$Vt=[1,60],$Vu=[1,61],$Vv=[1,62],$Vw=[1,63],$Vx=[1,64],$Vy=[1,65],$Vz=[1,66],$VA=[1,67],$VB=[1,68],$VC=[1,69],$VD=[1,70],$VE=[1,71],$VF=[1,72],$VG=[1,73],$VH=[10,15,23,32,33,34,35,36,38,40,41,42,43,44,45,47,48,56],$VI=[10,15,23,38,47,48],$VJ=[10,15,23,32,33,34,35,36,38,40,41,42,43,44,45,47,48],$VK=[10,15,23,32,33,38,40,41,42,43,44,45,47,48],$VL=[10,15,23,38,40,41,42,43,44,45,47,48];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"inicio":3,"instrucciones":4,"EOF":5,"instruccion":6,"impresion":7,"declaracion":8,"asignacion":9,"R_PUNTOYCOMA":10,"if":11,"while":12,"break":13,"R_COUT":14,"R_DOBLEMENOR":15,"expresion":16,"final_cout":17,"R_ENDL":18,"tipos":19,"declaraciones_varias":20,"asignar_declaracion":21,"R_IGUAL":22,"R_COMA":23,"ID":24,"R_INT":25,"R_DOUBLE":26,"R_STD":27,"R_DOSPUNTOS":28,"R_STRING":29,"R_BOOL":30,"R_CHAR":31,"R_MAS":32,"R_MENOS":33,"R_POR":34,"R_DIV":35,"R_MOD":36,"R_PARIZQ":37,"R_PARDER":38,"R_POW":39,"R_IGUALIGUAL":40,"R_DISTINTO":41,"R_MAYOR":42,"R_MENOR":43,"R_MAYORIGUAL":44,"R_MENORIGUAL":45,"R_NOT":46,"R_AND":47,"R_OR":48,"ENTERO":49,"DECIMAL":50,"CADENA":51,"CARACTER":52,"R_TRUE":53,"R_FALSE":54,"f_nativas":55,"R_LENGTH":56,"R_TOLOWER":57,"R_TOUPPER":58,"R_ROUND":59,"R_TYPEOF":60,"R_TOSTRING":61,"R_C_STR":62,"R_IF":63,"R_LLAVEIZQ":64,"R_LLAVEDER":65,"R_WHILE":66,"R_BREAK":67,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",10:"R_PUNTOYCOMA",14:"R_COUT",15:"R_DOBLEMENOR",18:"R_ENDL",22:"R_IGUAL",23:"R_COMA",24:"ID",25:"R_INT",26:"R_DOUBLE",27:"R_STD",28:"R_DOSPUNTOS",29:"R_STRING",30:"R_BOOL",31:"R_CHAR",32:"R_MAS",33:"R_MENOS",34:"R_POR",35:"R_DIV",36:"R_MOD",37:"R_PARIZQ",38:"R_PARDER",39:"R_POW",40:"R_IGUALIGUAL",41:"R_DISTINTO",42:"R_MAYOR",43:"R_MENOR",44:"R_MAYORIGUAL",45:"R_MENORIGUAL",46:"R_NOT",47:"R_AND",48:"R_OR",49:"ENTERO",50:"DECIMAL",51:"CADENA",52:"CARACTER",53:"R_TRUE",54:"R_FALSE",56:"R_LENGTH",57:"R_TOLOWER",58:"R_TOUPPER",59:"R_ROUND",60:"R_TYPEOF",61:"R_TOSTRING",62:"R_C_STR",63:"R_IF",64:"R_LLAVEIZQ",65:"R_LLAVEDER",66:"R_WHILE",67:"R_BREAK"},
productions_: [0,[3,2],[4,2],[4,1],[6,1],[6,1],[6,2],[6,1],[6,1],[6,1],[7,4],[17,3],[17,1],[8,3],[21,3],[21,1],[20,3],[20,1],[9,3],[19,1],[19,1],[19,4],[19,1],[19,1],[16,3],[16,3],[16,3],[16,3],[16,3],[16,3],[16,6],[16,3],[16,3],[16,3],[16,3],[16,3],[16,3],[16,2],[16,3],[16,3],[16,2],[16,1],[16,1],[16,1],[16,1],[16,1],[16,1],[16,1],[16,1],[16,2],[55,4],[55,4],[55,4],[55,4],[55,7],[55,4],[11,7],[12,7],[13,2]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
return $$[$0-1];
break;
case 2:
$$[$0-1].push($$[$0]); this.$=$$[$0-1];
break;
case 3:
this.$=[$$[$0]];
break;
case 4: case 5: case 7: case 8: case 9:
this.$=$$[$0];
break;
case 6:
this.$=$$[$0-1];
break;
case 10:
if($$[$0] == true){this.$= new Print.default($$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column);}else{this.$= new PrintSeguido.default($$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column);} 
break;
case 11:
this.$= true;
break;
case 12:
this.$= false;
break;
case 13:

      if($$[$0] == true){
            this.$ = new DeclaracionVacia.default($$[$0-2], _$[$0-2].first_line, _$[$0-2].first_column, $$[$0-1]);
      }else{
            this.$ = new Declaracion.default($$[$0-2], _$[$0-2].first_line, _$[$0-2].first_column, $$[$0-1], $$[$0]);}

      
break;
case 14: case 29:
this.$ = $$[$0-1];
break;
case 15:
this.$ = true;
break;
case 16:
 this.$.push($$[$0]); this.$=$$[$0-2];
break;
case 17:
this.$ = [$$[$0]];
break;
case 18:
this.$ = new AsignacionVar.default($$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 19:
this.$ = new Tipo.default(Tipo.tipoDato.ENTERO);
break;
case 20:
this.$ = new Tipo.default(Tipo.tipoDato.DECIMAL);
break;
case 21:
this.$ = new Tipo.default(Tipo.tipoDato.CADENA);
break;
case 22:
this.$ = new Tipo.default(Tipo.tipoDato.BOOL);
break;
case 23:
this.$ = new Tipo.default(Tipo.tipoDato.CARACTER);
break;
case 24:
this.$ = new Aritmeticas.default(Aritmeticas.Operadores.SUMA, _$[$0-2].first_line, _$[$0-2].first_column, $$[$0-2], $$[$0]);
break;
case 25:
this.$ = new Aritmeticas.default(Aritmeticas.Operadores.RESTA, _$[$0-2].first_line, _$[$0-2].first_column, $$[$0-2], $$[$0]);
break;
case 26:
this.$ = new Aritmeticas.default(Aritmeticas.Operadores.MULTIPLICACION, _$[$0-2].first_line, _$[$0-2].first_column, $$[$0-2], $$[$0]);
break;
case 27:
this.$ = new Aritmeticas.default(Aritmeticas.Operadores.DIVISION, _$[$0-2].first_line, _$[$0-2].first_column, $$[$0-2], $$[$0]);
break;
case 28:
this.$ = new Aritmeticas.default(Aritmeticas.Operadores.MODULO, _$[$0-2].first_line, _$[$0-2].first_column, $$[$0-2], $$[$0]);
break;
case 30:
this.$ = new Aritmeticas.default(Aritmeticas.Operadores.POTENCIA, _$[$0-5].first_line, _$[$0-5].first_column, $$[$0-3], $$[$0-1]);
break;
case 31:
this.$ = new Relacionales.default(Relacionales.Operadores.IGUAL, _$[$0-2].first_line, _$[$0-2].first_column, $$[$0-2], $$[$0]);
break;
case 32:
this.$ =  new Relacionales.default(Relacionales.Operadores.DIFERENTE, _$[$0-2].first_line, _$[$0-2].first_column, $$[$0-2], $$[$0]);
break;
case 33:
this.$ = new Relacionales.default(Relacionales.Operadores.MAYOR, _$[$0-2].first_line, _$[$0-2].first_column, $$[$0-2], $$[$0]);
break;
case 34:
this.$ = new Relacionales.default(Relacionales.Operadores.MENOR, _$[$0-2].first_line, _$[$0-2].first_column, $$[$0-2], $$[$0]);
break;
case 35:
this.$ = new Relacionales.default(Relacionales.Operadores.MAYORIGUAL, _$[$0-2].first_line, _$[$0-2].first_column, $$[$0-2], $$[$0]);
break;
case 36:
this.$ = new Relacionales.default(Relacionales.Operadores.MENORIGUAL, _$[$0-2].first_line, _$[$0-2].first_column, $$[$0-2], $$[$0]);
break;
case 37:
this.$ = new Logicos.default(Logicos.Operadores.NOT, _$[$0-1].first_line, _$[$0-1].first_column, $$[$0]);
break;
case 38:
this.$ = new Logicos.default(Logicos.Operadores.AND, _$[$0-2].first_line, _$[$0-2].first_column, $$[$0-2], $$[$0]);
break;
case 39:
this.$ = new Logicos.default(Logicos.Operadores.OR, _$[$0-2].first_line, _$[$0-2].first_column, $$[$0-2], $$[$0]);
break;
case 40:
this.$ = new Aritmeticas.default(Aritmeticas.Operadores.NEG, _$[$0-1].first_line, _$[$0-1].first_column, $$[$0]);
break;
case 41:
this.$ = new Nativo.default(new Tipo.default(Tipo.tipoDato.ENTERO), $$[$0], _$[$0].first_line, _$[$0].first_column );
break;
case 42:
this.$ = new Nativo.default(new Tipo.default(Tipo.tipoDato.DECIMAL), $$[$0], _$[$0].first_line, _$[$0].first_column );
break;
case 43:
this.$ = new Nativo.default(new Tipo.default(Tipo.tipoDato.CADENA), $$[$0], _$[$0].first_line, _$[$0].first_column );
break;
case 44:
this.$ = new AccesoVar.default($$[$0], _$[$0].first_line, _$[$0].first_column);
break;
case 45:
this.$ = new Nativo.default(new Tipo.default(Tipo.tipoDato.CARACTER), $$[$0], _$[$0].first_line, _$[$0].first_column );
break;
case 46:
this.$ = new Nativo.default(new Tipo.default(Tipo.tipoDato.BOOL), true, _$[$0].first_line, _$[$0].first_column );
break;
case 47:
this.$ = new Nativo.default(new Tipo.default(Tipo.tipoDato.BOOL), false, _$[$0].first_line, _$[$0].first_column );
break;
case 48:
this.$ = $$[$0];
break;
case 49:
this.$ = new FNativas.default(FNativas.Operadores.LENGTH, _$[$0-1].first_line, _$[$0-1].first_column, $$[$0-1]);
break;
case 50:
this.$ = new FNativas.default(FNativas.Operadores.TOLOWER, _$[$0-3].first_line, _$[$0-3].first_column, $$[$0-1]);
break;
case 51:
this.$ = new FNativas.default(FNativas.Operadores.TOUPPER, _$[$0-3].first_line, _$[$0-3].first_column, $$[$0-1]);
break;
case 52:
this.$ = new FNativas.default(FNativas.Operadores.ROUND, _$[$0-3].first_line, _$[$0-3].first_column, $$[$0-1]);
break;
case 53:
this.$ = new FNativas.default(FNativas.Operadores.TYPEOF, _$[$0-3].first_line, _$[$0-3].first_column, $$[$0-1]);
break;
case 54:
this.$ = new FNativas.default(FNativas.Operadores.TOSTRING, _$[$0-6].first_line, _$[$0-6].first_column, $$[$0-1]);
break;
case 56:
this.$ = new If.default($$[$0-4], $$[$0-1], _$[$0-6].first_line, _$[$0-6].first_column);
break;
case 57:
this.$ = new While.default($$[$0-4], $$[$0-1], _$[$0-6].first_line, _$[$0-6].first_column);
break;
case 58:
this.$ = new Break.default(_$[$0-1].first_line, _$[$0-1].first_column);
break;
}
},
table: [{3:1,4:2,6:3,7:4,8:5,9:6,11:7,12:8,13:9,14:$V0,19:11,24:$V1,25:$V2,26:$V3,27:$V4,30:$V5,31:$V6,63:$V7,66:$V8,67:$V9},{1:[3]},{5:[1,21],6:22,7:4,8:5,9:6,11:7,12:8,13:9,14:$V0,19:11,24:$V1,25:$V2,26:$V3,27:$V4,30:$V5,31:$V6,63:$V7,66:$V8,67:$V9},o($Va,[2,3]),o($Va,[2,4]),o($Va,[2,5]),{10:[1,23]},o($Va,[2,7]),o($Va,[2,8]),o($Va,[2,9]),{15:[1,24]},{20:25,24:[1,26]},{22:[1,27]},{37:[1,28]},{37:[1,29]},{10:[1,30]},{24:[2,19]},{24:[2,20]},{28:[1,31]},{24:[2,22]},{24:[2,23]},{1:[2,1]},o($Va,[2,2]),o($Va,[2,6]),{16:32,24:$Vb,27:$Vc,33:$Vd,37:$Ve,39:$Vf,46:$Vg,49:$Vh,50:$Vi,51:$Vj,52:$Vk,53:$Vl,54:$Vm,55:44,57:$Vn,58:$Vo,59:$Vp,60:$Vq,62:$Vr},{10:[1,54],21:51,22:[1,53],23:[1,52]},o($Vs,[2,17]),{16:55,24:$Vb,27:$Vc,33:$Vd,37:$Ve,39:$Vf,46:$Vg,49:$Vh,50:$Vi,51:$Vj,52:$Vk,53:$Vl,54:$Vm,55:44,57:$Vn,58:$Vo,59:$Vp,60:$Vq,62:$Vr},{16:56,24:$Vb,27:$Vc,33:$Vd,37:$Ve,39:$Vf,46:$Vg,49:$Vh,50:$Vi,51:$Vj,52:$Vk,53:$Vl,54:$Vm,55:44,57:$Vn,58:$Vo,59:$Vp,60:$Vq,62:$Vr},{16:57,24:$Vb,27:$Vc,33:$Vd,37:$Ve,39:$Vf,46:$Vg,49:$Vh,50:$Vi,51:$Vj,52:$Vk,53:$Vl,54:$Vm,55:44,57:$Vn,58:$Vo,59:$Vp,60:$Vq,62:$Vr},o($Va,[2,58]),{28:[1,58]},{10:[1,75],15:[1,74],17:59,32:$Vt,33:$Vu,34:$Vv,35:$Vw,36:$Vx,40:$Vy,41:$Vz,42:$VA,43:$VB,44:$VC,45:$VD,47:$VE,48:$VF,56:$VG},{16:76,24:$Vb,27:$Vc,33:$Vd,37:$Ve,39:$Vf,46:$Vg,49:$Vh,50:$Vi,51:$Vj,52:$Vk,53:$Vl,54:$Vm,55:44,57:$Vn,58:$Vo,59:$Vp,60:$Vq,62:$Vr},{37:[1,77]},{16:78,24:$Vb,27:$Vc,33:$Vd,37:$Ve,39:$Vf,46:$Vg,49:$Vh,50:$Vi,51:$Vj,52:$Vk,53:$Vl,54:$Vm,55:44,57:$Vn,58:$Vo,59:$Vp,60:$Vq,62:$Vr},{16:79,24:$Vb,27:$Vc,33:$Vd,37:$Ve,39:$Vf,46:$Vg,49:$Vh,50:$Vi,51:$Vj,52:$Vk,53:$Vl,54:$Vm,55:44,57:$Vn,58:$Vo,59:$Vp,60:$Vq,62:$Vr},o($VH,[2,41]),o($VH,[2,42]),o($VH,[2,43]),o($VH,[2,44]),o($VH,[2,45]),o($VH,[2,46]),o($VH,[2,47]),o($VH,[2,48]),{37:[1,80]},{37:[1,81]},{37:[1,82]},{37:[1,83]},{28:[1,84]},{37:[1,85]},o($Va,[2,13]),{24:[1,86]},{16:87,24:$Vb,27:$Vc,33:$Vd,37:$Ve,39:$Vf,46:$Vg,49:$Vh,50:$Vi,51:$Vj,52:$Vk,53:$Vl,54:$Vm,55:44,57:$Vn,58:$Vo,59:$Vp,60:$Vq,62:$Vr},o($Va,[2,15]),{10:[2,18],32:$Vt,33:$Vu,34:$Vv,35:$Vw,36:$Vx,40:$Vy,41:$Vz,42:$VA,43:$VB,44:$VC,45:$VD,47:$VE,48:$VF,56:$VG},{32:$Vt,33:$Vu,34:$Vv,35:$Vw,36:$Vx,38:[1,88],40:$Vy,41:$Vz,42:$VA,43:$VB,44:$VC,45:$VD,47:$VE,48:$VF,56:$VG},{32:$Vt,33:$Vu,34:$Vv,35:$Vw,36:$Vx,38:[1,89],40:$Vy,41:$Vz,42:$VA,43:$VB,44:$VC,45:$VD,47:$VE,48:$VF,56:$VG},{29:[1,90]},o($Va,[2,10]),{16:91,24:$Vb,27:$Vc,33:$Vd,37:$Ve,39:$Vf,46:$Vg,49:$Vh,50:$Vi,51:$Vj,52:$Vk,53:$Vl,54:$Vm,55:44,57:$Vn,58:$Vo,59:$Vp,60:$Vq,62:$Vr},{16:92,24:$Vb,27:$Vc,33:$Vd,37:$Ve,39:$Vf,46:$Vg,49:$Vh,50:$Vi,51:$Vj,52:$Vk,53:$Vl,54:$Vm,55:44,57:$Vn,58:$Vo,59:$Vp,60:$Vq,62:$Vr},{16:93,24:$Vb,27:$Vc,33:$Vd,37:$Ve,39:$Vf,46:$Vg,49:$Vh,50:$Vi,51:$Vj,52:$Vk,53:$Vl,54:$Vm,55:44,57:$Vn,58:$Vo,59:$Vp,60:$Vq,62:$Vr},{16:94,24:$Vb,27:$Vc,33:$Vd,37:$Ve,39:$Vf,46:$Vg,49:$Vh,50:$Vi,51:$Vj,52:$Vk,53:$Vl,54:$Vm,55:44,57:$Vn,58:$Vo,59:$Vp,60:$Vq,62:$Vr},{16:95,24:$Vb,27:$Vc,33:$Vd,37:$Ve,39:$Vf,46:$Vg,49:$Vh,50:$Vi,51:$Vj,52:$Vk,53:$Vl,54:$Vm,55:44,57:$Vn,58:$Vo,59:$Vp,60:$Vq,62:$Vr},{16:96,24:$Vb,27:$Vc,33:$Vd,37:$Ve,39:$Vf,46:$Vg,49:$Vh,50:$Vi,51:$Vj,52:$Vk,53:$Vl,54:$Vm,55:44,57:$Vn,58:$Vo,59:$Vp,60:$Vq,62:$Vr},{16:97,24:$Vb,27:$Vc,33:$Vd,37:$Ve,39:$Vf,46:$Vg,49:$Vh,50:$Vi,51:$Vj,52:$Vk,53:$Vl,54:$Vm,55:44,57:$Vn,58:$Vo,59:$Vp,60:$Vq,62:$Vr},{16:98,24:$Vb,27:$Vc,33:$Vd,37:$Ve,39:$Vf,46:$Vg,49:$Vh,50:$Vi,51:$Vj,52:$Vk,53:$Vl,54:$Vm,55:44,57:$Vn,58:$Vo,59:$Vp,60:$Vq,62:$Vr},{16:99,24:$Vb,27:$Vc,33:$Vd,37:$Ve,39:$Vf,46:$Vg,49:$Vh,50:$Vi,51:$Vj,52:$Vk,53:$Vl,54:$Vm,55:44,57:$Vn,58:$Vo,59:$Vp,60:$Vq,62:$Vr},{16:100,24:$Vb,27:$Vc,33:$Vd,37:$Ve,39:$Vf,46:$Vg,49:$Vh,50:$Vi,51:$Vj,52:$Vk,53:$Vl,54:$Vm,55:44,57:$Vn,58:$Vo,59:$Vp,60:$Vq,62:$Vr},{16:101,24:$Vb,27:$Vc,33:$Vd,37:$Ve,39:$Vf,46:$Vg,49:$Vh,50:$Vi,51:$Vj,52:$Vk,53:$Vl,54:$Vm,55:44,57:$Vn,58:$Vo,59:$Vp,60:$Vq,62:$Vr},{16:102,24:$Vb,27:$Vc,33:$Vd,37:$Ve,39:$Vf,46:$Vg,49:$Vh,50:$Vi,51:$Vj,52:$Vk,53:$Vl,54:$Vm,55:44,57:$Vn,58:$Vo,59:$Vp,60:$Vq,62:$Vr},{16:103,24:$Vb,27:$Vc,33:$Vd,37:$Ve,39:$Vf,46:$Vg,49:$Vh,50:$Vi,51:$Vj,52:$Vk,53:$Vl,54:$Vm,55:44,57:$Vn,58:$Vo,59:$Vp,60:$Vq,62:$Vr},o($VH,[2,49]),{18:[1,104]},o($Va,[2,12]),{32:$Vt,33:$Vu,34:$Vv,35:$Vw,36:$Vx,38:[1,105],40:$Vy,41:$Vz,42:$VA,43:$VB,44:$VC,45:$VD,47:$VE,48:$VF,56:$VG},{16:106,24:$Vb,27:$Vc,33:$Vd,37:$Ve,39:$Vf,46:$Vg,49:$Vh,50:$Vi,51:$Vj,52:$Vk,53:$Vl,54:$Vm,55:44,57:$Vn,58:$Vo,59:$Vp,60:$Vq,62:$Vr},o($VI,[2,37],{32:$Vt,33:$Vu,34:$Vv,35:$Vw,36:$Vx,40:$Vy,41:$Vz,42:$VA,43:$VB,44:$VC,45:$VD,56:$VG}),o($VJ,[2,40],{56:$VG}),{16:107,24:$Vb,27:$Vc,33:$Vd,37:$Ve,39:$Vf,46:$Vg,49:$Vh,50:$Vi,51:$Vj,52:$Vk,53:$Vl,54:$Vm,55:44,57:$Vn,58:$Vo,59:$Vp,60:$Vq,62:$Vr},{16:108,24:$Vb,27:$Vc,33:$Vd,37:$Ve,39:$Vf,46:$Vg,49:$Vh,50:$Vi,51:$Vj,52:$Vk,53:$Vl,54:$Vm,55:44,57:$Vn,58:$Vo,59:$Vp,60:$Vq,62:$Vr},{16:109,24:$Vb,27:$Vc,33:$Vd,37:$Ve,39:$Vf,46:$Vg,49:$Vh,50:$Vi,51:$Vj,52:$Vk,53:$Vl,54:$Vm,55:44,57:$Vn,58:$Vo,59:$Vp,60:$Vq,62:$Vr},{16:110,24:$Vb,27:$Vc,33:$Vd,37:$Ve,39:$Vf,46:$Vg,49:$Vh,50:$Vi,51:$Vj,52:$Vk,53:$Vl,54:$Vm,55:44,57:$Vn,58:$Vo,59:$Vp,60:$Vq,62:$Vr},{28:[1,111]},{16:112,24:$Vb,27:$Vc,33:$Vd,37:$Ve,39:$Vf,46:$Vg,49:$Vh,50:$Vi,51:$Vj,52:$Vk,53:$Vl,54:$Vm,55:44,57:$Vn,58:$Vo,59:$Vp,60:$Vq,62:$Vr},o($Vs,[2,16]),{10:[1,113],32:$Vt,33:$Vu,34:$Vv,35:$Vw,36:$Vx,40:$Vy,41:$Vz,42:$VA,43:$VB,44:$VC,45:$VD,47:$VE,48:$VF,56:$VG},{64:[1,114]},{64:[1,115]},{24:[2,21]},o($VK,[2,24],{34:$Vv,35:$Vw,36:$Vx,56:$VG}),o($VK,[2,25],{34:$Vv,35:$Vw,36:$Vx,56:$VG}),o($VJ,[2,26],{56:$VG}),o($VJ,[2,27],{56:$VG}),o($VJ,[2,28],{56:$VG}),o($VL,[2,31],{32:$Vt,33:$Vu,34:$Vv,35:$Vw,36:$Vx,56:$VG}),o($VL,[2,32],{32:$Vt,33:$Vu,34:$Vv,35:$Vw,36:$Vx,56:$VG}),o($VL,[2,33],{32:$Vt,33:$Vu,34:$Vv,35:$Vw,36:$Vx,56:$VG}),o($VL,[2,34],{32:$Vt,33:$Vu,34:$Vv,35:$Vw,36:$Vx,56:$VG}),o($VL,[2,35],{32:$Vt,33:$Vu,34:$Vv,35:$Vw,36:$Vx,56:$VG}),o($VL,[2,36],{32:$Vt,33:$Vu,34:$Vv,35:$Vw,36:$Vx,56:$VG}),o($VI,[2,38],{32:$Vt,33:$Vu,34:$Vv,35:$Vw,36:$Vx,40:$Vy,41:$Vz,42:$VA,43:$VB,44:$VC,45:$VD,56:$VG}),o([10,15,23,38,48],[2,39],{32:$Vt,33:$Vu,34:$Vv,35:$Vw,36:$Vx,40:$Vy,41:$Vz,42:$VA,43:$VB,44:$VC,45:$VD,47:$VE,56:$VG}),{10:[1,116]},o($VH,[2,29]),{23:[1,117],32:$Vt,33:$Vu,34:$Vv,35:$Vw,36:$Vx,40:$Vy,41:$Vz,42:$VA,43:$VB,44:$VC,45:$VD,47:$VE,48:$VF,56:$VG},{32:$Vt,33:$Vu,34:$Vv,35:$Vw,36:$Vx,38:[1,118],40:$Vy,41:$Vz,42:$VA,43:$VB,44:$VC,45:$VD,47:$VE,48:$VF,56:$VG},{32:$Vt,33:$Vu,34:$Vv,35:$Vw,36:$Vx,38:[1,119],40:$Vy,41:$Vz,42:$VA,43:$VB,44:$VC,45:$VD,47:$VE,48:$VF,56:$VG},{32:$Vt,33:$Vu,34:$Vv,35:$Vw,36:$Vx,38:[1,120],40:$Vy,41:$Vz,42:$VA,43:$VB,44:$VC,45:$VD,47:$VE,48:$VF,56:$VG},{32:$Vt,33:$Vu,34:$Vv,35:$Vw,36:$Vx,38:[1,121],40:$Vy,41:$Vz,42:$VA,43:$VB,44:$VC,45:$VD,47:$VE,48:$VF,56:$VG},{61:[1,122]},{32:$Vt,33:$Vu,34:$Vv,35:$Vw,36:$Vx,38:[1,123],40:$Vy,41:$Vz,42:$VA,43:$VB,44:$VC,45:$VD,47:$VE,48:$VF,56:$VG},o($Va,[2,14]),{4:124,6:3,7:4,8:5,9:6,11:7,12:8,13:9,14:$V0,19:11,24:$V1,25:$V2,26:$V3,27:$V4,30:$V5,31:$V6,63:$V7,66:$V8,67:$V9},{4:125,6:3,7:4,8:5,9:6,11:7,12:8,13:9,14:$V0,19:11,24:$V1,25:$V2,26:$V3,27:$V4,30:$V5,31:$V6,63:$V7,66:$V8,67:$V9},o($Va,[2,11]),{16:126,24:$Vb,27:$Vc,33:$Vd,37:$Ve,39:$Vf,46:$Vg,49:$Vh,50:$Vi,51:$Vj,52:$Vk,53:$Vl,54:$Vm,55:44,57:$Vn,58:$Vo,59:$Vp,60:$Vq,62:$Vr},o($VH,[2,50]),o($VH,[2,51]),o($VH,[2,52]),o($VH,[2,53]),{37:[1,127]},o($VH,[2,55]),{6:22,7:4,8:5,9:6,11:7,12:8,13:9,14:$V0,19:11,24:$V1,25:$V2,26:$V3,27:$V4,30:$V5,31:$V6,63:$V7,65:[1,128],66:$V8,67:$V9},{6:22,7:4,8:5,9:6,11:7,12:8,13:9,14:$V0,19:11,24:$V1,25:$V2,26:$V3,27:$V4,30:$V5,31:$V6,63:$V7,65:[1,129],66:$V8,67:$V9},{32:$Vt,33:$Vu,34:$Vv,35:$Vw,36:$Vx,38:[1,130],40:$Vy,41:$Vz,42:$VA,43:$VB,44:$VC,45:$VD,47:$VE,48:$VF,56:$VG},{16:131,24:$Vb,27:$Vc,33:$Vd,37:$Ve,39:$Vf,46:$Vg,49:$Vh,50:$Vi,51:$Vj,52:$Vk,53:$Vl,54:$Vm,55:44,57:$Vn,58:$Vo,59:$Vp,60:$Vq,62:$Vr},o($Va,[2,56]),o($Va,[2,57]),o($VH,[2,30]),{32:$Vt,33:$Vu,34:$Vv,35:$Vw,36:$Vx,38:[1,132],40:$Vy,41:$Vz,42:$VA,43:$VB,44:$VC,45:$VD,47:$VE,48:$VF,56:$VG},o($VH,[2,54])],
defaultActions: {16:[2,19],17:[2,20],19:[2,22],20:[2,23],21:[2,1],90:[2,21]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};


const Tipo = require('../build/controllers/simbol/tipo')
const Nativo = require('../build/controllers/expr/Nativo')
const Aritmeticas = require('../build/controllers/expr/Aritmeticas')
const Relacionales = require('../build/controllers/expr/Relacionales')
const Logicos = require('../build/controllers/expr/Logicos')

const DeclaracionVacia = require('../build/controllers/instruc/declaracionVacia')
const Print = require('../build/controllers/instruc/print')
const PrintSeguido = require('../build/controllers/instruc/printSeguido')
const Declaracion = require('../build/controllers/instruc/declaracion')
const AccesoVar = require('../build/controllers/expr/accesoVar')
const AsignacionVar = require('../build/controllers/instruc/asignacionVar')
const If = require('../build/controllers/instruc/if')
const FNativas = require('../build/controllers/expr/fNativas')
const While = require('../build/controllers/instruc/while')
const Break = require('../build/controllers/instruc/Break')

var cadena  = '';
var errores = [];

/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:// Ignorar espacios en blanco
break;
case 1:
break;
case 2:
break;
case 3:return 25;
break;
case 4:return 26;
break;
case 5:return 31;
break;
case 6:return 29;
break;
case 7:return 30;
break;
case 8:return 63;
break;
case 9:return 'R_ELSE';
break;
case 10:return 'R_SWITCH';
break;
case 11:return 'R_CASE';
break;
case 12:return 'R_DEFAULT';
break;
case 13:return 67;
break;
case 14:return 'R_FOR';
break;
case 15:return 66;
break;
case 16:return 'R_DO';
break;
case 17:return 'R_CONTINUE';
break;
case 18:return 'R_RETURN';
break;
case 19:return 'R_VOID';
break;
case 20:return 'R_INC';
break;
case 21:return 'R_DEC';
break;
case 22:return 14;
break;
case 23:return 15
break;
case 24:return 57;
break;
case 25:return 58;
break;
case 26:return 56;
break;
case 27:return 62;
break;
case 28:return 27;
break;
case 29:return 61;
break;
case 30:return 'R_EXECUTE';
break;
case 31:return 60;
break;
case 32:return 59;
break;
case 33:return 18;
break;
case 34:return 53;
break;
case 35:return 54;
break;
case 36:return 41;
break;
case 37:return 40;
break;
case 38:return 46;
break;
case 39:return 22;
break;
case 40:return 45;
break;
case 41:return 44;
break;
case 42:return 42;
break;
case 43:return 43;
break;
case 44:return 47;
break;
case 45:return 48;
break;
case 46:return 32;
break;
case 47:return 33;
break;
case 48:return 34;
break;
case 49:return 35;
break;
case 50:return 36;
break;
case 51:return 39;
break;
case 52:return 23;
break;
case 53:return 10;
break;
case 54:return 37;
break;
case 55:return 38;
break;
case 56:return 64;
break;
case 57:return 65;
break;
case 58:return 'R_CORCHETEIZQ';
break;
case 59:return 'R_CORCHETEDER';
break;
case 60:return 'R_TERNARIO';
break;
case 61:return 28;
break;
case 62:return 24;
break;
case 63:return 52;
break;
case 64:return 50;
break;
case 65:return 49;
break;
case 66: cadena = ''; this.begin("string"); 
break;
case 67: cadena += yy_.yytext; 
break;
case 68: cadena += "\""; 
break;
case 69: cadena += "\n"; 
break;
case 70: cadena += " ";  
break;
case 71: cadena += "\t"; 
break;
case 72: cadena += "\\"; 
break;
case 73: cadena += "\'"; 
break;
case 74: cadena += "\r"; 
break;
case 75: yy_.yytext = cadena; this.popState(); return 51; 
break;
case 76:return 5;
break;
case 77: errores.push({ tipo: "Lexico", error: yy_.yytext, linea: yy_.yylloc.first_line, columna: yy_.yylloc.first_column+1 }); return 'ERROR_LEX'; 
break;
}
},
rules: [/^(?:\s+)/i,/^(?:\/\/.*)/i,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/i,/^(?:int\b)/i,/^(?:double\b)/i,/^(?:char\b)/i,/^(?:string\b)/i,/^(?:bool\b)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:switch\b)/i,/^(?:case\b)/i,/^(?:default\b)/i,/^(?:break\b)/i,/^(?:for\b)/i,/^(?:while\b)/i,/^(?:do\b)/i,/^(?:continue\b)/i,/^(?:return\b)/i,/^(?:void\b)/i,/^(?:\+\+)/i,/^(?:--)/i,/^(?:cout\b)/i,/^(?:<<)/i,/^(?:tolower\b)/i,/^(?:toupper\b)/i,/^(?:\.length\(\))/i,/^(?:c_str\b)/i,/^(?:std\b)/i,/^(?:toString\b)/i,/^(?:execute\b)/i,/^(?:typeOf\b)/i,/^(?:round\b)/i,/^(?:endl\b)/i,/^(?:true\b)/i,/^(?:false\b)/i,/^(?:!=)/i,/^(?:==)/i,/^(?:!)/i,/^(?:=)/i,/^(?:<=)/i,/^(?:>=)/i,/^(?:>)/i,/^(?:<)/i,/^(?:&&)/i,/^(?:\|\|)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:%)/i,/^(?:pow\b)/i,/^(?:,)/i,/^(?:;)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\{)/i,/^(?:\})/i,/^(?:\[)/i,/^(?:\])/i,/^(?:\?)/i,/^(?::)/i,/^(?:([a-zA-Z])([a-zA-Z0-9_])*)/i,/^(?:[']\\\\[']|[']\\"[']|[']\\'[']|[']\\n[']|[']\\t[']|[']\\r[']|['].?['])/i,/^(?:[0-9]+\.[0-9]+)/i,/^(?:[0-9]+)/i,/^(?:["])/i,/^(?:[^"\\]+)/i,/^(?:\\")/i,/^(?:\\n)/i,/^(?:\s)/i,/^(?:\\t)/i,/^(?:\\\\)/i,/^(?:\\\\')/i,/^(?:\\r)/i,/^(?:["])/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"string":{"rules":[67,68,69,70,71,72,73,74,75],"inclusive":false},"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,76,77],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = gramatica;
exports.Parser = gramatica.Parser;
exports.parse = function () { return gramatica.parse.apply(gramatica, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}