/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var gramatica = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,16],$V1=[1,18],$V2=[1,27],$V3=[1,28],$V4=[1,29],$V5=[1,30],$V6=[1,31],$V7=[1,20],$V8=[1,26],$V9=[1,21],$Va=[1,23],$Vb=[1,24],$Vc=[1,22],$Vd=[1,25],$Ve=[5,20,30,32,33,34,37,38,72,74,77,81,82,83,84,85,87,88],$Vf=[1,39],$Vg=[1,42],$Vh=[1,43],$Vi=[9,45],$Vj=[30,45,92],$Vk=[1,60],$Vl=[1,71],$Vm=[1,56],$Vn=[1,53],$Vo=[1,54],$Vp=[1,55],$Vq=[1,57],$Vr=[1,58],$Vs=[1,59],$Vt=[1,61],$Vu=[1,62],$Vv=[1,63],$Vw=[1,67],$Vx=[1,68],$Vy=[1,69],$Vz=[1,70],$VA=[9,28,29],$VB=[2,23],$VC=[1,85],$VD=[1,89],$VE=[1,90],$VF=[1,91],$VG=[1,92],$VH=[1,93],$VI=[1,94],$VJ=[1,95],$VK=[1,96],$VL=[1,97],$VM=[1,98],$VN=[1,99],$VO=[1,100],$VP=[1,101],$VQ=[1,102],$VR=[1,103],$VS=[9,21,29,35,39,40,41,42,43,45,47,48,49,50,51,52,54,55,63,65,93,97],$VT=[1,128],$VU=[9,21,29,35,45,54,55,65,93,97],$VV=[9,21,29,35,39,40,41,42,43,45,47,48,49,50,51,52,54,55,65,93,97],$VW=[9,21,29,35,39,40,45,47,48,49,50,51,52,54,55,65,93,97],$VX=[9,21,29,35,45,47,48,49,50,51,52,54,55,65,93,97],$VY=[1,171],$VZ=[1,184],$V_=[1,185],$V$=[74,81,82],$V01=[29,93];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"inicio":3,"instrucciones":4,"EOF":5,"instruccion":6,"impresion":7,"declaracion":8,"R_PUNTOYCOMA":9,"asignacion":10,"if":11,"while":12,"break":13,"do_while":14,"for":15,"continue":16,"switch":17,"arreglo":18,"editar_arreglo":19,"R_COUT":20,"R_DOBLEMENOR":21,"expresion":22,"final_cout":23,"R_ENDL":24,"tipos":25,"declaraciones_varias":26,"asignar_declaracion":27,"R_IGUAL":28,"R_COMA":29,"ID":30,"incre_decre":31,"R_INT":32,"R_DOUBLE":33,"R_STD":34,"R_DOSPUNTOS":35,"R_STRING":36,"R_BOOL":37,"R_CHAR":38,"R_MAS":39,"R_MENOS":40,"R_POR":41,"R_DIV":42,"R_MOD":43,"R_PARIZQ":44,"R_PARDER":45,"R_POW":46,"R_IGUALIGUAL":47,"R_DISTINTO":48,"R_MAYOR":49,"R_MENOR":50,"R_MAYORIGUAL":51,"R_MENORIGUAL":52,"R_NOT":53,"R_AND":54,"R_OR":55,"ENTERO":56,"DECIMAL":57,"CADENA":58,"CARACTER":59,"R_TRUE":60,"R_FALSE":61,"f_nativas":62,"R_LENGTH":63,"casteo":64,"R_TERNARIO":65,"buscar_arreglo":66,"R_TOLOWER":67,"R_TOUPPER":68,"R_ROUND":69,"R_TYPEOF":70,"R_TOSTRING":71,"R_IF":72,"R_LLAVEIZQ":73,"R_LLAVEDER":74,"else_opcional":75,"R_ELSE":76,"R_SWITCH":77,"lista_casos":78,"default":79,"caso":80,"R_DEFAULT":81,"R_CASE":82,"R_WHILE":83,"R_DO":84,"R_FOR":85,"eleccion_for":86,"R_BREAK":87,"R_CONTINUE":88,"signo_incre_decre":89,"R_INC":90,"R_DEC":91,"R_CORCHETEIZQ":92,"R_CORCHETEDER":93,"R_NEW":94,"asignacion_valores_arreglo":95,"p_cstr":96,"R_C_STR":97,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",9:"R_PUNTOYCOMA",20:"R_COUT",21:"R_DOBLEMENOR",24:"R_ENDL",28:"R_IGUAL",29:"R_COMA",30:"ID",32:"R_INT",33:"R_DOUBLE",34:"R_STD",35:"R_DOSPUNTOS",36:"R_STRING",37:"R_BOOL",38:"R_CHAR",39:"R_MAS",40:"R_MENOS",41:"R_POR",42:"R_DIV",43:"R_MOD",44:"R_PARIZQ",45:"R_PARDER",46:"R_POW",47:"R_IGUALIGUAL",48:"R_DISTINTO",49:"R_MAYOR",50:"R_MENOR",51:"R_MAYORIGUAL",52:"R_MENORIGUAL",53:"R_NOT",54:"R_AND",55:"R_OR",56:"ENTERO",57:"DECIMAL",58:"CADENA",59:"CARACTER",60:"R_TRUE",61:"R_FALSE",63:"R_LENGTH",65:"R_TERNARIO",67:"R_TOLOWER",68:"R_TOUPPER",69:"R_ROUND",70:"R_TYPEOF",71:"R_TOSTRING",72:"R_IF",73:"R_LLAVEIZQ",74:"R_LLAVEDER",76:"R_ELSE",77:"R_SWITCH",81:"R_DEFAULT",82:"R_CASE",83:"R_WHILE",84:"R_DO",85:"R_FOR",87:"R_BREAK",88:"R_CONTINUE",90:"R_INC",91:"R_DEC",92:"R_CORCHETEIZQ",93:"R_CORCHETEDER",94:"R_NEW",97:"R_C_STR"},
productions_: [0,[3,2],[4,2],[4,1],[6,1],[6,2],[6,2],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[7,4],[23,3],[23,1],[8,3],[27,2],[27,0],[26,3],[26,1],[10,3],[10,1],[25,1],[25,1],[25,4],[25,1],[25,1],[22,3],[22,3],[22,3],[22,3],[22,3],[22,3],[22,6],[22,3],[22,3],[22,3],[22,3],[22,3],[22,3],[22,2],[22,3],[22,3],[22,2],[22,1],[22,1],[22,1],[22,1],[22,1],[22,1],[22,1],[22,1],[22,2],[22,1],[22,5],[22,1],[62,4],[62,4],[62,4],[62,4],[62,7],[11,8],[75,4],[75,2],[75,0],[17,7],[17,8],[17,7],[78,2],[78,1],[79,3],[80,4],[12,7],[14,9],[15,11],[86,1],[86,1],[13,2],[16,2],[31,2],[89,1],[89,1],[64,4],[18,11],[18,9],[18,6],[96,5],[95,3],[95,1],[66,4],[19,7]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
return $$[$0-1];
break;
case 2:
$$[$0-1].push($$[$0]); this.$=$$[$0-1];
break;
case 3: case 73:
this.$=[$$[$0]];
break;
case 4: case 7: case 8: case 9: case 10: case 11:
this.$=$$[$0];
break;
case 5: case 6:
this.$=$$[$0-1];
break;
case 12: case 13: case 14: case 15: case 20: case 25: case 55: case 57: case 59: case 67: case 79: case 80:
this.$ = $$[$0];
break;
case 16:

      if($$[$0] == true){
            this.$= new Print.default($$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column);
            }else{
                  this.$= new PrintSeguido.default($$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column);
                  } 
      
break;
case 17:
this.$= true;
break;
case 18:
this.$= false;
break;
case 19:

      if($$[$0] == true){
            this.$ = new DeclaracionVacia.default($$[$0-2], _$[$0-2].first_line, _$[$0-2].first_column, $$[$0-1]);
      }else{
            this.$ = new Declaracion.default($$[$0-2], _$[$0-2].first_line, _$[$0-2].first_column, $$[$0-1], $$[$0]);}

      
break;
case 21: case 84:
this.$ = true;
break;
case 22:
 this.$.push($$[$0]); this.$=$$[$0-2];
break;
case 23: case 92:
this.$ = [$$[$0]];
break;
case 24:
this.$ = new AsignacionVar.default($$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 26:
this.$ = new Tipo.default(Tipo.tipoDato.ENTERO);
break;
case 27:
this.$ = new Tipo.default(Tipo.tipoDato.DECIMAL);
break;
case 28:
this.$ = new Tipo.default(Tipo.tipoDato.CADENA);
break;
case 29:
this.$ = new Tipo.default(Tipo.tipoDato.BOOL);
break;
case 30:
this.$ = new Tipo.default(Tipo.tipoDato.CARACTER);
break;
case 31:
this.$ = new Aritmeticas.default(Aritmeticas.Operadores.SUMA, _$[$0-2].first_line, _$[$0-2].first_column, $$[$0-2], $$[$0]);
break;
case 32:
this.$ = new Aritmeticas.default(Aritmeticas.Operadores.RESTA, _$[$0-2].first_line, _$[$0-2].first_column, $$[$0-2], $$[$0]);
break;
case 33:
this.$ = new Aritmeticas.default(Aritmeticas.Operadores.MULTIPLICACION, _$[$0-2].first_line, _$[$0-2].first_column, $$[$0-2], $$[$0]);
break;
case 34:
this.$ = new Aritmeticas.default(Aritmeticas.Operadores.DIVISION, _$[$0-2].first_line, _$[$0-2].first_column, $$[$0-2], $$[$0]);
break;
case 35:
this.$ = new Aritmeticas.default(Aritmeticas.Operadores.MODULO, _$[$0-2].first_line, _$[$0-2].first_column, $$[$0-2], $$[$0]);
break;
case 36: case 66:
this.$ = $$[$0-1];
break;
case 37:
this.$ = new Aritmeticas.default(Aritmeticas.Operadores.POTENCIA, _$[$0-5].first_line, _$[$0-5].first_column, $$[$0-3], $$[$0-1]);
break;
case 38:
this.$ = new Relacionales.default(Relacionales.Operadores.IGUAL, _$[$0-2].first_line, _$[$0-2].first_column, $$[$0-2], $$[$0]);
break;
case 39:
this.$ =  new Relacionales.default(Relacionales.Operadores.DIFERENTE, _$[$0-2].first_line, _$[$0-2].first_column, $$[$0-2], $$[$0]);
break;
case 40:
this.$ = new Relacionales.default(Relacionales.Operadores.MAYOR, _$[$0-2].first_line, _$[$0-2].first_column, $$[$0-2], $$[$0]);
break;
case 41:
this.$ = new Relacionales.default(Relacionales.Operadores.MENOR, _$[$0-2].first_line, _$[$0-2].first_column, $$[$0-2], $$[$0]);
break;
case 42:
this.$ = new Relacionales.default(Relacionales.Operadores.MAYORIGUAL, _$[$0-2].first_line, _$[$0-2].first_column, $$[$0-2], $$[$0]);
break;
case 43:
this.$ = new Relacionales.default(Relacionales.Operadores.MENORIGUAL, _$[$0-2].first_line, _$[$0-2].first_column, $$[$0-2], $$[$0]);
break;
case 44:
this.$ = new Logicos.default(Logicos.Operadores.NOT, _$[$0-1].first_line, _$[$0-1].first_column, $$[$0]);
break;
case 45:
this.$ = new Logicos.default(Logicos.Operadores.AND, _$[$0-2].first_line, _$[$0-2].first_column, $$[$0-2], $$[$0]);
break;
case 46:
this.$ = new Logicos.default(Logicos.Operadores.OR, _$[$0-2].first_line, _$[$0-2].first_column, $$[$0-2], $$[$0]);
break;
case 47:
this.$ = new Aritmeticas.default(Aritmeticas.Operadores.NEG, _$[$0-1].first_line, _$[$0-1].first_column, $$[$0]);
break;
case 48:
this.$ = new Nativo.default(new Tipo.default(Tipo.tipoDato.ENTERO), $$[$0], _$[$0].first_line, _$[$0].first_column );
break;
case 49:
this.$ = new Nativo.default(new Tipo.default(Tipo.tipoDato.DECIMAL), $$[$0], _$[$0].first_line, _$[$0].first_column );
break;
case 50:
this.$ = new Nativo.default(new Tipo.default(Tipo.tipoDato.CADENA), $$[$0], _$[$0].first_line, _$[$0].first_column );
break;
case 51:
this.$ = new AccesoVar.default($$[$0], _$[$0].first_line, _$[$0].first_column);
break;
case 52:
this.$ = new Nativo.default(new Tipo.default(Tipo.tipoDato.CARACTER), $$[$0], _$[$0].first_line, _$[$0].first_column );
break;
case 53:
this.$ = new Nativo.default(new Tipo.default(Tipo.tipoDato.BOOL), true, _$[$0].first_line, _$[$0].first_column );
break;
case 54:
this.$ = new Nativo.default(new Tipo.default(Tipo.tipoDato.BOOL), false, _$[$0].first_line, _$[$0].first_column );
break;
case 56:
this.$ = new FNativas.default(FNativas.Operadores.LENGTH, _$[$0-1].first_line, _$[$0-1].first_column, $$[$0-1]);
break;
case 58:
this.$ = new OpTernario.default($$[$0-4], $$[$0-2], $$[$0], _$[$0-4].first_line, _$[$0-4].first_column);
break;
case 60:
this.$ = new FNativas.default(FNativas.Operadores.TOLOWER, _$[$0-3].first_line, _$[$0-3].first_column, $$[$0-1]);
break;
case 61:
this.$ = new FNativas.default(FNativas.Operadores.TOUPPER, _$[$0-3].first_line, _$[$0-3].first_column, $$[$0-1]);
break;
case 62:
this.$ = new FNativas.default(FNativas.Operadores.ROUND, _$[$0-3].first_line, _$[$0-3].first_column, $$[$0-1]);
break;
case 63:
this.$ = new FNativas.default(FNativas.Operadores.TYPEOF, _$[$0-3].first_line, _$[$0-3].first_column, $$[$0-1]);
break;
case 64:
this.$ = new FNativas.default(FNativas.Operadores.TOSTRING, _$[$0-6].first_line, _$[$0-6].first_column, $$[$0-1]);
break;
case 65:
this.$ = new If.default($$[$0-5], $$[$0-2], $$[$0], _$[$0-7].first_line, _$[$0-7].first_column);
break;
case 68:
this.$ = [];
break;
case 69:
this.$ = new Switch.default($$[$0-4], $$[$0-1], undefined,_$[$0-6].first_line, _$[$0-6].first_column);
break;
case 70:
this.$ = new Switch.default($$[$0-5], $$[$0-2], $$[$0-1], _$[$0-7].first_line, _$[$0-7].first_column);
break;
case 71:
this.$ = new Switch.default($$[$0-4], undefined,$$[$0-1], _$[$0-6].first_line, _$[$0-6].first_column);
break;
case 72:
this.$.push($$[$0]); this.$=$$[$0-1];
break;
case 74:
this.$ = new Default.default($$[$0], _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 75:
 this.$ = new Case.default($$[$0-2], $$[$0], _$[$0-3].first_line, _$[$0-3].first_column);
break;
case 76:
this.$ = new While.default($$[$0-4], $$[$0-1], _$[$0-6].first_line, _$[$0-6].first_column);
break;
case 77:
this.$ = new DoWhile.default($$[$0-2], $$[$0-6], _$[$0-8].first_line, _$[$0-8].first_column);
break;
case 78:
 this.$ = new For.default($$[$0-8],$$[$0-6],$$[$0-4],$$[$0-1],_$[$0-10].first_line,_$[$0-10].first_column);
break;
case 81:
this.$ = new Break.default(_$[$0-1].first_line, _$[$0-1].first_column);
break;
case 82:
this.$ = new Continue.default(_$[$0-1].first_line, _$[$0-1].first_column);
break;
case 83:
this.$ = new IncreDecre.default($$[$0-1], _$[$0-1].first_line, _$[$0-1].first_column,$$[$0]);
break;
case 85:
this.$ = false;
break;
case 86:
this.$ = new Casteo.default($$[$0-2], _$[$0-3].first_line, _$[$0-3].first_column, $$[$0]);
break;
case 87:
this.$ = new DeclArreglo.default(false,$$[$0-10], $$[$0-9], $$[$0-2], _$[$0-10].first_line, _$[$0-10].first_column,$$[$0-4]);
break;
case 88:
this.$ = new DeclArreglo.default(false,$$[$0-8], $$[$0-7], $$[$0-2], _$[$0-8].first_line, _$[$0-8].first_column);
break;
case 89:
this.$ = new DeclArreglo.default(true,$$[$0-5], $$[$0-4], $$[$0], _$[$0-5].first_line, _$[$0-5].first_column,true);
break;
case 90:
this.$ = new FNativas.default(FNativas.Operadores.C_STR, _$[$0-4].first_line, _$[$0-4].first_column, $$[$0-4]);
break;
case 91:
this.$.push($$[$0]); this.$=$$[$0-2];
break;
case 93:
this.$ = new AccesoArr.default($$[$0-3], $$[$0-1],_$[$0-3].first_line, _$[$0-3].first_column);
break;
case 94:
this.$ = new EditarArr.default($$[$0-4], $$[$0-6], $$[$0-1], _$[$0-6].first_line, _$[$0-6].first_column);
break;
}
},
table: [{3:1,4:2,6:3,7:4,8:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:$V0,25:17,30:$V1,31:19,32:$V2,33:$V3,34:$V4,37:$V5,38:$V6,72:$V7,77:$V8,83:$V9,84:$Va,85:$Vb,87:$Vc,88:$Vd},{1:[3]},{5:[1,32],6:33,7:4,8:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:$V0,25:17,30:$V1,31:19,32:$V2,33:$V3,34:$V4,37:$V5,38:$V6,72:$V7,77:$V8,83:$V9,84:$Va,85:$Vb,87:$Vc,88:$Vd},o($Ve,[2,3]),o($Ve,[2,4]),{9:[1,34]},{9:[1,35]},o($Ve,[2,7]),o($Ve,[2,8]),o($Ve,[2,9]),o($Ve,[2,10]),o($Ve,[2,11]),o($Ve,[2,12]),o($Ve,[2,13]),o($Ve,[2,14]),o($Ve,[2,15]),{21:[1,36]},{26:37,30:[1,38]},{28:$Vf,89:41,90:$Vg,91:$Vh,92:[1,40]},o($Vi,[2,25]),{44:[1,44]},{44:[1,45]},{9:[1,46]},{73:[1,47]},{44:[1,48]},{9:[1,49]},{44:[1,50]},o($Vj,[2,26]),o($Vj,[2,27]),{35:[1,51]},o($Vj,[2,29]),o($Vj,[2,30]),{1:[2,1]},o($Ve,[2,2]),o($Ve,[2,5]),o($Ve,[2,6]),{22:52,30:$Vk,34:$Vl,40:$Vm,44:$Vn,46:$Vo,53:$Vp,56:$Vq,57:$Vr,58:$Vs,59:$Vt,60:$Vu,61:$Vv,62:64,64:65,66:66,67:$Vw,68:$Vx,69:$Vy,70:$Vz},{9:[2,21],27:72,28:[1,74],29:[1,73]},o($VA,$VB,{92:[1,75]}),{22:76,30:$Vk,34:$Vl,40:$Vm,44:$Vn,46:$Vo,53:$Vp,56:$Vq,57:$Vr,58:$Vs,59:$Vt,60:$Vu,61:$Vv,62:64,64:65,66:66,67:$Vw,68:$Vx,69:$Vy,70:$Vz},{22:77,30:$Vk,34:$Vl,40:$Vm,44:$Vn,46:$Vo,53:$Vp,56:$Vq,57:$Vr,58:$Vs,59:$Vt,60:$Vu,61:$Vv,62:64,64:65,66:66,67:$Vw,68:$Vx,69:$Vy,70:$Vz},o($Vi,[2,83]),o($Vi,[2,84]),o($Vi,[2,85]),{22:78,30:$Vk,34:$Vl,40:$Vm,44:$Vn,46:$Vo,53:$Vp,56:$Vq,57:$Vr,58:$Vs,59:$Vt,60:$Vu,61:$Vv,62:64,64:65,66:66,67:$Vw,68:$Vx,69:$Vy,70:$Vz},{22:79,30:$Vk,34:$Vl,40:$Vm,44:$Vn,46:$Vo,53:$Vp,56:$Vq,57:$Vr,58:$Vs,59:$Vt,60:$Vu,61:$Vv,62:64,64:65,66:66,67:$Vw,68:$Vx,69:$Vy,70:$Vz},o($Ve,[2,81]),{4:80,6:3,7:4,8:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:$V0,25:17,30:$V1,31:19,32:$V2,33:$V3,34:$V4,37:$V5,38:$V6,72:$V7,77:$V8,83:$V9,84:$Va,85:$Vb,87:$Vc,88:$Vd},{8:82,10:83,25:84,30:$VC,31:19,32:$V2,33:$V3,34:$V4,37:$V5,38:$V6,86:81},o($Ve,[2,82]),{22:86,30:$Vk,34:$Vl,40:$Vm,44:$Vn,46:$Vo,53:$Vp,56:$Vq,57:$Vr,58:$Vs,59:$Vt,60:$Vu,61:$Vv,62:64,64:65,66:66,67:$Vw,68:$Vx,69:$Vy,70:$Vz},{35:[1,87]},{9:[1,105],21:[1,104],23:88,39:$VD,40:$VE,41:$VF,42:$VG,43:$VH,47:$VI,48:$VJ,49:$VK,50:$VL,51:$VM,52:$VN,54:$VO,55:$VP,63:$VQ,65:$VR},{22:106,25:107,30:$Vk,32:$V2,33:$V3,34:[1,108],37:$V5,38:$V6,40:$Vm,44:$Vn,46:$Vo,53:$Vp,56:$Vq,57:$Vr,58:$Vs,59:$Vt,60:$Vu,61:$Vv,62:64,64:65,66:66,67:$Vw,68:$Vx,69:$Vy,70:$Vz},{44:[1,109]},{22:110,30:$Vk,34:$Vl,40:$Vm,44:$Vn,46:$Vo,53:$Vp,56:$Vq,57:$Vr,58:$Vs,59:$Vt,60:$Vu,61:$Vv,62:64,64:65,66:66,67:$Vw,68:$Vx,69:$Vy,70:$Vz},{22:111,30:$Vk,34:$Vl,40:$Vm,44:$Vn,46:$Vo,53:$Vp,56:$Vq,57:$Vr,58:$Vs,59:$Vt,60:$Vu,61:$Vv,62:64,64:65,66:66,67:$Vw,68:$Vx,69:$Vy,70:$Vz},o($VS,[2,48]),o($VS,[2,49]),o($VS,[2,50]),o($VS,[2,51],{92:[1,112]}),o($VS,[2,52]),o($VS,[2,53]),o($VS,[2,54]),o($VS,[2,55]),o($VS,[2,57]),o($VS,[2,59]),{44:[1,113]},{44:[1,114]},{44:[1,115]},{44:[1,116]},{35:[1,117]},{9:[2,19]},{30:[1,118]},{22:119,30:$Vk,34:$Vl,40:$Vm,44:$Vn,46:$Vo,53:$Vp,56:$Vq,57:$Vr,58:$Vs,59:$Vt,60:$Vu,61:$Vv,62:64,64:65,66:66,67:$Vw,68:$Vx,69:$Vy,70:$Vz},{93:[1,120]},o($Vi,[2,24],{39:$VD,40:$VE,41:$VF,42:$VG,43:$VH,47:$VI,48:$VJ,49:$VK,50:$VL,51:$VM,52:$VN,54:$VO,55:$VP,63:$VQ,65:$VR}),{39:$VD,40:$VE,41:$VF,42:$VG,43:$VH,47:$VI,48:$VJ,49:$VK,50:$VL,51:$VM,52:$VN,54:$VO,55:$VP,63:$VQ,65:$VR,93:[1,121]},{39:$VD,40:$VE,41:$VF,42:$VG,43:$VH,45:[1,122],47:$VI,48:$VJ,49:$VK,50:$VL,51:$VM,52:$VN,54:$VO,55:$VP,63:$VQ,65:$VR},{39:$VD,40:$VE,41:$VF,42:$VG,43:$VH,45:[1,123],47:$VI,48:$VJ,49:$VK,50:$VL,51:$VM,52:$VN,54:$VO,55:$VP,63:$VQ,65:$VR},{6:33,7:4,8:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:$V0,25:17,30:$V1,31:19,32:$V2,33:$V3,34:$V4,37:$V5,38:$V6,72:$V7,74:[1,124],77:$V8,83:$V9,84:$Va,85:$Vb,87:$Vc,88:$Vd},{9:[1,125]},{9:[2,79]},{9:[2,80]},{26:37,30:[1,126]},{28:$Vf,89:41,90:$Vg,91:$Vh},{39:$VD,40:$VE,41:$VF,42:$VG,43:$VH,45:[1,127],47:$VI,48:$VJ,49:$VK,50:$VL,51:$VM,52:$VN,54:$VO,55:$VP,63:$VQ,65:$VR},{36:$VT},o($Ve,[2,16]),{22:129,30:$Vk,34:$Vl,40:$Vm,44:$Vn,46:$Vo,53:$Vp,56:$Vq,57:$Vr,58:$Vs,59:$Vt,60:$Vu,61:$Vv,62:64,64:65,66:66,67:$Vw,68:$Vx,69:$Vy,70:$Vz},{22:130,30:$Vk,34:$Vl,40:$Vm,44:$Vn,46:$Vo,53:$Vp,56:$Vq,57:$Vr,58:$Vs,59:$Vt,60:$Vu,61:$Vv,62:64,64:65,66:66,67:$Vw,68:$Vx,69:$Vy,70:$Vz},{22:131,30:$Vk,34:$Vl,40:$Vm,44:$Vn,46:$Vo,53:$Vp,56:$Vq,57:$Vr,58:$Vs,59:$Vt,60:$Vu,61:$Vv,62:64,64:65,66:66,67:$Vw,68:$Vx,69:$Vy,70:$Vz},{22:132,30:$Vk,34:$Vl,40:$Vm,44:$Vn,46:$Vo,53:$Vp,56:$Vq,57:$Vr,58:$Vs,59:$Vt,60:$Vu,61:$Vv,62:64,64:65,66:66,67:$Vw,68:$Vx,69:$Vy,70:$Vz},{22:133,30:$Vk,34:$Vl,40:$Vm,44:$Vn,46:$Vo,53:$Vp,56:$Vq,57:$Vr,58:$Vs,59:$Vt,60:$Vu,61:$Vv,62:64,64:65,66:66,67:$Vw,68:$Vx,69:$Vy,70:$Vz},{22:134,30:$Vk,34:$Vl,40:$Vm,44:$Vn,46:$Vo,53:$Vp,56:$Vq,57:$Vr,58:$Vs,59:$Vt,60:$Vu,61:$Vv,62:64,64:65,66:66,67:$Vw,68:$Vx,69:$Vy,70:$Vz},{22:135,30:$Vk,34:$Vl,40:$Vm,44:$Vn,46:$Vo,53:$Vp,56:$Vq,57:$Vr,58:$Vs,59:$Vt,60:$Vu,61:$Vv,62:64,64:65,66:66,67:$Vw,68:$Vx,69:$Vy,70:$Vz},{22:136,30:$Vk,34:$Vl,40:$Vm,44:$Vn,46:$Vo,53:$Vp,56:$Vq,57:$Vr,58:$Vs,59:$Vt,60:$Vu,61:$Vv,62:64,64:65,66:66,67:$Vw,68:$Vx,69:$Vy,70:$Vz},{22:137,30:$Vk,34:$Vl,40:$Vm,44:$Vn,46:$Vo,53:$Vp,56:$Vq,57:$Vr,58:$Vs,59:$Vt,60:$Vu,61:$Vv,62:64,64:65,66:66,67:$Vw,68:$Vx,69:$Vy,70:$Vz},{22:138,30:$Vk,34:$Vl,40:$Vm,44:$Vn,46:$Vo,53:$Vp,56:$Vq,57:$Vr,58:$Vs,59:$Vt,60:$Vu,61:$Vv,62:64,64:65,66:66,67:$Vw,68:$Vx,69:$Vy,70:$Vz},{22:139,30:$Vk,34:$Vl,40:$Vm,44:$Vn,46:$Vo,53:$Vp,56:$Vq,57:$Vr,58:$Vs,59:$Vt,60:$Vu,61:$Vv,62:64,64:65,66:66,67:$Vw,68:$Vx,69:$Vy,70:$Vz},{22:140,30:$Vk,34:$Vl,40:$Vm,44:$Vn,46:$Vo,53:$Vp,56:$Vq,57:$Vr,58:$Vs,59:$Vt,60:$Vu,61:$Vv,62:64,64:65,66:66,67:$Vw,68:$Vx,69:$Vy,70:$Vz},{22:141,30:$Vk,34:$Vl,40:$Vm,44:$Vn,46:$Vo,53:$Vp,56:$Vq,57:$Vr,58:$Vs,59:$Vt,60:$Vu,61:$Vv,62:64,64:65,66:66,67:$Vw,68:$Vx,69:$Vy,70:$Vz},o($VS,[2,56]),{22:142,30:$Vk,34:$Vl,40:$Vm,44:$Vn,46:$Vo,53:$Vp,56:$Vq,57:$Vr,58:$Vs,59:$Vt,60:$Vu,61:$Vv,62:64,64:65,66:66,67:$Vw,68:$Vx,69:$Vy,70:$Vz},{24:[1,143]},o($Ve,[2,18]),{39:$VD,40:$VE,41:$VF,42:$VG,43:$VH,45:[1,144],47:$VI,48:$VJ,49:$VK,50:$VL,51:$VM,52:$VN,54:$VO,55:$VP,63:$VQ,65:$VR},{45:[1,145]},{35:[1,146]},{22:147,30:$Vk,34:$Vl,40:$Vm,44:$Vn,46:$Vo,53:$Vp,56:$Vq,57:$Vr,58:$Vs,59:$Vt,60:$Vu,61:$Vv,62:64,64:65,66:66,67:$Vw,68:$Vx,69:$Vy,70:$Vz},o($VU,[2,44],{39:$VD,40:$VE,41:$VF,42:$VG,43:$VH,47:$VI,48:$VJ,49:$VK,50:$VL,51:$VM,52:$VN,63:$VQ}),o($VV,[2,47],{63:$VQ}),{22:148,30:$Vk,34:$Vl,40:$Vm,44:$Vn,46:$Vo,53:$Vp,56:$Vq,57:$Vr,58:$Vs,59:$Vt,60:$Vu,61:$Vv,62:64,64:65,66:66,67:$Vw,68:$Vx,69:$Vy,70:$Vz},{22:149,30:$Vk,34:$Vl,40:$Vm,44:$Vn,46:$Vo,53:$Vp,56:$Vq,57:$Vr,58:$Vs,59:$Vt,60:$Vu,61:$Vv,62:64,64:65,66:66,67:$Vw,68:$Vx,69:$Vy,70:$Vz},{22:150,30:$Vk,34:$Vl,40:$Vm,44:$Vn,46:$Vo,53:$Vp,56:$Vq,57:$Vr,58:$Vs,59:$Vt,60:$Vu,61:$Vv,62:64,64:65,66:66,67:$Vw,68:$Vx,69:$Vy,70:$Vz},{22:151,30:$Vk,34:$Vl,40:$Vm,44:$Vn,46:$Vo,53:$Vp,56:$Vq,57:$Vr,58:$Vs,59:$Vt,60:$Vu,61:$Vv,62:64,64:65,66:66,67:$Vw,68:$Vx,69:$Vy,70:$Vz},{22:152,30:$Vk,34:$Vl,40:$Vm,44:$Vn,46:$Vo,53:$Vp,56:$Vq,57:$Vr,58:$Vs,59:$Vt,60:$Vu,61:$Vv,62:64,64:65,66:66,67:$Vw,68:$Vx,69:$Vy,70:$Vz},{35:[1,153]},o($VA,[2,22]),{9:[2,20],39:$VD,40:$VE,41:$VF,42:$VG,43:$VH,47:$VI,48:$VJ,49:$VK,50:$VL,51:$VM,52:$VN,54:$VO,55:$VP,63:$VQ,65:$VR},{28:[1,154]},{28:[1,155]},{73:[1,156]},{73:[1,157]},{83:[1,158]},{22:159,30:$Vk,34:$Vl,40:$Vm,44:$Vn,46:$Vo,53:$Vp,56:$Vq,57:$Vr,58:$Vs,59:$Vt,60:$Vu,61:$Vv,62:64,64:65,66:66,67:$Vw,68:$Vx,69:$Vy,70:$Vz},o($VA,$VB),{73:[1,160]},o($Vj,[2,28]),o($VW,[2,31],{41:$VF,42:$VG,43:$VH,63:$VQ}),o($VW,[2,32],{41:$VF,42:$VG,43:$VH,63:$VQ}),o($VV,[2,33],{63:$VQ}),o($VV,[2,34],{63:$VQ}),o($VV,[2,35],{63:$VQ}),o($VX,[2,38],{39:$VD,40:$VE,41:$VF,42:$VG,43:$VH,63:$VQ}),o($VX,[2,39],{39:$VD,40:$VE,41:$VF,42:$VG,43:$VH,63:$VQ}),o($VX,[2,40],{39:$VD,40:$VE,41:$VF,42:$VG,43:$VH,63:$VQ}),o($VX,[2,41],{39:$VD,40:$VE,41:$VF,42:$VG,43:$VH,63:$VQ}),o($VX,[2,42],{39:$VD,40:$VE,41:$VF,42:$VG,43:$VH,63:$VQ}),o($VX,[2,43],{39:$VD,40:$VE,41:$VF,42:$VG,43:$VH,63:$VQ}),o($VU,[2,45],{39:$VD,40:$VE,41:$VF,42:$VG,43:$VH,47:$VI,48:$VJ,49:$VK,50:$VL,51:$VM,52:$VN,63:$VQ}),o([9,21,29,35,45,55,65,93,97],[2,46],{39:$VD,40:$VE,41:$VF,42:$VG,43:$VH,47:$VI,48:$VJ,49:$VK,50:$VL,51:$VM,52:$VN,54:$VO,63:$VQ}),{35:[1,161],39:$VD,40:$VE,41:$VF,42:$VG,43:$VH,47:$VI,48:$VJ,49:$VK,50:$VL,51:$VM,52:$VN,54:$VO,55:$VP,63:$VQ,65:$VR},{9:[1,162]},o($VS,[2,36]),{22:163,30:$Vk,34:$Vl,40:$Vm,44:$Vn,46:$Vo,53:$Vp,56:$Vq,57:$Vr,58:$Vs,59:$Vt,60:$Vu,61:$Vv,62:64,64:65,66:66,67:$Vw,68:$Vx,69:$Vy,70:$Vz},{35:[1,164]},{29:[1,165],39:$VD,40:$VE,41:$VF,42:$VG,43:$VH,47:$VI,48:$VJ,49:$VK,50:$VL,51:$VM,52:$VN,54:$VO,55:$VP,63:$VQ,65:$VR},{39:$VD,40:$VE,41:$VF,42:$VG,43:$VH,47:$VI,48:$VJ,49:$VK,50:$VL,51:$VM,52:$VN,54:$VO,55:$VP,63:$VQ,65:$VR,93:[1,166]},{39:$VD,40:$VE,41:$VF,42:$VG,43:$VH,45:[1,167],47:$VI,48:$VJ,49:$VK,50:$VL,51:$VM,52:$VN,54:$VO,55:$VP,63:$VQ,65:$VR},{39:$VD,40:$VE,41:$VF,42:$VG,43:$VH,45:[1,168],47:$VI,48:$VJ,49:$VK,50:$VL,51:$VM,52:$VN,54:$VO,55:$VP,63:$VQ,65:$VR},{39:$VD,40:$VE,41:$VF,42:$VG,43:$VH,45:[1,169],47:$VI,48:$VJ,49:$VK,50:$VL,51:$VM,52:$VN,54:$VO,55:$VP,63:$VQ,65:$VR},{39:$VD,40:$VE,41:$VF,42:$VG,43:$VH,45:[1,170],47:$VI,48:$VJ,49:$VK,50:$VL,51:$VM,52:$VN,54:$VO,55:$VP,63:$VQ,65:$VR},{71:$VY},{22:175,30:$Vk,34:$Vl,40:$Vm,44:$Vn,46:$Vo,53:$Vp,56:$Vq,57:$Vr,58:$Vs,59:$Vt,60:$Vu,61:$Vv,62:64,64:65,66:66,67:$Vw,68:$Vx,69:$Vy,70:$Vz,92:[1,173],94:[1,172],96:174},{22:176,30:$Vk,34:$Vl,40:$Vm,44:$Vn,46:$Vo,53:$Vp,56:$Vq,57:$Vr,58:$Vs,59:$Vt,60:$Vu,61:$Vv,62:64,64:65,66:66,67:$Vw,68:$Vx,69:$Vy,70:$Vz},{4:177,6:3,7:4,8:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:$V0,25:17,30:$V1,31:19,32:$V2,33:$V3,34:$V4,37:$V5,38:$V6,72:$V7,77:$V8,83:$V9,84:$Va,85:$Vb,87:$Vc,88:$Vd},{4:178,6:3,7:4,8:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:$V0,25:17,30:$V1,31:19,32:$V2,33:$V3,34:$V4,37:$V5,38:$V6,72:$V7,77:$V8,83:$V9,84:$Va,85:$Vb,87:$Vc,88:$Vd},{44:[1,179]},{9:[1,180],39:$VD,40:$VE,41:$VF,42:$VG,43:$VH,47:$VI,48:$VJ,49:$VK,50:$VL,51:$VM,52:$VN,54:$VO,55:$VP,63:$VQ,65:$VR},{78:181,79:182,80:183,81:$VZ,82:$V_},{22:186,30:$Vk,34:$Vl,40:$Vm,44:$Vn,46:$Vo,53:$Vp,56:$Vq,57:$Vr,58:$Vs,59:$Vt,60:$Vu,61:$Vv,62:64,64:65,66:66,67:$Vw,68:$Vx,69:$Vy,70:$Vz},o($Ve,[2,17]),o($VV,[2,86],{63:$VQ}),{36:$VT,71:$VY},{22:187,30:$Vk,34:$Vl,40:$Vm,44:$Vn,46:$Vo,53:$Vp,56:$Vq,57:$Vr,58:$Vs,59:$Vt,60:$Vu,61:$Vv,62:64,64:65,66:66,67:$Vw,68:$Vx,69:$Vy,70:$Vz},o($VS,[2,93]),o($VS,[2,60]),o($VS,[2,61]),o($VS,[2,62]),o($VS,[2,63]),{44:[1,188]},{25:189,32:$V2,33:$V3,34:$V4,37:$V5,38:$V6},{22:191,30:$Vk,34:$Vl,40:$Vm,44:$Vn,46:$Vo,53:$Vp,56:$Vq,57:$Vr,58:$Vs,59:$Vt,60:$Vu,61:$Vv,62:64,64:65,66:66,67:$Vw,68:$Vx,69:$Vy,70:$Vz,95:190},o($Ve,[2,89]),{39:$VD,40:$VE,41:$VF,42:$VG,43:$VH,47:$VI,48:$VJ,49:$VK,50:$VL,51:$VM,52:$VN,54:$VO,55:$VP,63:$VQ,65:$VR,97:[1,192]},{9:[1,193],39:$VD,40:$VE,41:$VF,42:$VG,43:$VH,47:$VI,48:$VJ,49:$VK,50:$VL,51:$VM,52:$VN,54:$VO,55:$VP,63:$VQ,65:$VR},{6:33,7:4,8:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:$V0,25:17,30:$V1,31:19,32:$V2,33:$V3,34:$V4,37:$V5,38:$V6,72:$V7,74:[1,194],77:$V8,83:$V9,84:$Va,85:$Vb,87:$Vc,88:$Vd},{6:33,7:4,8:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:$V0,25:17,30:$V1,31:19,32:$V2,33:$V3,34:$V4,37:$V5,38:$V6,72:$V7,74:[1,195],77:$V8,83:$V9,84:$Va,85:$Vb,87:$Vc,88:$Vd},{22:196,30:$Vk,34:$Vl,40:$Vm,44:$Vn,46:$Vo,53:$Vp,56:$Vq,57:$Vr,58:$Vs,59:$Vt,60:$Vu,61:$Vv,62:64,64:65,66:66,67:$Vw,68:$Vx,69:$Vy,70:$Vz},{10:197,30:$VC,31:19},{74:[1,198],79:199,80:200,81:$VZ,82:$V_},{74:[1,201]},o($V$,[2,73]),{35:[1,202]},{22:203,30:$Vk,34:$Vl,40:$Vm,44:$Vn,46:$Vo,53:$Vp,56:$Vq,57:$Vr,58:$Vs,59:$Vt,60:$Vu,61:$Vv,62:64,64:65,66:66,67:$Vw,68:$Vx,69:$Vy,70:$Vz},o([9,21,29,35,45,65,93,97],[2,58],{39:$VD,40:$VE,41:$VF,42:$VG,43:$VH,47:$VI,48:$VJ,49:$VK,50:$VL,51:$VM,52:$VN,54:$VO,55:$VP,63:$VQ}),{39:$VD,40:$VE,41:$VF,42:$VG,43:$VH,45:[1,204],47:$VI,48:$VJ,49:$VK,50:$VL,51:$VM,52:$VN,54:$VO,55:$VP,63:$VQ,65:$VR},{22:205,30:$Vk,34:$Vl,40:$Vm,44:$Vn,46:$Vo,53:$Vp,56:$Vq,57:$Vr,58:$Vs,59:$Vt,60:$Vu,61:$Vv,62:64,64:65,66:66,67:$Vw,68:$Vx,69:$Vy,70:$Vz},{92:[1,206]},{29:[1,208],93:[1,207]},o($V01,[2,92],{39:$VD,40:$VE,41:$VF,42:$VG,43:$VH,47:$VI,48:$VJ,49:$VK,50:$VL,51:$VM,52:$VN,54:$VO,55:$VP,63:$VQ,65:$VR}),{44:[1,209]},o($Ve,[2,94]),o($Ve,[2,68],{75:210,76:[1,211]}),o($Ve,[2,76]),{39:$VD,40:$VE,41:$VF,42:$VG,43:$VH,45:[1,212],47:$VI,48:$VJ,49:$VK,50:$VL,51:$VM,52:$VN,54:$VO,55:$VP,63:$VQ,65:$VR},{45:[1,213]},o($Ve,[2,69]),{74:[1,214]},o($V$,[2,72]),o($Ve,[2,71]),{4:215,6:3,7:4,8:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:$V0,25:17,30:$V1,31:19,32:$V2,33:$V3,34:$V4,37:$V5,38:$V6,72:$V7,77:$V8,83:$V9,84:$Va,85:$Vb,87:$Vc,88:$Vd},{35:[1,216],39:$VD,40:$VE,41:$VF,42:$VG,43:$VH,47:$VI,48:$VJ,49:$VK,50:$VL,51:$VM,52:$VN,54:$VO,55:$VP,63:$VQ,65:$VR},o($VS,[2,37]),{39:$VD,40:$VE,41:$VF,42:$VG,43:$VH,45:[1,217],47:$VI,48:$VJ,49:$VK,50:$VL,51:$VM,52:$VN,54:$VO,55:$VP,63:$VQ,65:$VR},{22:218,30:$Vk,34:$Vl,40:$Vm,44:$Vn,46:$Vo,53:$Vp,56:$Vq,57:$Vr,58:$Vs,59:$Vt,60:$Vu,61:$Vv,62:64,64:65,66:66,67:$Vw,68:$Vx,69:$Vy,70:$Vz},{9:[1,219]},{22:220,30:$Vk,34:$Vl,40:$Vm,44:$Vn,46:$Vo,53:$Vp,56:$Vq,57:$Vr,58:$Vs,59:$Vt,60:$Vu,61:$Vv,62:64,64:65,66:66,67:$Vw,68:$Vx,69:$Vy,70:$Vz},{45:[1,221]},o($Ve,[2,65]),{11:223,72:$V7,73:[1,222]},{9:[1,224]},{73:[1,225]},o($Ve,[2,70]),{6:33,7:4,8:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:$V0,25:17,30:$V1,31:19,32:$V2,33:$V3,34:$V4,37:$V5,38:$V6,72:$V7,74:[2,74],77:$V8,83:$V9,84:$Va,85:$Vb,87:$Vc,88:$Vd},{4:226,6:3,7:4,8:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:$V0,25:17,30:$V1,31:19,32:$V2,33:$V3,34:$V4,37:$V5,38:$V6,72:$V7,77:$V8,83:$V9,84:$Va,85:$Vb,87:$Vc,88:$Vd},o($VS,[2,64]),{39:$VD,40:$VE,41:$VF,42:$VG,43:$VH,47:$VI,48:$VJ,49:$VK,50:$VL,51:$VM,52:$VN,54:$VO,55:$VP,63:$VQ,65:$VR,93:[1,227]},o($Ve,[2,88]),o($V01,[2,91],{39:$VD,40:$VE,41:$VF,42:$VG,43:$VH,47:$VI,48:$VJ,49:$VK,50:$VL,51:$VM,52:$VN,54:$VO,55:$VP,63:$VQ,65:$VR}),{9:[1,228]},{4:229,6:3,7:4,8:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:$V0,25:17,30:$V1,31:19,32:$V2,33:$V3,34:$V4,37:$V5,38:$V6,72:$V7,77:$V8,83:$V9,84:$Va,85:$Vb,87:$Vc,88:$Vd},o($Ve,[2,67]),o($Ve,[2,77]),{4:230,6:3,7:4,8:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:$V0,25:17,30:$V1,31:19,32:$V2,33:$V3,34:$V4,37:$V5,38:$V6,72:$V7,77:$V8,83:$V9,84:$Va,85:$Vb,87:$Vc,88:$Vd},o($V$,[2,75],{7:4,8:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,25:17,31:19,6:33,20:$V0,30:$V1,32:$V2,33:$V3,34:$V4,37:$V5,38:$V6,72:$V7,77:$V8,83:$V9,84:$Va,85:$Vb,87:$Vc,88:$Vd}),{9:[1,231]},o($Ve,[2,90]),{6:33,7:4,8:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:$V0,25:17,30:$V1,31:19,32:$V2,33:$V3,34:$V4,37:$V5,38:$V6,72:$V7,74:[1,232],77:$V8,83:$V9,84:$Va,85:$Vb,87:$Vc,88:$Vd},{6:33,7:4,8:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:$V0,25:17,30:$V1,31:19,32:$V2,33:$V3,34:$V4,37:$V5,38:$V6,72:$V7,74:[1,233],77:$V8,83:$V9,84:$Va,85:$Vb,87:$Vc,88:$Vd},o($Ve,[2,87]),o($Ve,[2,66]),o($Ve,[2,78])],
defaultActions: {32:[2,1],72:[2,19],82:[2,79],83:[2,80]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};


const Tipo = require('../build/controllers/simbol/tipo')
const Nativo = require('../build/controllers/expr/Nativo')
const Aritmeticas = require('../build/controllers/expr/Aritmeticas')
const Relacionales = require('../build/controllers/expr/Relacionales')
const Logicos = require('../build/controllers/expr/Logicos')

const DeclaracionVacia = require('../build/controllers/instruc/declaracionVacia')
const Print = require('../build/controllers/instruc/print')
const PrintSeguido = require('../build/controllers/instruc/printSeguido')
const Declaracion = require('../build/controllers/instruc/declaracion')
const AccesoVar = require('../build/controllers/expr/accesoVar')
const AsignacionVar = require('../build/controllers/instruc/asignacionVar')
const If = require('../build/controllers/instruc/if')
const FNativas = require('../build/controllers/expr/fNativas')
const While = require('../build/controllers/instruc/while')
const Break = require('../build/controllers/instruc/Break')
const DoWhile = require('../build/controllers/instruc/doWhile')
const IncreDecre = require('../build/controllers/instruc/increDecre')
const Casteo = require('../build/controllers/expr/casteo')
const For = require('../build/controllers/instruc/for')
const Continue = require('../build/controllers/instruc/Continue')
const OpTernario = require('../build/controllers/instruc/opTernario')
const Switch = require('../build/controllers/instruc/switch')
const Case = require('../build/controllers/instruc/case')
const Default = require('../build/controllers/instruc/default')
const Errores = require('../build/controllers/excep/errores')
const DeclArreglo = require('../build/controllers/instruc/declArreglo')
const AccesoArr = require('../build/controllers/expr/accesoArr')
const EditarArr = require('../build/controllers/instruc/editarArr')

const arb = require('../build/controllers/simbol/arbol')
const indexRef = require('../build/controllers/indexController')

var cadena  = '';

/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:// Ignorar espacios en blanco
break;
case 1:
break;
case 2:
break;
case 3:return 32;
break;
case 4:return 33;
break;
case 5:return 38;
break;
case 6:return 36;
break;
case 7:return 37;
break;
case 8:return 72;
break;
case 9:return 76;
break;
case 10:return 77;
break;
case 11:return 82;
break;
case 12:return 81;
break;
case 13:return 87;
break;
case 14:return 85;
break;
case 15:return 83;
break;
case 16:return 84;
break;
case 17:return 88;
break;
case 18:return 'R_RETURN';
break;
case 19:return 'R_VOID';
break;
case 20:return 90;
break;
case 21:return 91;
break;
case 22:return 20;
break;
case 23:return 21
break;
case 24:return 67;
break;
case 25:return 68;
break;
case 26:return 63;
break;
case 27:return 97;
break;
case 28:return 34;
break;
case 29:return 71;
break;
case 30:return 'R_EXECUTE';
break;
case 31:return 70;
break;
case 32:return 69;
break;
case 33:return 24;
break;
case 34:return 94;
break;
case 35:return 60;
break;
case 36:return 61;
break;
case 37:return 48;
break;
case 38:return 47;
break;
case 39:return 53;
break;
case 40:return 28;
break;
case 41:return 52;
break;
case 42:return 51;
break;
case 43:return 49;
break;
case 44:return 50;
break;
case 45:return 54;
break;
case 46:return 55;
break;
case 47:return 39;
break;
case 48:return 40;
break;
case 49:return 41;
break;
case 50:return 42;
break;
case 51:return 43;
break;
case 52:return 46;
break;
case 53:return 29;
break;
case 54:return 9;
break;
case 55:return 44;
break;
case 56:return 45;
break;
case 57:return 73;
break;
case 58:return 74;
break;
case 59:return 92;
break;
case 60:return 93;
break;
case 61:return 65;
break;
case 62:return 35;
break;
case 63:return 30;
break;
case 64:return 59;
break;
case 65:return 57;
break;
case 66:return 56;
break;
case 67: cadena = ''; this.begin("string"); 
break;
case 68: cadena += yy_.yytext; 
break;
case 69: cadena += "\""; 
break;
case 70: cadena += "\n"; 
break;
case 71: cadena += " ";  
break;
case 72: cadena += "\t"; 
break;
case 73: cadena += "\\"; 
break;
case 74: cadena += "\'"; 
break;
case 75: cadena += "\r"; 
break;
case 76: yy_.yytext = cadena; this.popState(); return 58; 
break;
case 77:return 5;
break;
case 78: let error = new Errores.default("Léxico",("Token no reconocido: "+yy_.yytext), yy_.yylloc.first_line, yy_.yylloc.first_column);    
                              indexRef.lista_errores.push(error);                             
                        
break;
}
},
rules: [/^(?:\s+)/i,/^(?:\/\/.*)/i,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/i,/^(?:int\b)/i,/^(?:double\b)/i,/^(?:char\b)/i,/^(?:string\b)/i,/^(?:bool\b)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:switch\b)/i,/^(?:case\b)/i,/^(?:default\b)/i,/^(?:break\b)/i,/^(?:for\b)/i,/^(?:while\b)/i,/^(?:do\b)/i,/^(?:continue\b)/i,/^(?:return\b)/i,/^(?:void\b)/i,/^(?:\+\+)/i,/^(?:--)/i,/^(?:cout\b)/i,/^(?:<<)/i,/^(?:tolower\b)/i,/^(?:toupper\b)/i,/^(?:\.length\(\))/i,/^(?:\.c_str\b)/i,/^(?:std\b)/i,/^(?:toString\b)/i,/^(?:execute\b)/i,/^(?:typeOf\b)/i,/^(?:round\b)/i,/^(?:endl\b)/i,/^(?:new\b)/i,/^(?:true\b)/i,/^(?:false\b)/i,/^(?:!=)/i,/^(?:==)/i,/^(?:!)/i,/^(?:=)/i,/^(?:<=)/i,/^(?:>=)/i,/^(?:>)/i,/^(?:<)/i,/^(?:&&)/i,/^(?:\|\|)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:%)/i,/^(?:pow\b)/i,/^(?:,)/i,/^(?:;)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\{)/i,/^(?:\})/i,/^(?:\[)/i,/^(?:\])/i,/^(?:\?)/i,/^(?::)/i,/^(?:([a-zA-Z])([a-zA-Z0-9_])*)/i,/^(?:[']\\\\[']|[']\\"[']|[']\\'[']|[']\\n[']|[']\\t[']|[']\\r[']|['].?['])/i,/^(?:[0-9]+\.[0-9]+)/i,/^(?:[0-9]+)/i,/^(?:["])/i,/^(?:[^"\\]+)/i,/^(?:\\")/i,/^(?:\\n)/i,/^(?:\s)/i,/^(?:\\t)/i,/^(?:\\\\)/i,/^(?:\\\\')/i,/^(?:\\r)/i,/^(?:["])/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"string":{"rules":[68,69,70,71,72,73,74,75,76],"inclusive":false},"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,77,78],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = gramatica;
exports.Parser = gramatica.Parser;
exports.parse = function () { return gramatica.parse.apply(gramatica, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}