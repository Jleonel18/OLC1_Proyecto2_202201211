/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var gramatica = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,20],$V1=[1,22],$V2=[1,33],$V3=[1,34],$V4=[1,35],$V5=[1,36],$V6=[1,37],$V7=[1,38],$V8=[1,24],$V9=[1,30],$Va=[1,25],$Vb=[1,27],$Vc=[1,28],$Vd=[1,26],$Ve=[1,29],$Vf=[1,31],$Vg=[1,32],$Vh=[5,24,34,36,37,38,41,42,43,78,80,82,86,87,88,89,90,92,93,104,105],$Vi=[1,46],$Vj=[1,50],$Vk=[1,51],$Vl=[9,50],$Vm=[1,69],$Vn=[1,80],$Vo=[1,65],$Vp=[1,62],$Vq=[1,63],$Vr=[1,64],$Vs=[1,66],$Vt=[1,67],$Vu=[1,68],$Vv=[1,70],$Vw=[1,71],$Vx=[1,72],$Vy=[1,76],$Vz=[1,77],$VA=[1,78],$VB=[1,79],$VC=[34,50,97],$VD=[9,32,33],$VE=[2,27],$VF=[1,100],$VG=[1,104],$VH=[1,105],$VI=[1,106],$VJ=[1,107],$VK=[1,108],$VL=[1,109],$VM=[1,110],$VN=[1,111],$VO=[1,112],$VP=[1,113],$VQ=[1,114],$VR=[1,115],$VS=[1,116],$VT=[1,117],$VU=[1,118],$VV=[9,25,33,39,44,45,46,47,48,50,52,53,54,55,56,57,59,60,68,70,98,102],$VW=[1,144],$VX=[33,50],$VY=[9,25,33,39,50,59,60,70,98,102],$VZ=[9,25,33,39,44,45,46,47,48,50,52,53,54,55,56,57,59,60,70,98,102],$V_=[1,179],$V$=[9,25,33,39,44,45,50,52,53,54,55,56,57,59,60,70,98,102],$V01=[9,25,33,39,50,52,53,54,55,56,57,59,60,70,98,102],$V11=[1,206],$V21=[1,223],$V31=[1,224],$V41=[80,86,87],$V51=[33,98];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"inicio":3,"instrucciones":4,"EOF":5,"instruccion":6,"impresion":7,"declaracion":8,"R_PUNTOYCOMA":9,"asignacion":10,"if":11,"while":12,"break":13,"do_while":14,"for":15,"continue":16,"switch":17,"arreglo":18,"editar_arreglo":19,"metodo":20,"execute":21,"llamada":22,"return":23,"R_COUT":24,"R_DOBLEMENOR":25,"expresion":26,"final_cout":27,"R_ENDL":28,"tipos":29,"declaraciones_varias":30,"asignar_declaracion":31,"R_IGUAL":32,"R_COMA":33,"ID":34,"incre_decre":35,"R_INT":36,"R_DOUBLE":37,"R_STD":38,"R_DOSPUNTOS":39,"R_STRING":40,"R_BOOL":41,"R_CHAR":42,"R_VOID":43,"R_MAS":44,"R_MENOS":45,"R_POR":46,"R_DIV":47,"R_MOD":48,"R_PARIZQ":49,"R_PARDER":50,"R_POW":51,"R_IGUALIGUAL":52,"R_DISTINTO":53,"R_MAYOR":54,"R_MENOR":55,"R_MAYORIGUAL":56,"R_MENORIGUAL":57,"R_NOT":58,"R_AND":59,"R_OR":60,"ENTERO":61,"DECIMAL":62,"CADENA":63,"CARACTER":64,"R_TRUE":65,"R_FALSE":66,"f_nativas":67,"R_LENGTH":68,"casteo":69,"R_TERNARIO":70,"buscar_arreglo":71,"parametros_llamada":72,"R_TOLOWER":73,"R_TOUPPER":74,"R_ROUND":75,"R_TYPEOF":76,"R_TOSTRING":77,"R_IF":78,"R_LLAVEIZQ":79,"R_LLAVEDER":80,"R_ELSE":81,"R_SWITCH":82,"lista_casos":83,"default":84,"caso":85,"R_DEFAULT":86,"R_CASE":87,"R_WHILE":88,"R_DO":89,"R_FOR":90,"eleccion_for":91,"R_BREAK":92,"R_CONTINUE":93,"signo_incre_decre":94,"R_INC":95,"R_DEC":96,"R_CORCHETEIZQ":97,"R_CORCHETEDER":98,"R_NEW":99,"asignacion_valores_arreglo":100,"p_cstr":101,"R_C_STR":102,"parametros":103,"R_EXECUTE":104,"R_RETURN":105,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",9:"R_PUNTOYCOMA",24:"R_COUT",25:"R_DOBLEMENOR",28:"R_ENDL",32:"R_IGUAL",33:"R_COMA",34:"ID",36:"R_INT",37:"R_DOUBLE",38:"R_STD",39:"R_DOSPUNTOS",40:"R_STRING",41:"R_BOOL",42:"R_CHAR",43:"R_VOID",44:"R_MAS",45:"R_MENOS",46:"R_POR",47:"R_DIV",48:"R_MOD",49:"R_PARIZQ",50:"R_PARDER",51:"R_POW",52:"R_IGUALIGUAL",53:"R_DISTINTO",54:"R_MAYOR",55:"R_MENOR",56:"R_MAYORIGUAL",57:"R_MENORIGUAL",58:"R_NOT",59:"R_AND",60:"R_OR",61:"ENTERO",62:"DECIMAL",63:"CADENA",64:"CARACTER",65:"R_TRUE",66:"R_FALSE",68:"R_LENGTH",70:"R_TERNARIO",73:"R_TOLOWER",74:"R_TOUPPER",75:"R_ROUND",76:"R_TYPEOF",77:"R_TOSTRING",78:"R_IF",79:"R_LLAVEIZQ",80:"R_LLAVEDER",81:"R_ELSE",82:"R_SWITCH",86:"R_DEFAULT",87:"R_CASE",88:"R_WHILE",89:"R_DO",90:"R_FOR",92:"R_BREAK",93:"R_CONTINUE",95:"R_INC",96:"R_DEC",97:"R_CORCHETEIZQ",98:"R_CORCHETEDER",99:"R_NEW",102:"R_C_STR",104:"R_EXECUTE",105:"R_RETURN"},
productions_: [0,[3,2],[4,2],[4,1],[6,1],[6,2],[6,2],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[7,4],[27,3],[27,1],[8,3],[31,2],[31,0],[30,3],[30,1],[10,3],[10,1],[29,1],[29,1],[29,4],[29,1],[29,1],[29,1],[26,3],[26,3],[26,3],[26,3],[26,3],[26,3],[26,6],[26,3],[26,3],[26,3],[26,3],[26,3],[26,3],[26,2],[26,3],[26,3],[26,2],[26,1],[26,1],[26,1],[26,1],[26,1],[26,1],[26,1],[26,1],[26,2],[26,1],[26,5],[26,1],[26,4],[67,4],[67,4],[67,4],[67,4],[67,7],[11,7],[11,11],[11,9],[17,7],[17,8],[17,7],[83,2],[83,1],[84,3],[85,4],[12,7],[14,9],[15,11],[91,1],[91,1],[13,2],[16,2],[35,2],[94,1],[94,1],[69,4],[18,11],[18,9],[18,6],[101,5],[100,3],[100,1],[71,4],[19,7],[20,8],[20,7],[103,4],[103,2],[21,6],[21,5],[72,3],[72,1],[22,5],[22,4],[23,3],[23,2]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
return $$[$0-1];
break;
case 2:
$$[$0-1].push($$[$0]); this.$=$$[$0-1];
break;
case 3: case 78:
this.$=[$$[$0]];
break;
case 4: case 7: case 8: case 9: case 10: case 11:
this.$=$$[$0];
break;
case 5: case 6:
this.$=$$[$0-1];
break;
case 12: case 13: case 14: case 15: case 16: case 17: case 18: case 19: case 24: case 29: case 60: case 62: case 64: case 84: case 85:
this.$ = $$[$0];
break;
case 20:

      if($$[$0] == true){
            this.$= new Print.default($$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column);
            }else{
                  this.$= new PrintSeguido.default($$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column);
                  } 
      
break;
case 21:
this.$= true;
break;
case 22:
this.$= false;
break;
case 23:

      if($$[$0] == true){
            this.$ = new DeclaracionVacia.default($$[$0-2], _$[$0-2].first_line, _$[$0-2].first_column, $$[$0-1]);
      }else{
            this.$ = new Declaracion.default($$[$0-2], _$[$0-2].first_line, _$[$0-2].first_column, $$[$0-1], $$[$0]);}

      
break;
case 25: case 89:
this.$ = true;
break;
case 26:
 this.$.push($$[$0]); this.$=$$[$0-2];
break;
case 27: case 97: case 107:
this.$ = [$$[$0]];
break;
case 28:
this.$ = new AsignacionVar.default($$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 30:
this.$ = new Tipo.default(Tipo.tipoDato.ENTERO);
break;
case 31:
this.$ = new Tipo.default(Tipo.tipoDato.DECIMAL);
break;
case 32:
this.$ = new Tipo.default(Tipo.tipoDato.CADENA);
break;
case 33:
this.$ = new Tipo.default(Tipo.tipoDato.BOOL);
break;
case 34:
this.$ = new Tipo.default(Tipo.tipoDato.CARACTER);
break;
case 35:
this.$ = new Tipo.default(Tipo.tipoDato.VOID);
break;
case 36:
this.$ = new Aritmeticas.default(Aritmeticas.Operadores.SUMA, _$[$0-2].first_line, _$[$0-2].first_column, $$[$0-2], $$[$0]);
break;
case 37:
this.$ = new Aritmeticas.default(Aritmeticas.Operadores.RESTA, _$[$0-2].first_line, _$[$0-2].first_column, $$[$0-2], $$[$0]);
break;
case 38:
this.$ = new Aritmeticas.default(Aritmeticas.Operadores.MULTIPLICACION, _$[$0-2].first_line, _$[$0-2].first_column, $$[$0-2], $$[$0]);
break;
case 39:
this.$ = new Aritmeticas.default(Aritmeticas.Operadores.DIVISION, _$[$0-2].first_line, _$[$0-2].first_column, $$[$0-2], $$[$0]);
break;
case 40:
this.$ = new Aritmeticas.default(Aritmeticas.Operadores.MODULO, _$[$0-2].first_line, _$[$0-2].first_column, $$[$0-2], $$[$0]);
break;
case 41:
this.$ = $$[$0-1];
break;
case 42:
this.$ = new Aritmeticas.default(Aritmeticas.Operadores.POTENCIA, _$[$0-5].first_line, _$[$0-5].first_column, $$[$0-3], $$[$0-1]);
break;
case 43:
this.$ = new Relacionales.default(Relacionales.Operadores.IGUAL, _$[$0-2].first_line, _$[$0-2].first_column, $$[$0-2], $$[$0]);
break;
case 44:
this.$ =  new Relacionales.default(Relacionales.Operadores.DIFERENTE, _$[$0-2].first_line, _$[$0-2].first_column, $$[$0-2], $$[$0]);
break;
case 45:
this.$ = new Relacionales.default(Relacionales.Operadores.MAYOR, _$[$0-2].first_line, _$[$0-2].first_column, $$[$0-2], $$[$0]);
break;
case 46:
this.$ = new Relacionales.default(Relacionales.Operadores.MENOR, _$[$0-2].first_line, _$[$0-2].first_column, $$[$0-2], $$[$0]);
break;
case 47:
this.$ = new Relacionales.default(Relacionales.Operadores.MAYORIGUAL, _$[$0-2].first_line, _$[$0-2].first_column, $$[$0-2], $$[$0]);
break;
case 48:
this.$ = new Relacionales.default(Relacionales.Operadores.MENORIGUAL, _$[$0-2].first_line, _$[$0-2].first_column, $$[$0-2], $$[$0]);
break;
case 49:
this.$ = new Logicos.default(Logicos.Operadores.NOT, _$[$0-1].first_line, _$[$0-1].first_column, $$[$0]);
break;
case 50:
this.$ = new Logicos.default(Logicos.Operadores.AND, _$[$0-2].first_line, _$[$0-2].first_column, $$[$0-2], $$[$0]);
break;
case 51:
this.$ = new Logicos.default(Logicos.Operadores.OR, _$[$0-2].first_line, _$[$0-2].first_column, $$[$0-2], $$[$0]);
break;
case 52:
this.$ = new Aritmeticas.default(Aritmeticas.Operadores.NEG, _$[$0-1].first_line, _$[$0-1].first_column, $$[$0]);
break;
case 53:
this.$ = new Nativo.default(new Tipo.default(Tipo.tipoDato.ENTERO), $$[$0], _$[$0].first_line, _$[$0].first_column );
break;
case 54:
this.$ = new Nativo.default(new Tipo.default(Tipo.tipoDato.DECIMAL), $$[$0], _$[$0].first_line, _$[$0].first_column );
break;
case 55:
this.$ = new Nativo.default(new Tipo.default(Tipo.tipoDato.CADENA), $$[$0], _$[$0].first_line, _$[$0].first_column );
break;
case 56:
this.$ = new AccesoVar.default($$[$0], _$[$0].first_line, _$[$0].first_column);
break;
case 57:
this.$ = new Nativo.default(new Tipo.default(Tipo.tipoDato.CARACTER), $$[$0], _$[$0].first_line, _$[$0].first_column );
break;
case 58:
this.$ = new Nativo.default(new Tipo.default(Tipo.tipoDato.BOOL), true, _$[$0].first_line, _$[$0].first_column );
break;
case 59:
this.$ = new Nativo.default(new Tipo.default(Tipo.tipoDato.BOOL), false, _$[$0].first_line, _$[$0].first_column );
break;
case 61:
this.$ = new FNativas.default(FNativas.Operadores.LENGTH, _$[$0-1].first_line, _$[$0-1].first_column, $$[$0-1]);
break;
case 63:
this.$ = new OpTernario.default($$[$0-4], $$[$0-2], $$[$0], _$[$0-4].first_line, _$[$0-4].first_column);
break;
case 65:
 this.$ = new Llamada.default($$[$0-3], $$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column);
break;
case 66:
this.$ = new FNativas.default(FNativas.Operadores.TOLOWER, _$[$0-3].first_line, _$[$0-3].first_column, $$[$0-1]);
break;
case 67:
this.$ = new FNativas.default(FNativas.Operadores.TOUPPER, _$[$0-3].first_line, _$[$0-3].first_column, $$[$0-1]);
break;
case 68:
this.$ = new FNativas.default(FNativas.Operadores.ROUND, _$[$0-3].first_line, _$[$0-3].first_column, $$[$0-1]);
break;
case 69:
this.$ = new FNativas.default(FNativas.Operadores.TYPEOF, _$[$0-3].first_line, _$[$0-3].first_column, $$[$0-1]);
break;
case 70:
this.$ = new FNativas.default(FNativas.Operadores.TOSTRING, _$[$0-6].first_line, _$[$0-6].first_column, $$[$0-1]);
break;
case 71:
this.$ = new If.default($$[$0-4], $$[$0-1], undefined, undefined, _$[$0-6].first_line, _$[$0-6].first_column);
break;
case 72:
this.$ = new If.default($$[$0-8], $$[$0-5], $$[$0-1], undefined, _$[$0-10].first_line, _$[$0-10].first_column);
break;
case 73:
this.$ = new If.default($$[$0-6], $$[$0-3], undefined, $$[$0], _$[$0-8].first_line, _$[$0-8].first_column);
break;
case 74:
this.$ = new Switch.default($$[$0-4], $$[$0-1], undefined,_$[$0-6].first_line, _$[$0-6].first_column);
break;
case 75:
this.$ = new Switch.default($$[$0-5], $$[$0-2], $$[$0-1], _$[$0-7].first_line, _$[$0-7].first_column);
break;
case 76:
this.$ = new Switch.default($$[$0-4], undefined,$$[$0-1], _$[$0-6].first_line, _$[$0-6].first_column);
break;
case 77:
this.$.push($$[$0]); this.$=$$[$0-1];
break;
case 79:
this.$ = new Default.default($$[$0], _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 80:
 this.$ = new Case.default($$[$0-2], $$[$0], _$[$0-3].first_line, _$[$0-3].first_column);
break;
case 81:
this.$ = new While.default($$[$0-4], $$[$0-1], _$[$0-6].first_line, _$[$0-6].first_column);
break;
case 82:
this.$ = new DoWhile.default($$[$0-2], $$[$0-6], _$[$0-8].first_line, _$[$0-8].first_column);
break;
case 83:
 this.$ = new For.default($$[$0-8],$$[$0-6],$$[$0-4],$$[$0-1],_$[$0-10].first_line,_$[$0-10].first_column);
break;
case 86:
this.$ = new Break.default(_$[$0-1].first_line, _$[$0-1].first_column);
break;
case 87:
this.$ = new Continue.default(_$[$0-1].first_line, _$[$0-1].first_column);
break;
case 88:
this.$ = new IncreDecre.default($$[$0-1], _$[$0-1].first_line, _$[$0-1].first_column,$$[$0]);
break;
case 90:
this.$ = false;
break;
case 91:
this.$ = new Casteo.default($$[$0-2], _$[$0-3].first_line, _$[$0-3].first_column, $$[$0]);
break;
case 92:
this.$ = new DeclArreglo.default(false,$$[$0-10], $$[$0-9], $$[$0-2], _$[$0-10].first_line, _$[$0-10].first_column,$$[$0-4]);
break;
case 93:
this.$ = new DeclArreglo.default(false,$$[$0-8], $$[$0-7], $$[$0-2], _$[$0-8].first_line, _$[$0-8].first_column);
break;
case 94:
this.$ = new DeclArreglo.default(true,$$[$0-5], $$[$0-4], $$[$0], _$[$0-5].first_line, _$[$0-5].first_column,true);
break;
case 95:
this.$ = new FNativas.default(FNativas.Operadores.C_STR, _$[$0-4].first_line, _$[$0-4].first_column, $$[$0-4]);
break;
case 96: case 106:
this.$.push($$[$0]); this.$=$$[$0-2];
break;
case 98:
this.$ = new AccesoArr.default($$[$0-3], $$[$0-1],_$[$0-3].first_line, _$[$0-3].first_column);
break;
case 99:
this.$ = new EditarArr.default($$[$0-4], $$[$0-6], $$[$0-1], _$[$0-6].first_line, _$[$0-6].first_column);
break;
case 100:
this.$ = new Metodo.default($$[$0-6], $$[$0-7], $$[$0-4], $$[$0-1], _$[$0-7].first_line, _$[$0-7].first_column);
break;
case 101:
this.$ = new Metodo.default($$[$0-5], $$[$0-6], [], $$[$0-1], _$[$0-6].first_line, _$[$0-6].first_column);
break;
case 102:
this.$.push({tipo:$$[$0-1], id:$$[$0]}); this.$=$$[$0-3];
break;
case 103:
this.$ = [{tipo:$$[$0-1], id:$$[$0]}];
break;
case 104:
this.$ = new Execute.default($$[$0-4], $$[$0-2], _$[$0-5].first_line, _$[$0-5].first_column);
break;
case 105:
this.$ = new Execute.default($$[$0-3], [], _$[$0-4].first_line, _$[$0-4].first_column);
break;
case 108:
this.$ = new Llamada.default($$[$0-4], $$[$0-2], _$[$0-4].first_line, _$[$0-4].first_column);
break;
case 109:
this.$ = new Llamada.default($$[$0-3], [], _$[$0-3].first_line, _$[$0-3].first_column);
break;
case 110:
this.$ = new Return.default(_$[$0-2].first_line, _$[$0-2].first_column,$$[$0-1]);
break;
case 111:
this.$ = new Return.default(_$[$0-1].first_line, _$[$0-1].first_column);
break;
}
},
table: [{3:1,4:2,6:3,7:4,8:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:$V0,29:21,34:$V1,35:23,36:$V2,37:$V3,38:$V4,41:$V5,42:$V6,43:$V7,78:$V8,82:$V9,88:$Va,89:$Vb,90:$Vc,92:$Vd,93:$Ve,104:$Vf,105:$Vg},{1:[3]},{5:[1,39],6:40,7:4,8:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:$V0,29:21,34:$V1,35:23,36:$V2,37:$V3,38:$V4,41:$V5,42:$V6,43:$V7,78:$V8,82:$V9,88:$Va,89:$Vb,90:$Vc,92:$Vd,93:$Ve,104:$Vf,105:$Vg},o($Vh,[2,3]),o($Vh,[2,4]),{9:[1,41]},{9:[1,42]},o($Vh,[2,7]),o($Vh,[2,8]),o($Vh,[2,9]),o($Vh,[2,10]),o($Vh,[2,11]),o($Vh,[2,12]),o($Vh,[2,13]),o($Vh,[2,14]),o($Vh,[2,15]),o($Vh,[2,16]),o($Vh,[2,17]),o($Vh,[2,18]),o($Vh,[2,19]),{25:[1,43]},{30:44,34:[1,45]},{32:$Vi,49:[1,48],94:49,95:$Vj,96:$Vk,97:[1,47]},o($Vl,[2,29]),{49:[1,52]},{49:[1,53]},{9:[1,54]},{79:[1,55]},{49:[1,56]},{9:[1,57]},{49:[1,58]},{34:[1,59]},{9:[1,61],26:60,34:$Vm,38:$Vn,45:$Vo,49:$Vp,51:$Vq,58:$Vr,61:$Vs,62:$Vt,63:$Vu,64:$Vv,65:$Vw,66:$Vx,67:73,69:74,71:75,73:$Vy,74:$Vz,75:$VA,76:$VB},o($VC,[2,30]),o($VC,[2,31]),{39:[1,81]},o($VC,[2,33]),o($VC,[2,34]),o($VC,[2,35]),{1:[2,1]},o($Vh,[2,2]),o($Vh,[2,5]),o($Vh,[2,6]),{26:82,34:$Vm,38:$Vn,45:$Vo,49:$Vp,51:$Vq,58:$Vr,61:$Vs,62:$Vt,63:$Vu,64:$Vv,65:$Vw,66:$Vx,67:73,69:74,71:75,73:$Vy,74:$Vz,75:$VA,76:$VB},{9:[2,25],31:83,32:[1,85],33:[1,84]},o($VD,$VE,{49:[1,87],97:[1,86]}),{26:88,34:$Vm,38:$Vn,45:$Vo,49:$Vp,51:$Vq,58:$Vr,61:$Vs,62:$Vt,63:$Vu,64:$Vv,65:$Vw,66:$Vx,67:73,69:74,71:75,73:$Vy,74:$Vz,75:$VA,76:$VB},{26:89,34:$Vm,38:$Vn,45:$Vo,49:$Vp,51:$Vq,58:$Vr,61:$Vs,62:$Vt,63:$Vu,64:$Vv,65:$Vw,66:$Vx,67:73,69:74,71:75,73:$Vy,74:$Vz,75:$VA,76:$VB},{26:92,34:$Vm,38:$Vn,45:$Vo,49:$Vp,50:[1,91],51:$Vq,58:$Vr,61:$Vs,62:$Vt,63:$Vu,64:$Vv,65:$Vw,66:$Vx,67:73,69:74,71:75,72:90,73:$Vy,74:$Vz,75:$VA,76:$VB},o($Vl,[2,88]),o($Vl,[2,89]),o($Vl,[2,90]),{26:93,34:$Vm,38:$Vn,45:$Vo,49:$Vp,51:$Vq,58:$Vr,61:$Vs,62:$Vt,63:$Vu,64:$Vv,65:$Vw,66:$Vx,67:73,69:74,71:75,73:$Vy,74:$Vz,75:$VA,76:$VB},{26:94,34:$Vm,38:$Vn,45:$Vo,49:$Vp,51:$Vq,58:$Vr,61:$Vs,62:$Vt,63:$Vu,64:$Vv,65:$Vw,66:$Vx,67:73,69:74,71:75,73:$Vy,74:$Vz,75:$VA,76:$VB},o($Vh,[2,86]),{4:95,6:3,7:4,8:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:$V0,29:21,34:$V1,35:23,36:$V2,37:$V3,38:$V4,41:$V5,42:$V6,43:$V7,78:$V8,82:$V9,88:$Va,89:$Vb,90:$Vc,92:$Vd,93:$Ve,104:$Vf,105:$Vg},{8:97,10:98,29:99,34:$VF,35:23,36:$V2,37:$V3,38:$V4,41:$V5,42:$V6,43:$V7,91:96},o($Vh,[2,87]),{26:101,34:$Vm,38:$Vn,45:$Vo,49:$Vp,51:$Vq,58:$Vr,61:$Vs,62:$Vt,63:$Vu,64:$Vv,65:$Vw,66:$Vx,67:73,69:74,71:75,73:$Vy,74:$Vz,75:$VA,76:$VB},{49:[1,102]},{9:[1,103],44:$VG,45:$VH,46:$VI,47:$VJ,48:$VK,52:$VL,53:$VM,54:$VN,55:$VO,56:$VP,57:$VQ,59:$VR,60:$VS,68:$VT,70:$VU},o($Vh,[2,111]),{26:119,29:120,34:$Vm,36:$V2,37:$V3,38:[1,121],41:$V5,42:$V6,43:$V7,45:$Vo,49:$Vp,51:$Vq,58:$Vr,61:$Vs,62:$Vt,63:$Vu,64:$Vv,65:$Vw,66:$Vx,67:73,69:74,71:75,73:$Vy,74:$Vz,75:$VA,76:$VB},{49:[1,122]},{26:123,34:$Vm,38:$Vn,45:$Vo,49:$Vp,51:$Vq,58:$Vr,61:$Vs,62:$Vt,63:$Vu,64:$Vv,65:$Vw,66:$Vx,67:73,69:74,71:75,73:$Vy,74:$Vz,75:$VA,76:$VB},{26:124,34:$Vm,38:$Vn,45:$Vo,49:$Vp,51:$Vq,58:$Vr,61:$Vs,62:$Vt,63:$Vu,64:$Vv,65:$Vw,66:$Vx,67:73,69:74,71:75,73:$Vy,74:$Vz,75:$VA,76:$VB},o($VV,[2,53]),o($VV,[2,54]),o($VV,[2,55]),o($VV,[2,56],{49:[1,125],97:[1,126]}),o($VV,[2,57]),o($VV,[2,58]),o($VV,[2,59]),o($VV,[2,60]),o($VV,[2,62]),o($VV,[2,64]),{49:[1,127]},{49:[1,128]},{49:[1,129]},{49:[1,130]},{39:[1,131]},{39:[1,132]},{9:[1,135],25:[1,134],27:133,44:$VG,45:$VH,46:$VI,47:$VJ,48:$VK,52:$VL,53:$VM,54:$VN,55:$VO,56:$VP,57:$VQ,59:$VR,60:$VS,68:$VT,70:$VU},{9:[2,23]},{34:[1,136]},{26:137,34:$Vm,38:$Vn,45:$Vo,49:$Vp,51:$Vq,58:$Vr,61:$Vs,62:$Vt,63:$Vu,64:$Vv,65:$Vw,66:$Vx,67:73,69:74,71:75,73:$Vy,74:$Vz,75:$VA,76:$VB},{98:[1,138]},{29:141,36:$V2,37:$V3,38:$V4,41:$V5,42:$V6,43:$V7,50:[1,140],103:139},o($Vl,[2,28],{44:$VG,45:$VH,46:$VI,47:$VJ,48:$VK,52:$VL,53:$VM,54:$VN,55:$VO,56:$VP,57:$VQ,59:$VR,60:$VS,68:$VT,70:$VU}),{44:$VG,45:$VH,46:$VI,47:$VJ,48:$VK,52:$VL,53:$VM,54:$VN,55:$VO,56:$VP,57:$VQ,59:$VR,60:$VS,68:$VT,70:$VU,98:[1,142]},{33:$VW,50:[1,143]},{9:[1,145]},o($VX,[2,107],{44:$VG,45:$VH,46:$VI,47:$VJ,48:$VK,52:$VL,53:$VM,54:$VN,55:$VO,56:$VP,57:$VQ,59:$VR,60:$VS,68:$VT,70:$VU}),{44:$VG,45:$VH,46:$VI,47:$VJ,48:$VK,50:[1,146],52:$VL,53:$VM,54:$VN,55:$VO,56:$VP,57:$VQ,59:$VR,60:$VS,68:$VT,70:$VU},{44:$VG,45:$VH,46:$VI,47:$VJ,48:$VK,50:[1,147],52:$VL,53:$VM,54:$VN,55:$VO,56:$VP,57:$VQ,59:$VR,60:$VS,68:$VT,70:$VU},{6:40,7:4,8:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:$V0,29:21,34:$V1,35:23,36:$V2,37:$V3,38:$V4,41:$V5,42:$V6,43:$V7,78:$V8,80:[1,148],82:$V9,88:$Va,89:$Vb,90:$Vc,92:$Vd,93:$Ve,104:$Vf,105:$Vg},{9:[1,149]},{9:[2,84]},{9:[2,85]},{30:44,34:[1,150]},{32:$Vi,94:49,95:$Vj,96:$Vk},{44:$VG,45:$VH,46:$VI,47:$VJ,48:$VK,50:[1,151],52:$VL,53:$VM,54:$VN,55:$VO,56:$VP,57:$VQ,59:$VR,60:$VS,68:$VT,70:$VU},{26:92,34:$Vm,38:$Vn,45:$Vo,49:$Vp,50:[1,153],51:$Vq,58:$Vr,61:$Vs,62:$Vt,63:$Vu,64:$Vv,65:$Vw,66:$Vx,67:73,69:74,71:75,72:152,73:$Vy,74:$Vz,75:$VA,76:$VB},o($Vh,[2,110]),{26:154,34:$Vm,38:$Vn,45:$Vo,49:$Vp,51:$Vq,58:$Vr,61:$Vs,62:$Vt,63:$Vu,64:$Vv,65:$Vw,66:$Vx,67:73,69:74,71:75,73:$Vy,74:$Vz,75:$VA,76:$VB},{26:155,34:$Vm,38:$Vn,45:$Vo,49:$Vp,51:$Vq,58:$Vr,61:$Vs,62:$Vt,63:$Vu,64:$Vv,65:$Vw,66:$Vx,67:73,69:74,71:75,73:$Vy,74:$Vz,75:$VA,76:$VB},{26:156,34:$Vm,38:$Vn,45:$Vo,49:$Vp,51:$Vq,58:$Vr,61:$Vs,62:$Vt,63:$Vu,64:$Vv,65:$Vw,66:$Vx,67:73,69:74,71:75,73:$Vy,74:$Vz,75:$VA,76:$VB},{26:157,34:$Vm,38:$Vn,45:$Vo,49:$Vp,51:$Vq,58:$Vr,61:$Vs,62:$Vt,63:$Vu,64:$Vv,65:$Vw,66:$Vx,67:73,69:74,71:75,73:$Vy,74:$Vz,75:$VA,76:$VB},{26:158,34:$Vm,38:$Vn,45:$Vo,49:$Vp,51:$Vq,58:$Vr,61:$Vs,62:$Vt,63:$Vu,64:$Vv,65:$Vw,66:$Vx,67:73,69:74,71:75,73:$Vy,74:$Vz,75:$VA,76:$VB},{26:159,34:$Vm,38:$Vn,45:$Vo,49:$Vp,51:$Vq,58:$Vr,61:$Vs,62:$Vt,63:$Vu,64:$Vv,65:$Vw,66:$Vx,67:73,69:74,71:75,73:$Vy,74:$Vz,75:$VA,76:$VB},{26:160,34:$Vm,38:$Vn,45:$Vo,49:$Vp,51:$Vq,58:$Vr,61:$Vs,62:$Vt,63:$Vu,64:$Vv,65:$Vw,66:$Vx,67:73,69:74,71:75,73:$Vy,74:$Vz,75:$VA,76:$VB},{26:161,34:$Vm,38:$Vn,45:$Vo,49:$Vp,51:$Vq,58:$Vr,61:$Vs,62:$Vt,63:$Vu,64:$Vv,65:$Vw,66:$Vx,67:73,69:74,71:75,73:$Vy,74:$Vz,75:$VA,76:$VB},{26:162,34:$Vm,38:$Vn,45:$Vo,49:$Vp,51:$Vq,58:$Vr,61:$Vs,62:$Vt,63:$Vu,64:$Vv,65:$Vw,66:$Vx,67:73,69:74,71:75,73:$Vy,74:$Vz,75:$VA,76:$VB},{26:163,34:$Vm,38:$Vn,45:$Vo,49:$Vp,51:$Vq,58:$Vr,61:$Vs,62:$Vt,63:$Vu,64:$Vv,65:$Vw,66:$Vx,67:73,69:74,71:75,73:$Vy,74:$Vz,75:$VA,76:$VB},{26:164,34:$Vm,38:$Vn,45:$Vo,49:$Vp,51:$Vq,58:$Vr,61:$Vs,62:$Vt,63:$Vu,64:$Vv,65:$Vw,66:$Vx,67:73,69:74,71:75,73:$Vy,74:$Vz,75:$VA,76:$VB},{26:165,34:$Vm,38:$Vn,45:$Vo,49:$Vp,51:$Vq,58:$Vr,61:$Vs,62:$Vt,63:$Vu,64:$Vv,65:$Vw,66:$Vx,67:73,69:74,71:75,73:$Vy,74:$Vz,75:$VA,76:$VB},{26:166,34:$Vm,38:$Vn,45:$Vo,49:$Vp,51:$Vq,58:$Vr,61:$Vs,62:$Vt,63:$Vu,64:$Vv,65:$Vw,66:$Vx,67:73,69:74,71:75,73:$Vy,74:$Vz,75:$VA,76:$VB},o($VV,[2,61]),{26:167,34:$Vm,38:$Vn,45:$Vo,49:$Vp,51:$Vq,58:$Vr,61:$Vs,62:$Vt,63:$Vu,64:$Vv,65:$Vw,66:$Vx,67:73,69:74,71:75,73:$Vy,74:$Vz,75:$VA,76:$VB},{44:$VG,45:$VH,46:$VI,47:$VJ,48:$VK,50:[1,168],52:$VL,53:$VM,54:$VN,55:$VO,56:$VP,57:$VQ,59:$VR,60:$VS,68:$VT,70:$VU},{50:[1,169]},{39:[1,170]},{26:171,34:$Vm,38:$Vn,45:$Vo,49:$Vp,51:$Vq,58:$Vr,61:$Vs,62:$Vt,63:$Vu,64:$Vv,65:$Vw,66:$Vx,67:73,69:74,71:75,73:$Vy,74:$Vz,75:$VA,76:$VB},o($VY,[2,49],{44:$VG,45:$VH,46:$VI,47:$VJ,48:$VK,52:$VL,53:$VM,54:$VN,55:$VO,56:$VP,57:$VQ,68:$VT}),o($VZ,[2,52],{68:$VT}),{26:92,34:$Vm,38:$Vn,45:$Vo,49:$Vp,51:$Vq,58:$Vr,61:$Vs,62:$Vt,63:$Vu,64:$Vv,65:$Vw,66:$Vx,67:73,69:74,71:75,72:172,73:$Vy,74:$Vz,75:$VA,76:$VB},{26:173,34:$Vm,38:$Vn,45:$Vo,49:$Vp,51:$Vq,58:$Vr,61:$Vs,62:$Vt,63:$Vu,64:$Vv,65:$Vw,66:$Vx,67:73,69:74,71:75,73:$Vy,74:$Vz,75:$VA,76:$VB},{26:174,34:$Vm,38:$Vn,45:$Vo,49:$Vp,51:$Vq,58:$Vr,61:$Vs,62:$Vt,63:$Vu,64:$Vv,65:$Vw,66:$Vx,67:73,69:74,71:75,73:$Vy,74:$Vz,75:$VA,76:$VB},{26:175,34:$Vm,38:$Vn,45:$Vo,49:$Vp,51:$Vq,58:$Vr,61:$Vs,62:$Vt,63:$Vu,64:$Vv,65:$Vw,66:$Vx,67:73,69:74,71:75,73:$Vy,74:$Vz,75:$VA,76:$VB},{26:176,34:$Vm,38:$Vn,45:$Vo,49:$Vp,51:$Vq,58:$Vr,61:$Vs,62:$Vt,63:$Vu,64:$Vv,65:$Vw,66:$Vx,67:73,69:74,71:75,73:$Vy,74:$Vz,75:$VA,76:$VB},{26:177,34:$Vm,38:$Vn,45:$Vo,49:$Vp,51:$Vq,58:$Vr,61:$Vs,62:$Vt,63:$Vu,64:$Vv,65:$Vw,66:$Vx,67:73,69:74,71:75,73:$Vy,74:$Vz,75:$VA,76:$VB},{39:[1,178]},{40:$V_},o($Vh,[2,20]),{28:[1,180]},o($Vh,[2,22]),o($VD,[2,26]),{9:[2,24],44:$VG,45:$VH,46:$VI,47:$VJ,48:$VK,52:$VL,53:$VM,54:$VN,55:$VO,56:$VP,57:$VQ,59:$VR,60:$VS,68:$VT,70:$VU},{32:[1,181]},{33:[1,183],50:[1,182]},{79:[1,184]},{34:[1,185]},{32:[1,186]},{9:[1,187]},{26:188,34:$Vm,38:$Vn,45:$Vo,49:$Vp,51:$Vq,58:$Vr,61:$Vs,62:$Vt,63:$Vu,64:$Vv,65:$Vw,66:$Vx,67:73,69:74,71:75,73:$Vy,74:$Vz,75:$VA,76:$VB},o($Vh,[2,109]),{79:[1,189]},{79:[1,190]},{88:[1,191]},{26:192,34:$Vm,38:$Vn,45:$Vo,49:$Vp,51:$Vq,58:$Vr,61:$Vs,62:$Vt,63:$Vu,64:$Vv,65:$Vw,66:$Vx,67:73,69:74,71:75,73:$Vy,74:$Vz,75:$VA,76:$VB},o($VD,$VE),{79:[1,193]},{33:$VW,50:[1,194]},{9:[1,195]},o($V$,[2,36],{46:$VI,47:$VJ,48:$VK,68:$VT}),o($V$,[2,37],{46:$VI,47:$VJ,48:$VK,68:$VT}),o($VZ,[2,38],{68:$VT}),o($VZ,[2,39],{68:$VT}),o($VZ,[2,40],{68:$VT}),o($V01,[2,43],{44:$VG,45:$VH,46:$VI,47:$VJ,48:$VK,68:$VT}),o($V01,[2,44],{44:$VG,45:$VH,46:$VI,47:$VJ,48:$VK,68:$VT}),o($V01,[2,45],{44:$VG,45:$VH,46:$VI,47:$VJ,48:$VK,68:$VT}),o($V01,[2,46],{44:$VG,45:$VH,46:$VI,47:$VJ,48:$VK,68:$VT}),o($V01,[2,47],{44:$VG,45:$VH,46:$VI,47:$VJ,48:$VK,68:$VT}),o($V01,[2,48],{44:$VG,45:$VH,46:$VI,47:$VJ,48:$VK,68:$VT}),o($VY,[2,50],{44:$VG,45:$VH,46:$VI,47:$VJ,48:$VK,52:$VL,53:$VM,54:$VN,55:$VO,56:$VP,57:$VQ,68:$VT}),o([9,25,33,39,50,60,70,98,102],[2,51],{44:$VG,45:$VH,46:$VI,47:$VJ,48:$VK,52:$VL,53:$VM,54:$VN,55:$VO,56:$VP,57:$VQ,59:$VR,68:$VT}),{39:[1,196],44:$VG,45:$VH,46:$VI,47:$VJ,48:$VK,52:$VL,53:$VM,54:$VN,55:$VO,56:$VP,57:$VQ,59:$VR,60:$VS,68:$VT,70:$VU},o($VV,[2,41]),{26:197,34:$Vm,38:$Vn,45:$Vo,49:$Vp,51:$Vq,58:$Vr,61:$Vs,62:$Vt,63:$Vu,64:$Vv,65:$Vw,66:$Vx,67:73,69:74,71:75,73:$Vy,74:$Vz,75:$VA,76:$VB},{39:[1,198]},{33:[1,199],44:$VG,45:$VH,46:$VI,47:$VJ,48:$VK,52:$VL,53:$VM,54:$VN,55:$VO,56:$VP,57:$VQ,59:$VR,60:$VS,68:$VT,70:$VU},{33:$VW,50:[1,200]},{44:$VG,45:$VH,46:$VI,47:$VJ,48:$VK,52:$VL,53:$VM,54:$VN,55:$VO,56:$VP,57:$VQ,59:$VR,60:$VS,68:$VT,70:$VU,98:[1,201]},{44:$VG,45:$VH,46:$VI,47:$VJ,48:$VK,50:[1,202],52:$VL,53:$VM,54:$VN,55:$VO,56:$VP,57:$VQ,59:$VR,60:$VS,68:$VT,70:$VU},{44:$VG,45:$VH,46:$VI,47:$VJ,48:$VK,50:[1,203],52:$VL,53:$VM,54:$VN,55:$VO,56:$VP,57:$VQ,59:$VR,60:$VS,68:$VT,70:$VU},{44:$VG,45:$VH,46:$VI,47:$VJ,48:$VK,50:[1,204],52:$VL,53:$VM,54:$VN,55:$VO,56:$VP,57:$VQ,59:$VR,60:$VS,68:$VT,70:$VU},{44:$VG,45:$VH,46:$VI,47:$VJ,48:$VK,50:[1,205],52:$VL,53:$VM,54:$VN,55:$VO,56:$VP,57:$VQ,59:$VR,60:$VS,68:$VT,70:$VU},{77:$V11},o($VC,[2,32]),{9:[1,207]},{26:211,34:$Vm,38:$Vn,45:$Vo,49:$Vp,51:$Vq,58:$Vr,61:$Vs,62:$Vt,63:$Vu,64:$Vv,65:$Vw,66:$Vx,67:73,69:74,71:75,73:$Vy,74:$Vz,75:$VA,76:$VB,97:[1,209],99:[1,208],101:210},{79:[1,212]},{29:213,36:$V2,37:$V3,38:$V4,41:$V5,42:$V6,43:$V7},{4:214,6:3,7:4,8:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:$V0,29:21,34:$V1,35:23,36:$V2,37:$V3,38:$V4,41:$V5,42:$V6,43:$V7,78:$V8,82:$V9,88:$Va,89:$Vb,90:$Vc,92:$Vd,93:$Ve,104:$Vf,105:$Vg},o($VX,[2,103]),{26:215,34:$Vm,38:$Vn,45:$Vo,49:$Vp,51:$Vq,58:$Vr,61:$Vs,62:$Vt,63:$Vu,64:$Vv,65:$Vw,66:$Vx,67:73,69:74,71:75,73:$Vy,74:$Vz,75:$VA,76:$VB},o($Vh,[2,108]),o($VX,[2,106],{44:$VG,45:$VH,46:$VI,47:$VJ,48:$VK,52:$VL,53:$VM,54:$VN,55:$VO,56:$VP,57:$VQ,59:$VR,60:$VS,68:$VT,70:$VU}),{4:216,6:3,7:4,8:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:$V0,29:21,34:$V1,35:23,36:$V2,37:$V3,38:$V4,41:$V5,42:$V6,43:$V7,78:$V8,82:$V9,88:$Va,89:$Vb,90:$Vc,92:$Vd,93:$Ve,104:$Vf,105:$Vg},{4:217,6:3,7:4,8:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:$V0,29:21,34:$V1,35:23,36:$V2,37:$V3,38:$V4,41:$V5,42:$V6,43:$V7,78:$V8,82:$V9,88:$Va,89:$Vb,90:$Vc,92:$Vd,93:$Ve,104:$Vf,105:$Vg},{49:[1,218]},{9:[1,219],44:$VG,45:$VH,46:$VI,47:$VJ,48:$VK,52:$VL,53:$VM,54:$VN,55:$VO,56:$VP,57:$VQ,59:$VR,60:$VS,68:$VT,70:$VU},{83:220,84:221,85:222,86:$V21,87:$V31},{9:[1,225]},o($Vh,[2,105]),{26:226,34:$Vm,38:$Vn,45:$Vo,49:$Vp,51:$Vq,58:$Vr,61:$Vs,62:$Vt,63:$Vu,64:$Vv,65:$Vw,66:$Vx,67:73,69:74,71:75,73:$Vy,74:$Vz,75:$VA,76:$VB},o($VZ,[2,91],{68:$VT}),{40:$V_,77:$V11},{26:227,34:$Vm,38:$Vn,45:$Vo,49:$Vp,51:$Vq,58:$Vr,61:$Vs,62:$Vt,63:$Vu,64:$Vv,65:$Vw,66:$Vx,67:73,69:74,71:75,73:$Vy,74:$Vz,75:$VA,76:$VB},o($VV,[2,65]),o($VV,[2,98]),o($VV,[2,66]),o($VV,[2,67]),o($VV,[2,68]),o($VV,[2,69]),{49:[1,228]},o($Vh,[2,21]),{29:229,36:$V2,37:$V3,38:$V4,41:$V5,42:$V6,43:$V7},{26:231,34:$Vm,38:$Vn,45:$Vo,49:$Vp,51:$Vq,58:$Vr,61:$Vs,62:$Vt,63:$Vu,64:$Vv,65:$Vw,66:$Vx,67:73,69:74,71:75,73:$Vy,74:$Vz,75:$VA,76:$VB,100:230},o($Vh,[2,94]),{44:$VG,45:$VH,46:$VI,47:$VJ,48:$VK,52:$VL,53:$VM,54:$VN,55:$VO,56:$VP,57:$VQ,59:$VR,60:$VS,68:$VT,70:$VU,102:[1,232]},{4:233,6:3,7:4,8:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:$V0,29:21,34:$V1,35:23,36:$V2,37:$V3,38:$V4,41:$V5,42:$V6,43:$V7,78:$V8,82:$V9,88:$Va,89:$Vb,90:$Vc,92:$Vd,93:$Ve,104:$Vf,105:$Vg},{34:[1,234]},{6:40,7:4,8:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:$V0,29:21,34:$V1,35:23,36:$V2,37:$V3,38:$V4,41:$V5,42:$V6,43:$V7,78:$V8,80:[1,235],82:$V9,88:$Va,89:$Vb,90:$Vc,92:$Vd,93:$Ve,104:$Vf,105:$Vg},{9:[1,236],44:$VG,45:$VH,46:$VI,47:$VJ,48:$VK,52:$VL,53:$VM,54:$VN,55:$VO,56:$VP,57:$VQ,59:$VR,60:$VS,68:$VT,70:$VU},{6:40,7:4,8:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:$V0,29:21,34:$V1,35:23,36:$V2,37:$V3,38:$V4,41:$V5,42:$V6,43:$V7,78:$V8,80:[1,237],82:$V9,88:$Va,89:$Vb,90:$Vc,92:$Vd,93:$Ve,104:$Vf,105:$Vg},{6:40,7:4,8:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:$V0,29:21,34:$V1,35:23,36:$V2,37:$V3,38:$V4,41:$V5,42:$V6,43:$V7,78:$V8,80:[1,238],82:$V9,88:$Va,89:$Vb,90:$Vc,92:$Vd,93:$Ve,104:$Vf,105:$Vg},{26:239,34:$Vm,38:$Vn,45:$Vo,49:$Vp,51:$Vq,58:$Vr,61:$Vs,62:$Vt,63:$Vu,64:$Vv,65:$Vw,66:$Vx,67:73,69:74,71:75,73:$Vy,74:$Vz,75:$VA,76:$VB},{10:240,34:$VF,35:23},{80:[1,241],84:242,85:243,86:$V21,87:$V31},{80:[1,244]},o($V41,[2,78]),{39:[1,245]},{26:246,34:$Vm,38:$Vn,45:$Vo,49:$Vp,51:$Vq,58:$Vr,61:$Vs,62:$Vt,63:$Vu,64:$Vv,65:$Vw,66:$Vx,67:73,69:74,71:75,73:$Vy,74:$Vz,75:$VA,76:$VB},o($Vh,[2,104]),o([9,25,33,39,50,70,98,102],[2,63],{44:$VG,45:$VH,46:$VI,47:$VJ,48:$VK,52:$VL,53:$VM,54:$VN,55:$VO,56:$VP,57:$VQ,59:$VR,60:$VS,68:$VT}),{44:$VG,45:$VH,46:$VI,47:$VJ,48:$VK,50:[1,247],52:$VL,53:$VM,54:$VN,55:$VO,56:$VP,57:$VQ,59:$VR,60:$VS,68:$VT,70:$VU},{26:248,34:$Vm,38:$Vn,45:$Vo,49:$Vp,51:$Vq,58:$Vr,61:$Vs,62:$Vt,63:$Vu,64:$Vv,65:$Vw,66:$Vx,67:73,69:74,71:75,73:$Vy,74:$Vz,75:$VA,76:$VB},{97:[1,249]},{33:[1,251],98:[1,250]},o($V51,[2,97],{44:$VG,45:$VH,46:$VI,47:$VJ,48:$VK,52:$VL,53:$VM,54:$VN,55:$VO,56:$VP,57:$VQ,59:$VR,60:$VS,68:$VT,70:$VU}),{49:[1,252]},{6:40,7:4,8:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:$V0,29:21,34:$V1,35:23,36:$V2,37:$V3,38:$V4,41:$V5,42:$V6,43:$V7,78:$V8,80:[1,253],82:$V9,88:$Va,89:$Vb,90:$Vc,92:$Vd,93:$Ve,104:$Vf,105:$Vg},o($VX,[2,102]),o($Vh,[2,101]),o($Vh,[2,99]),o($Vh,[2,71],{81:[1,254]}),o($Vh,[2,81]),{44:$VG,45:$VH,46:$VI,47:$VJ,48:$VK,50:[1,255],52:$VL,53:$VM,54:$VN,55:$VO,56:$VP,57:$VQ,59:$VR,60:$VS,68:$VT,70:$VU},{50:[1,256]},o($Vh,[2,74]),{80:[1,257]},o($V41,[2,77]),o($Vh,[2,76]),{4:258,6:3,7:4,8:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:$V0,29:21,34:$V1,35:23,36:$V2,37:$V3,38:$V4,41:$V5,42:$V6,43:$V7,78:$V8,82:$V9,88:$Va,89:$Vb,90:$Vc,92:$Vd,93:$Ve,104:$Vf,105:$Vg},{39:[1,259],44:$VG,45:$VH,46:$VI,47:$VJ,48:$VK,52:$VL,53:$VM,54:$VN,55:$VO,56:$VP,57:$VQ,59:$VR,60:$VS,68:$VT,70:$VU},o($VV,[2,42]),{44:$VG,45:$VH,46:$VI,47:$VJ,48:$VK,50:[1,260],52:$VL,53:$VM,54:$VN,55:$VO,56:$VP,57:$VQ,59:$VR,60:$VS,68:$VT,70:$VU},{26:261,34:$Vm,38:$Vn,45:$Vo,49:$Vp,51:$Vq,58:$Vr,61:$Vs,62:$Vt,63:$Vu,64:$Vv,65:$Vw,66:$Vx,67:73,69:74,71:75,73:$Vy,74:$Vz,75:$VA,76:$VB},{9:[1,262]},{26:263,34:$Vm,38:$Vn,45:$Vo,49:$Vp,51:$Vq,58:$Vr,61:$Vs,62:$Vt,63:$Vu,64:$Vv,65:$Vw,66:$Vx,67:73,69:74,71:75,73:$Vy,74:$Vz,75:$VA,76:$VB},{50:[1,264]},o($Vh,[2,100]),{11:266,78:$V8,79:[1,265]},{9:[1,267]},{79:[1,268]},o($Vh,[2,75]),{6:40,7:4,8:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:$V0,29:21,34:$V1,35:23,36:$V2,37:$V3,38:$V4,41:$V5,42:$V6,43:$V7,78:$V8,80:[2,79],82:$V9,88:$Va,89:$Vb,90:$Vc,92:$Vd,93:$Ve,104:$Vf,105:$Vg},{4:269,6:3,7:4,8:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:$V0,29:21,34:$V1,35:23,36:$V2,37:$V3,38:$V4,41:$V5,42:$V6,43:$V7,78:$V8,82:$V9,88:$Va,89:$Vb,90:$Vc,92:$Vd,93:$Ve,104:$Vf,105:$Vg},o($VV,[2,70]),{44:$VG,45:$VH,46:$VI,47:$VJ,48:$VK,52:$VL,53:$VM,54:$VN,55:$VO,56:$VP,57:$VQ,59:$VR,60:$VS,68:$VT,70:$VU,98:[1,270]},o($Vh,[2,93]),o($V51,[2,96],{44:$VG,45:$VH,46:$VI,47:$VJ,48:$VK,52:$VL,53:$VM,54:$VN,55:$VO,56:$VP,57:$VQ,59:$VR,60:$VS,68:$VT,70:$VU}),{9:[1,271]},{4:272,6:3,7:4,8:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:$V0,29:21,34:$V1,35:23,36:$V2,37:$V3,38:$V4,41:$V5,42:$V6,43:$V7,78:$V8,82:$V9,88:$Va,89:$Vb,90:$Vc,92:$Vd,93:$Ve,104:$Vf,105:$Vg},o($Vh,[2,73]),o($Vh,[2,82]),{4:273,6:3,7:4,8:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:$V0,29:21,34:$V1,35:23,36:$V2,37:$V3,38:$V4,41:$V5,42:$V6,43:$V7,78:$V8,82:$V9,88:$Va,89:$Vb,90:$Vc,92:$Vd,93:$Ve,104:$Vf,105:$Vg},o($V41,[2,80],{7:4,8:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,29:21,35:23,6:40,24:$V0,34:$V1,36:$V2,37:$V3,38:$V4,41:$V5,42:$V6,43:$V7,78:$V8,82:$V9,88:$Va,89:$Vb,90:$Vc,92:$Vd,93:$Ve,104:$Vf,105:$Vg}),{9:[1,274]},o($Vh,[2,95]),{6:40,7:4,8:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:$V0,29:21,34:$V1,35:23,36:$V2,37:$V3,38:$V4,41:$V5,42:$V6,43:$V7,78:$V8,80:[1,275],82:$V9,88:$Va,89:$Vb,90:$Vc,92:$Vd,93:$Ve,104:$Vf,105:$Vg},{6:40,7:4,8:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:$V0,29:21,34:$V1,35:23,36:$V2,37:$V3,38:$V4,41:$V5,42:$V6,43:$V7,78:$V8,80:[1,276],82:$V9,88:$Va,89:$Vb,90:$Vc,92:$Vd,93:$Ve,104:$Vf,105:$Vg},o($Vh,[2,92]),o($Vh,[2,72]),o($Vh,[2,83])],
defaultActions: {39:[2,1],83:[2,23],97:[2,84],98:[2,85]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};


const Tipo = require('../build/controllers/simbol/tipo')
const Nativo = require('../build/controllers/expr/Nativo')
const Aritmeticas = require('../build/controllers/expr/Aritmeticas')
const Relacionales = require('../build/controllers/expr/Relacionales')
const Logicos = require('../build/controllers/expr/Logicos')

const DeclaracionVacia = require('../build/controllers/instruc/declaracionVacia')
const Print = require('../build/controllers/instruc/print')
const PrintSeguido = require('../build/controllers/instruc/printSeguido')
const Declaracion = require('../build/controllers/instruc/declaracion')
const AccesoVar = require('../build/controllers/expr/accesoVar')
const AsignacionVar = require('../build/controllers/instruc/asignacionVar')
const If = require('../build/controllers/instruc/if')
const FNativas = require('../build/controllers/expr/fNativas')
const While = require('../build/controllers/instruc/while')
const Break = require('../build/controllers/instruc/Break')
const DoWhile = require('../build/controllers/instruc/doWhile')
const IncreDecre = require('../build/controllers/instruc/increDecre')
const Casteo = require('../build/controllers/expr/casteo')
const For = require('../build/controllers/instruc/for')
const Continue = require('../build/controllers/instruc/Continue')
const OpTernario = require('../build/controllers/instruc/opTernario')
const Switch = require('../build/controllers/instruc/switch')
const Case = require('../build/controllers/instruc/case')
const Default = require('../build/controllers/instruc/default')
const Errores = require('../build/controllers/excep/errores')
const DeclArreglo = require('../build/controllers/instruc/declArreglo')
const AccesoArr = require('../build/controllers/expr/accesoArr')
const EditarArr = require('../build/controllers/instruc/editarArr')
const Metodo = require('../build/controllers/instruc/metodo')
const Execute = require('../build/controllers/instruc/execute')
const Llamada = require('../build/controllers/instruc/llamada')
const Return = require('../build/controllers/instruc/return')

const arb = require('../build/controllers/simbol/arbol')
const indexRef = require('../build/controllers/indexController')

var cadena  = '';

/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:// Ignorar espacios en blanco
break;
case 1:
break;
case 2:
break;
case 3:return 36;
break;
case 4:return 37;
break;
case 5:return 42;
break;
case 6:return 40;
break;
case 7:return 41;
break;
case 8:return 78;
break;
case 9:return 81;
break;
case 10:return 82;
break;
case 11:return 87;
break;
case 12:return 86;
break;
case 13:return 92;
break;
case 14:return 90;
break;
case 15:return 88;
break;
case 16:return 89;
break;
case 17:return 93;
break;
case 18:return 105;
break;
case 19:return 43;
break;
case 20:return 95;
break;
case 21:return 96;
break;
case 22:return 24;
break;
case 23:return 25
break;
case 24:return 73;
break;
case 25:return 74;
break;
case 26:return 68;
break;
case 27:return 102;
break;
case 28:return 38;
break;
case 29:return 77;
break;
case 30:return 104;
break;
case 31:return 76;
break;
case 32:return 75;
break;
case 33:return 28;
break;
case 34:return 99;
break;
case 35:return 65;
break;
case 36:return 66;
break;
case 37:return 53;
break;
case 38:return 52;
break;
case 39:return 58;
break;
case 40:return 32;
break;
case 41:return 57;
break;
case 42:return 56;
break;
case 43:return 54;
break;
case 44:return 55;
break;
case 45:return 59;
break;
case 46:return 60;
break;
case 47:return 44;
break;
case 48:return 45;
break;
case 49:return 46;
break;
case 50:return 47;
break;
case 51:return 48;
break;
case 52:return 51;
break;
case 53:return 33;
break;
case 54:return 9;
break;
case 55:return 49;
break;
case 56:return 50;
break;
case 57:return 79;
break;
case 58:return 80;
break;
case 59:return 97;
break;
case 60:return 98;
break;
case 61:return 70;
break;
case 62:return 39;
break;
case 63:return 34;
break;
case 64:return 64;
break;
case 65:return 62;
break;
case 66:return 61;
break;
case 67: cadena = ''; this.begin("string"); 
break;
case 68: cadena += yy_.yytext; 
break;
case 69: cadena += "\""; 
break;
case 70: cadena += "\n"; 
break;
case 71: cadena += " ";  
break;
case 72: cadena += "\t"; 
break;
case 73: cadena += "\\"; 
break;
case 74: cadena += "\'"; 
break;
case 75: cadena += "\r"; 
break;
case 76: yy_.yytext = cadena; this.popState(); return 63; 
break;
case 77:return 5;
break;
case 78: let error = new Errores.default("Léxico",("Token no reconocido: "+yy_.yytext), yy_.yylloc.first_line, yy_.yylloc.first_column);    
                              indexRef.lista_errores.push(error);                             
                        
break;
}
},
rules: [/^(?:\s+)/i,/^(?:\/\/.*)/i,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/i,/^(?:int\b)/i,/^(?:double\b)/i,/^(?:char\b)/i,/^(?:string\b)/i,/^(?:bool\b)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:switch\b)/i,/^(?:case\b)/i,/^(?:default\b)/i,/^(?:break\b)/i,/^(?:for\b)/i,/^(?:while\b)/i,/^(?:do\b)/i,/^(?:continue\b)/i,/^(?:return\b)/i,/^(?:void\b)/i,/^(?:\+\+)/i,/^(?:--)/i,/^(?:cout\b)/i,/^(?:<<)/i,/^(?:tolower\b)/i,/^(?:toupper\b)/i,/^(?:\.length\(\))/i,/^(?:\.c_str\b)/i,/^(?:std\b)/i,/^(?:toString\b)/i,/^(?:execute\b)/i,/^(?:typeOf\b)/i,/^(?:round\b)/i,/^(?:endl\b)/i,/^(?:new\b)/i,/^(?:true\b)/i,/^(?:false\b)/i,/^(?:!=)/i,/^(?:==)/i,/^(?:!)/i,/^(?:=)/i,/^(?:<=)/i,/^(?:>=)/i,/^(?:>)/i,/^(?:<)/i,/^(?:&&)/i,/^(?:\|\|)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:%)/i,/^(?:pow\b)/i,/^(?:,)/i,/^(?:;)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\{)/i,/^(?:\})/i,/^(?:\[)/i,/^(?:\])/i,/^(?:\?)/i,/^(?::)/i,/^(?:([a-zA-Z])([a-zA-Z0-9_])*)/i,/^(?:[']\\\\[']|[']\\"[']|[']\\'[']|[']\\n[']|[']\\t[']|[']\\r[']|['].?['])/i,/^(?:[0-9]+\.[0-9]+)/i,/^(?:[0-9]+)/i,/^(?:["])/i,/^(?:[^"\\]+)/i,/^(?:\\")/i,/^(?:\\n)/i,/^(?:\s)/i,/^(?:\\t)/i,/^(?:\\\\)/i,/^(?:\\\\')/i,/^(?:\\r)/i,/^(?:["])/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"string":{"rules":[68,69,70,71,72,73,74,75,76],"inclusive":false},"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,77,78],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = gramatica;
exports.Parser = gramatica.Parser;
exports.parse = function () { return gramatica.parse.apply(gramatica, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}